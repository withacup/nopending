 [{"value": "cpp", "text": "C++", "defaultCode": "/**--newline-- * Definition for an interval.--newline-- * struct Interval {--newline-- *--tab-- int start;--newline-- *--tab-- int end;--newline-- *--tab-- Interval() : start(0), end(0) {}--newline-- *--tab-- Interval(int s, int e) : start(s), end(e) {}--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline----tab--int eraseOverlapIntervals(vector<Interval>& intervals) {--newline----tab----tab----newline----tab--}--newline--};" },{"value": "java", "text": "Java", "defaultCode": "/**--newline-- * Definition for an interval.--newline-- * public class Interval {--newline-- *--tab-- int start;--newline-- *--tab-- int end;--newline-- *--tab-- Interval() { start = 0; end = 0; }--newline-- *--tab-- Interval(int s, int e) { start = s; end = e; }--newline-- * }--newline-- */--newline--public class Solution {--newline----tab--public int eraseOverlapIntervals(Interval[] intervals) {--newline----tab----tab----newline----tab--}--newline--}" },{"value": "python", "text": "Python", "defaultCode": "# Definition for an interval.--newline--# class Interval(object):--newline--#--tab-- def __init__(self, s=0, e=0):--newline--#--tab----tab-- self.start = s--newline--#--tab----tab-- self.end = e--newline----newline--class Solution(object):--newline----tab--def eraseOverlapIntervals(self, intervals):--newline----tab----tab--'''--newline----tab----tab--:type intervals: List[Interval]--newline----tab----tab--:rtype: int--newline----tab----tab--'''--newline----tab----tab--" },{"value": "c", "text": "C", "defaultCode": "/**--newline-- * Definition for an interval.--newline-- * struct Interval {--newline-- *--tab-- int start;--newline-- *--tab-- int end;--newline-- * };--newline-- */--newline--int eraseOverlapIntervals(struct Interval* intervals, int intervalsSize) {--newline----tab----newline--}" },{"value": "csharp", "text": "C#", "defaultCode": "/**--newline-- * Definition for an interval.--newline-- * public class Interval {--newline-- *--tab-- public int start;--newline-- *--tab-- public int end;--newline-- *--tab-- public Interval() { start = 0; end = 0; }--newline-- *--tab-- public Interval(int s, int e) { start = s; end = e; }--newline-- * }--newline-- */--newline--public class Solution {--newline----tab--public int EraseOverlapIntervals(Interval[] intervals) {--newline----tab----tab----newline----tab--}--newline--}" },{"value": "javascript", "text": "JavaScript", "defaultCode": "/**--newline-- * Definition for an interval.--newline-- * function Interval(start, end) {--newline-- *--tab-- this.start = start;--newline-- *--tab-- this.end = end;--newline-- * }--newline-- */--newline--/**--newline-- * @param {Interval[]} intervals--newline-- * @return {number}--newline-- */--newline--var eraseOverlapIntervals = function(intervals) {--newline----tab----newline--};" },{"value": "ruby", "text": "Ruby", "defaultCode": "# Definition for an interval.--newline--# class Interval--newline--#--tab-- attr_accessor :start, :end--newline--#--tab-- def initialize(s=0, e=0)--newline--#--tab----tab-- @start = s--newline--#--tab----tab-- @end = e--newline--#--tab-- end--newline--# end--newline----newline--# @param {Interval[]} intervals--newline--# @return {Integer}--newline--def erase_overlap_intervals(intervals)--newline----tab----newline--end" },{"value": "swift", "text": "Swift", "defaultCode": "/**--newline-- * Definition for an interval.--newline-- * public class Interval {--newline-- *   public var start: Int--newline-- *   public var end: Int--newline-- *   public init(_ start: Int, _ end: Int) {--newline-- *--tab-- self.start = start--newline-- *--tab-- self.end = end--newline-- *   }--newline-- * }--newline-- */--newline--class Solution {--newline----tab--func eraseOverlapIntervals(_ intervals: [Interval]) -> Int {--newline----tab----tab----newline----tab--}--newline--}" },{"value": "golang", "text": "Go", "defaultCode": "/**--newline-- * Definition for an interval.--newline-- * type Interval struct {--newline-- *    Start int--newline-- *    End   int--newline-- * }--newline-- */--newline--func eraseOverlapIntervals(intervals []Interval) int {--newline----tab----newline--}" }]