---CONTENT_BEGIN---

Given an integer n, return 1 - n in lexicographical order.



For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].



Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    vector<int> lexicalOrder(int n) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public List<Integer> lexicalOrder(int n) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def lexicalOrder(self, n):--newline--        '''--newline--        :type n: int--newline--        :rtype: List[int]--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "public class Solution {--newline--    public IList<int> LexicalOrder(int n) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number} n--newline-- * @return {number[]}--newline-- */--newline--var lexicalOrder = function(n) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}]
---SCRIPT_END---
