---CONTENT_BEGIN---

Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.



Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.


Example:

int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);

// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);

// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    Solution(vector<int> nums) {--newline--        --newline--    }--newline--    --newline--    int pick(int target) {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(nums);--newline-- * int param_1 = obj.pick(target);--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline----newline--    public Solution(int[] nums) {--newline--        --newline--    }--newline--    --newline--    public int pick(int target) {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(nums);--newline-- * int param_1 = obj.pick(target);--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline----newline--    def __init__(self, nums):--newline--        '''--newline--        --newline--        :type nums: List[int]--newline--        :type numsSize: int--newline--        '''--newline--        --newline----newline--    def pick(self, target):--newline--        '''--newline--        :type target: int--newline--        :rtype: int--newline--        '''--newline--        --newline----newline----newline--# Your Solution object will be instantiated and called as such:--newline--# obj = Solution(nums)--newline--# param_1 = obj.pick(target)", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} Solution;--newline----newline--Solution* solutionCreate(int* nums, int numsSize) {--newline--    --newline--}--newline----newline--int solutionPick(Solution* obj, int target) {--newline--    --newline--}--newline----newline--void solutionFree(Solution* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your Solution struct will be instantiated and called as such:--newline-- * struct Solution* obj = solutionCreate(nums, numsSize);--newline-- * int param_1 = solutionPick(obj, target);--newline-- * solutionFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "type Solution struct {--newline--    --newline--}--newline----newline----newline--func Constructor(nums []int) Solution {--newline--    --newline--}--newline----newline----newline--func (this *Solution) Pick(target int) int {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * obj := Constructor(nums);--newline-- * param_1 := obj.Pick(target);--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
