---CONTENT_BEGIN---

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * struct ListNode {--newline-- *     int val;--newline-- *     ListNode *next;--newline-- *     ListNode(int x) : val(x), next(NULL) {}--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline--    ListNode* mergeKLists(vector<ListNode*>& lists) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     int val;--newline-- *     ListNode next;--newline-- *     ListNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Solution {--newline--    public ListNode mergeKLists(ListNode[] lists) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for singly-linked list.--newline--# class ListNode(object):--newline--#     def __init__(self, x):--newline--#         self.val = x--newline--#         self.next = None--newline----newline--class Solution(object):--newline--    def mergeKLists(self, lists):--newline--        '''--newline--        :type lists: List[ListNode]--newline--        :rtype: ListNode--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * struct ListNode {--newline-- *     int val;--newline-- *     struct ListNode *next;--newline-- * };--newline-- */--newline--struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     public int val;--newline-- *     public ListNode next;--newline-- *     public ListNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Solution {--newline--    public ListNode MergeKLists(ListNode[] lists) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * function ListNode(val) {--newline-- *     this.val = val;--newline-- *     this.next = null;--newline-- * }--newline-- */--newline--/**--newline-- * @param {ListNode[]} lists--newline-- * @return {ListNode}--newline-- */--newline--var mergeKLists = function(lists) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# Definition for singly-linked list.--newline--# class ListNode--newline--#     attr_accessor :val, :next--newline--#     def initialize(val)--newline--#         @val = val--newline--#         @next = nil--newline--#     end--newline--# end--newline----newline--# @param {ListNode[]} lists--newline--# @return {ListNode}--newline--def merge_k_lists(lists)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     public var val: Int--newline-- *     public var next: ListNode?--newline-- *     public init(_ val: Int) {--newline-- *         self.val = val--newline-- *         self.next = nil--newline-- *     }--newline-- * }--newline-- */--newline--class Solution {--newline--    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * type ListNode struct {--newline-- *     Val int--newline-- *     Next *ListNode--newline-- * }--newline-- */--newline--func mergeKLists(lists []*ListNode) *ListNode {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
