---CONTENT_BEGIN---

Implement the following operations of a stack using queues.


push(x) -- Push element x onto stack.


pop() -- Removes the element on top of the stack.


top() -- Get the top element.


empty() -- Return whether the stack is empty.


Notes:

You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).



Credits:Special thanks to @jianchao.li.fighter for adding this problem and all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class MyStack {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    MyStack() {--newline--        --newline--    }--newline--    --newline--    /** Push element x onto stack. */--newline--    void push(int x) {--newline--        --newline--    }--newline--    --newline--    /** Removes the element on top of the stack and returns that element. */--newline--    int pop() {--newline--        --newline--    }--newline--    --newline--    /** Get the top element. */--newline--    int top() {--newline--        --newline--    }--newline--    --newline--    /** Returns whether the stack is empty. */--newline--    bool empty() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your MyStack object will be instantiated and called as such:--newline-- * MyStack obj = new MyStack();--newline-- * obj.push(x);--newline-- * int param_2 = obj.pop();--newline-- * int param_3 = obj.top();--newline-- * bool param_4 = obj.empty();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class MyStack {--newline----newline--    /** Initialize your data structure here. */--newline--    public MyStack() {--newline--        --newline--    }--newline--    --newline--    /** Push element x onto stack. */--newline--    public void push(int x) {--newline--        --newline--    }--newline--    --newline--    /** Removes the element on top of the stack and returns that element. */--newline--    public int pop() {--newline--        --newline--    }--newline--    --newline--    /** Get the top element. */--newline--    public int top() {--newline--        --newline--    }--newline--    --newline--    /** Returns whether the stack is empty. */--newline--    public boolean empty() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your MyStack object will be instantiated and called as such:--newline-- * MyStack obj = new MyStack();--newline-- * obj.push(x);--newline-- * int param_2 = obj.pop();--newline-- * int param_3 = obj.top();--newline-- * boolean param_4 = obj.empty();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class MyStack(object):--newline----newline--    def __init__(self):--newline--        '''--newline--        Initialize your data structure here.--newline--        '''--newline--        --newline----newline--    def push(self, x):--newline--        '''--newline--        Push element x onto stack.--newline--        :type x: int--newline--        :rtype: void--newline--        '''--newline--        --newline----newline--    def pop(self):--newline--        '''--newline--        Removes the element on top of the stack and returns that element.--newline--        :rtype: int--newline--        '''--newline--        --newline----newline--    def top(self):--newline--        '''--newline--        Get the top element.--newline--        :rtype: int--newline--        '''--newline--        --newline----newline--    def empty(self):--newline--        '''--newline--        Returns whether the stack is empty.--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline----newline--# Your MyStack object will be instantiated and called as such:--newline--# obj = MyStack()--newline--# obj.push(x)--newline--# param_2 = obj.pop()--newline--# param_3 = obj.top()--newline--# param_4 = obj.empty()", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} MyStack;--newline----newline--/** Initialize your data structure here. */--newline--MyStack* myStackCreate(int maxSize) {--newline--    --newline--}--newline----newline--/** Push element x onto stack. */--newline--void myStackPush(MyStack* obj, int x) {--newline--    --newline--}--newline----newline--/** Removes the element on top of the stack and returns that element. */--newline--int myStackPop(MyStack* obj) {--newline--    --newline--}--newline----newline--/** Get the top element. */--newline--int myStackTop(MyStack* obj) {--newline--    --newline--}--newline----newline--/** Returns whether the stack is empty. */--newline--bool myStackEmpty(MyStack* obj) {--newline--    --newline--}--newline----newline--void myStackFree(MyStack* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your MyStack struct will be instantiated and called as such:--newline-- * struct MyStack* obj = myStackCreate(maxSize);--newline-- * myStackPush(obj, x);--newline-- * int param_2 = myStackPop(obj);--newline-- * int param_3 = myStackTop(obj);--newline-- * bool param_4 = myStackEmpty(obj);--newline-- * myStackFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class MyStack {--newline----newline--    /** Initialize your data structure here. */--newline--    public MyStack() {--newline--        --newline--    }--newline--    --newline--    /** Push element x onto stack. */--newline--    public void Push(int x) {--newline--        --newline--    }--newline--    --newline--    /** Removes the element on top of the stack and returns that element. */--newline--    public int Pop() {--newline--        --newline--    }--newline--    --newline--    /** Get the top element. */--newline--    public int Top() {--newline--        --newline--    }--newline--    --newline--    /** Returns whether the stack is empty. */--newline--    public bool Empty() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your MyStack object will be instantiated and called as such:--newline-- * MyStack obj = new MyStack();--newline-- * obj.Push(x);--newline-- * int param_2 = obj.Pop();--newline-- * int param_3 = obj.Top();--newline-- * bool param_4 = obj.Empty();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Initialize your data structure here.--newline-- */--newline--var MyStack = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Push element x onto stack. --newline-- * @param {number} x--newline-- * @return {void}--newline-- */--newline--MyStack.prototype.push = function(x) {--newline--    --newline--};--newline----newline--/**--newline-- * Removes the element on top of the stack and returns that element.--newline-- * @return {number}--newline-- */--newline--MyStack.prototype.pop = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Get the top element.--newline-- * @return {number}--newline-- */--newline--MyStack.prototype.top = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Returns whether the stack is empty.--newline-- * @return {boolean}--newline-- */--newline--MyStack.prototype.empty = function() {--newline--    --newline--};--newline----newline--/** --newline-- * Your MyStack object will be instantiated and called as such:--newline-- * var obj = Object.create(MyStack).createNew()--newline-- * obj.push(x)--newline-- * var param_2 = obj.pop()--newline-- * var param_3 = obj.top()--newline-- * var param_4 = obj.empty()--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class MyStack--newline----newline--=begin--newline--    Initialize your data structure here.--newline--=end--newline--    def initialize()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Push element x onto stack.--newline--    :type x: Integer--newline--    :rtype: Void--newline--=end--newline--    def push(x)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Removes the element on top of the stack and returns that element.--newline--    :rtype: Integer--newline--=end--newline--    def pop()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Get the top element.--newline--    :rtype: Integer--newline--=end--newline--    def top()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Returns whether the stack is empty.--newline--    :rtype: Boolean--newline--=end--newline--    def empty()--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your MyStack object will be instantiated and called as such:--newline--# obj = MyStack.new()--newline--# obj.push(x)--newline--# param_2 = obj.pop()--newline--# param_3 = obj.top()--newline--# param_4 = obj.empty()", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type MyStack struct {--newline--    --newline--}--newline----newline----newline--/** Initialize your data structure here. */--newline--func Constructor() MyStack {--newline--    --newline--}--newline----newline----newline--/** Push element x onto stack. */--newline--func (this *MyStack) Push(x int)  {--newline--    --newline--}--newline----newline----newline--/** Removes the element on top of the stack and returns that element. */--newline--func (this *MyStack) Pop() int {--newline--    --newline--}--newline----newline----newline--/** Get the top element. */--newline--func (this *MyStack) Top() int {--newline--    --newline--}--newline----newline----newline--/** Returns whether the stack is empty. */--newline--func (this *MyStack) Empty() bool {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your MyStack object will be instantiated and called as such:--newline-- * obj := Constructor();--newline-- * obj.Push(x);--newline-- * param_2 := obj.Pop();--newline-- * param_3 := obj.Top();--newline-- * param_4 := obj.Empty();--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
