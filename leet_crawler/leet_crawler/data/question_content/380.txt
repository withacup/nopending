---CONTENT_BEGIN---
Design a data structure that supports all following operations in average O(1) time.



insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.



Example:

// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class RandomizedSet {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    RandomizedSet() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */--newline--    bool insert(int val) {--newline--        --newline--    }--newline--    --newline--    /** Removes a value from the set. Returns true if the set contained the specified element. */--newline--    bool remove(int val) {--newline--        --newline--    }--newline--    --newline--    /** Get a random element from the set. */--newline--    int getRandom() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your RandomizedSet object will be instantiated and called as such:--newline-- * RandomizedSet obj = new RandomizedSet();--newline-- * bool param_1 = obj.insert(val);--newline-- * bool param_2 = obj.remove(val);--newline-- * int param_3 = obj.getRandom();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class RandomizedSet {--newline----newline--    /** Initialize your data structure here. */--newline--    public RandomizedSet() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */--newline--    public boolean insert(int val) {--newline--        --newline--    }--newline--    --newline--    /** Removes a value from the set. Returns true if the set contained the specified element. */--newline--    public boolean remove(int val) {--newline--        --newline--    }--newline--    --newline--    /** Get a random element from the set. */--newline--    public int getRandom() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your RandomizedSet object will be instantiated and called as such:--newline-- * RandomizedSet obj = new RandomizedSet();--newline-- * boolean param_1 = obj.insert(val);--newline-- * boolean param_2 = obj.remove(val);--newline-- * int param_3 = obj.getRandom();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class RandomizedSet(object):--newline----newline--    def __init__(self):--newline--        '''--newline--        Initialize your data structure here.--newline--        '''--newline--        --newline----newline--    def insert(self, val):--newline--        '''--newline--        Inserts a value to the set. Returns true if the set did not already contain the specified element.--newline--        :type val: int--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline--    def remove(self, val):--newline--        '''--newline--        Removes a value from the set. Returns true if the set contained the specified element.--newline--        :type val: int--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline--    def getRandom(self):--newline--        '''--newline--        Get a random element from the set.--newline--        :rtype: int--newline--        '''--newline--        --newline----newline----newline--# Your RandomizedSet object will be instantiated and called as such:--newline--# obj = RandomizedSet()--newline--# param_1 = obj.insert(val)--newline--# param_2 = obj.remove(val)--newline--# param_3 = obj.getRandom()", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} RandomizedSet;--newline----newline--/** Initialize your data structure here. */--newline--RandomizedSet* randomizedSetCreate() {--newline--    --newline--}--newline----newline--/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */--newline--bool randomizedSetInsert(RandomizedSet* obj, int val) {--newline--    --newline--}--newline----newline--/** Removes a value from the set. Returns true if the set contained the specified element. */--newline--bool randomizedSetRemove(RandomizedSet* obj, int val) {--newline--    --newline--}--newline----newline--/** Get a random element from the set. */--newline--int randomizedSetGetRandom(RandomizedSet* obj) {--newline--    --newline--}--newline----newline--void randomizedSetFree(RandomizedSet* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your RandomizedSet struct will be instantiated and called as such:--newline-- * struct RandomizedSet* obj = randomizedSetCreate();--newline-- * bool param_1 = randomizedSetInsert(obj, val);--newline-- * bool param_2 = randomizedSetRemove(obj, val);--newline-- * int param_3 = randomizedSetGetRandom(obj);--newline-- * randomizedSetFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class RandomizedSet {--newline----newline--    /** Initialize your data structure here. */--newline--    public RandomizedSet() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */--newline--    public bool Insert(int val) {--newline--        --newline--    }--newline--    --newline--    /** Removes a value from the set. Returns true if the set contained the specified element. */--newline--    public bool Remove(int val) {--newline--        --newline--    }--newline--    --newline--    /** Get a random element from the set. */--newline--    public int GetRandom() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your RandomizedSet object will be instantiated and called as such:--newline-- * RandomizedSet obj = new RandomizedSet();--newline-- * bool param_1 = obj.Insert(val);--newline-- * bool param_2 = obj.Remove(val);--newline-- * int param_3 = obj.GetRandom();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Initialize your data structure here.--newline-- */--newline--var RandomizedSet = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Inserts a value to the set. Returns true if the set did not already contain the specified element. --newline-- * @param {number} val--newline-- * @return {boolean}--newline-- */--newline--RandomizedSet.prototype.insert = function(val) {--newline--    --newline--};--newline----newline--/**--newline-- * Removes a value from the set. Returns true if the set contained the specified element. --newline-- * @param {number} val--newline-- * @return {boolean}--newline-- */--newline--RandomizedSet.prototype.remove = function(val) {--newline--    --newline--};--newline----newline--/**--newline-- * Get a random element from the set.--newline-- * @return {number}--newline-- */--newline--RandomizedSet.prototype.getRandom = function() {--newline--    --newline--};--newline----newline--/** --newline-- * Your RandomizedSet object will be instantiated and called as such:--newline-- * var obj = Object.create(RandomizedSet).createNew()--newline-- * var param_1 = obj.insert(val)--newline-- * var param_2 = obj.remove(val)--newline-- * var param_3 = obj.getRandom()--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class RandomizedSet--newline----newline--=begin--newline--    Initialize your data structure here.--newline--=end--newline--    def initialize()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Inserts a value to the set. Returns true if the set did not already contain the specified element.--newline--    :type val: Integer--newline--    :rtype: Boolean--newline--=end--newline--    def insert(val)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Removes a value from the set. Returns true if the set contained the specified element.--newline--    :type val: Integer--newline--    :rtype: Boolean--newline--=end--newline--    def remove(val)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Get a random element from the set.--newline--    :rtype: Integer--newline--=end--newline--    def get_random()--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your RandomizedSet object will be instantiated and called as such:--newline--# obj = RandomizedSet.new()--newline--# param_1 = obj.insert(val)--newline--# param_2 = obj.remove(val)--newline--# param_3 = obj.get_random()", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type RandomizedSet struct {--newline--    --newline--}--newline----newline----newline--/** Initialize your data structure here. */--newline--func Constructor() RandomizedSet {--newline--    --newline--}--newline----newline----newline--/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */--newline--func (this *RandomizedSet) Insert(val int) bool {--newline--    --newline--}--newline----newline----newline--/** Removes a value from the set. Returns true if the set contained the specified element. */--newline--func (this *RandomizedSet) Remove(val int) bool {--newline--    --newline--}--newline----newline----newline--/** Get a random element from the set. */--newline--func (this *RandomizedSet) GetRandom() int {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your RandomizedSet object will be instantiated and called as such:--newline-- * obj := Constructor();--newline-- * param_1 := obj.Insert(val);--newline-- * param_2 := obj.Remove(val);--newline-- * param_3 := obj.GetRandom();--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
