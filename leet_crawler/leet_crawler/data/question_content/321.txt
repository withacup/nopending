---CONTENT_BEGIN---

    Given two arrays of length m and n with digits 0-9 representing two numbers.
    Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits
    from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.



    Example 1:


    nums1 = [3, 4, 6, 5]
    nums2 = [9, 1, 2, 5, 8, 3]
    k = 5
    return [9, 8, 6, 5, 3]


    Example 2:


    nums1 = [6, 7]
    nums2 = [6, 0, 4]
    k = 5
    return [6, 7, 6, 0, 4]


    Example 3:


    nums1 = [3, 9]
    nums2 = [8, 9]
    k = 3
    return [9, 8, 9]


Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public int[] maxNumber(int[] nums1, int[] nums2, int k) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def maxNumber(self, nums1, nums2, k):--newline--        '''--newline--        :type nums1: List[int]--newline--        :type nums2: List[int]--newline--        :type k: int--newline--        :rtype: List[int]--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Return an array of size *returnSize.--newline-- * Note: The returned array must be malloced, assume caller calls free().--newline-- */--newline--int* maxNumber(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public int[] MaxNumber(int[] nums1, int[] nums2, int k) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} nums1--newline-- * @param {number[]} nums2--newline-- * @param {number} k--newline-- * @return {number[]}--newline-- */--newline--var maxNumber = function(nums1, nums2, k) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer[]} nums1--newline--# @param {Integer[]} nums2--newline--# @param {Integer} k--newline--# @return {Integer[]}--newline--def max_number(nums1, nums2, k)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func maxNumber(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [Int] {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func maxNumber(nums1 []int, nums2 []int, k int) []int {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
