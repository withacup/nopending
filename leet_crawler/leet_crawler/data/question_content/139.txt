---CONTENT_BEGIN---

Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.


For example, given
s = "leetcode",
dict = ["leet", "code"].



Return true because "leetcode" can be segmented as "leet code".



UPDATE (2017/1/4):
The wordDict parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    bool wordBreak(string s, vector<string>& wordDict) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public boolean wordBreak(String s, List<String> wordDict) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def wordBreak(self, s, wordDict):--newline--        '''--newline--        :type s: str--newline--        :type wordDict: List[str]--newline--        :rtype: bool--newline--        '''", "value": "python", "text": "Python"}, {"defaultCode": "bool wordBreak(char* s, char** wordDict, int wordDictSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public bool WordBreak(string s, IList<string> wordDict) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {string} s--newline-- * @param {string[]} wordDict--newline-- * @return {boolean}--newline-- */--newline--var wordBreak = function(s, wordDict) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {String} s--newline--# @param {String[]} word_dict--newline--# @return {Boolean}--newline--def word_break(s, word_dict)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func wordBreak(s string, wordDict []string) bool {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
