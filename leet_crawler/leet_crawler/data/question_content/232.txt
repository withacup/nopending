---CONTENT_BEGIN---

Implement the following operations of a queue using stacks.


push(x) -- Push element x to the back of queue.


pop() -- Removes the element from in front of queue.


peek() -- Get the front element.


empty() -- Return whether the queue is empty.


Notes:

You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class MyQueue {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    MyQueue() {--newline--        --newline--    }--newline--    --newline--    /** Push element x to the back of queue. */--newline--    void push(int x) {--newline--        --newline--    }--newline--    --newline--    /** Removes the element from in front of queue and returns that element. */--newline--    int pop() {--newline--        --newline--    }--newline--    --newline--    /** Get the front element. */--newline--    int peek() {--newline--        --newline--    }--newline--    --newline--    /** Returns whether the queue is empty. */--newline--    bool empty() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your MyQueue object will be instantiated and called as such:--newline-- * MyQueue obj = new MyQueue();--newline-- * obj.push(x);--newline-- * int param_2 = obj.pop();--newline-- * int param_3 = obj.peek();--newline-- * bool param_4 = obj.empty();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class MyQueue {--newline----newline--    /** Initialize your data structure here. */--newline--    public MyQueue() {--newline--        --newline--    }--newline--    --newline--    /** Push element x to the back of queue. */--newline--    public void push(int x) {--newline--        --newline--    }--newline--    --newline--    /** Removes the element from in front of queue and returns that element. */--newline--    public int pop() {--newline--        --newline--    }--newline--    --newline--    /** Get the front element. */--newline--    public int peek() {--newline--        --newline--    }--newline--    --newline--    /** Returns whether the queue is empty. */--newline--    public boolean empty() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your MyQueue object will be instantiated and called as such:--newline-- * MyQueue obj = new MyQueue();--newline-- * obj.push(x);--newline-- * int param_2 = obj.pop();--newline-- * int param_3 = obj.peek();--newline-- * boolean param_4 = obj.empty();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class MyQueue(object):--newline----newline--    def __init__(self):--newline--        '''--newline--        Initialize your data structure here.--newline--        '''--newline--        --newline----newline--    def push(self, x):--newline--        '''--newline--        Push element x to the back of queue.--newline--        :type x: int--newline--        :rtype: void--newline--        '''--newline--        --newline----newline--    def pop(self):--newline--        '''--newline--        Removes the element from in front of queue and returns that element.--newline--        :rtype: int--newline--        '''--newline--        --newline----newline--    def peek(self):--newline--        '''--newline--        Get the front element.--newline--        :rtype: int--newline--        '''--newline--        --newline----newline--    def empty(self):--newline--        '''--newline--        Returns whether the queue is empty.--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline----newline--# Your MyQueue object will be instantiated and called as such:--newline--# obj = MyQueue()--newline--# obj.push(x)--newline--# param_2 = obj.pop()--newline--# param_3 = obj.peek()--newline--# param_4 = obj.empty()", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} MyQueue;--newline----newline--/** Initialize your data structure here. */--newline--MyQueue* myQueueCreate(int maxSize) {--newline--    --newline--}--newline----newline--/** Push element x to the back of queue. */--newline--void myQueuePush(MyQueue* obj, int x) {--newline--    --newline--}--newline----newline--/** Removes the element from in front of queue and returns that element. */--newline--int myQueuePop(MyQueue* obj) {--newline--    --newline--}--newline----newline--/** Get the front element. */--newline--int myQueuePeek(MyQueue* obj) {--newline--    --newline--}--newline----newline--/** Returns whether the queue is empty. */--newline--bool myQueueEmpty(MyQueue* obj) {--newline--    --newline--}--newline----newline--void myQueueFree(MyQueue* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your MyQueue struct will be instantiated and called as such:--newline-- * struct MyQueue* obj = myQueueCreate(maxSize);--newline-- * myQueuePush(obj, x);--newline-- * int param_2 = myQueuePop(obj);--newline-- * int param_3 = myQueuePeek(obj);--newline-- * bool param_4 = myQueueEmpty(obj);--newline-- * myQueueFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class MyQueue {--newline----newline--    /** Initialize your data structure here. */--newline--    public MyQueue() {--newline--        --newline--    }--newline--    --newline--    /** Push element x to the back of queue. */--newline--    public void Push(int x) {--newline--        --newline--    }--newline--    --newline--    /** Removes the element from in front of queue and returns that element. */--newline--    public int Pop() {--newline--        --newline--    }--newline--    --newline--    /** Get the front element. */--newline--    public int Peek() {--newline--        --newline--    }--newline--    --newline--    /** Returns whether the queue is empty. */--newline--    public bool Empty() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your MyQueue object will be instantiated and called as such:--newline-- * MyQueue obj = new MyQueue();--newline-- * obj.Push(x);--newline-- * int param_2 = obj.Pop();--newline-- * int param_3 = obj.Peek();--newline-- * bool param_4 = obj.Empty();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Initialize your data structure here.--newline-- */--newline--var MyQueue = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Push element x to the back of queue. --newline-- * @param {number} x--newline-- * @return {void}--newline-- */--newline--MyQueue.prototype.push = function(x) {--newline--    --newline--};--newline----newline--/**--newline-- * Removes the element from in front of queue and returns that element.--newline-- * @return {number}--newline-- */--newline--MyQueue.prototype.pop = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Get the front element.--newline-- * @return {number}--newline-- */--newline--MyQueue.prototype.peek = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Returns whether the queue is empty.--newline-- * @return {boolean}--newline-- */--newline--MyQueue.prototype.empty = function() {--newline--    --newline--};--newline----newline--/** --newline-- * Your MyQueue object will be instantiated and called as such:--newline-- * var obj = Object.create(MyQueue).createNew()--newline-- * obj.push(x)--newline-- * var param_2 = obj.pop()--newline-- * var param_3 = obj.peek()--newline-- * var param_4 = obj.empty()--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class MyQueue--newline----newline--=begin--newline--    Initialize your data structure here.--newline--=end--newline--    def initialize()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Push element x to the back of queue.--newline--    :type x: Integer--newline--    :rtype: Void--newline--=end--newline--    def push(x)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Removes the element from in front of queue and returns that element.--newline--    :rtype: Integer--newline--=end--newline--    def pop()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Get the front element.--newline--    :rtype: Integer--newline--=end--newline--    def peek()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Returns whether the queue is empty.--newline--    :rtype: Boolean--newline--=end--newline--    def empty()--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your MyQueue object will be instantiated and called as such:--newline--# obj = MyQueue.new()--newline--# obj.push(x)--newline--# param_2 = obj.pop()--newline--# param_3 = obj.peek()--newline--# param_4 = obj.empty()", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type MyQueue struct {--newline--    --newline--}--newline----newline----newline--/** Initialize your data structure here. */--newline--func Constructor() MyQueue {--newline--    --newline--}--newline----newline----newline--/** Push element x to the back of queue. */--newline--func (this *MyQueue) Push(x int)  {--newline--    --newline--}--newline----newline----newline--/** Removes the element from in front of queue and returns that element. */--newline--func (this *MyQueue) Pop() int {--newline--    --newline--}--newline----newline----newline--/** Get the front element. */--newline--func (this *MyQueue) Peek() int {--newline--    --newline--}--newline----newline----newline--/** Returns whether the queue is empty. */--newline--func (this *MyQueue) Empty() bool {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your MyQueue object will be instantiated and called as such:--newline-- * obj := Constructor();--newline-- * obj.Push(x);--newline-- * param_2 := obj.Pop();--newline-- * param_3 := obj.Peek();--newline-- * param_4 := obj.Empty();--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
