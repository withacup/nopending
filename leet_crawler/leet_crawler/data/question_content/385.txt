---CONTENT_BEGIN---
Given a nested list of integers represented as a string, implement a parser to deserialize it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Note:
You may assume that the string is well-formed:

String is non-empty.
String does not contain white spaces.
String contains only digits 0-9, [, - ,, ].



Example 1:

Given s = "324",

You should return a NestedInteger object which contains a single integer 324.



Example 2:

Given s = "[123,[456,[789]]]",

Return a NestedInteger object containing a nested list with 2 elements:

1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * class NestedInteger {--newline-- *   public:--newline-- *     // Constructor initializes an empty nested list.--newline-- *     NestedInteger();--newline-- *--newline-- *     // Constructor initializes a single integer.--newline-- *     NestedInteger(int value);--newline-- *--newline-- *     // Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     bool isInteger() const;--newline-- *--newline-- *     // Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     // The result is undefined if this NestedInteger holds a nested list--newline-- *     int getInteger() const;--newline-- *--newline-- *     // Set this NestedInteger to hold a single integer.--newline-- *     void setInteger(int value);--newline-- *--newline-- *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.--newline-- *     void add(const NestedInteger &ni);--newline-- *--newline-- *     // Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     // The result is undefined if this NestedInteger holds a single integer--newline-- *     const vector<NestedInteger> &getList() const;--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline--    NestedInteger deserialize(string s) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * public interface NestedInteger {--newline-- *     // Constructor initializes an empty nested list.--newline-- *     public NestedInteger();--newline-- *--newline-- *     // Constructor initializes a single integer.--newline-- *     public NestedInteger(int value);--newline-- *--newline-- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     public boolean isInteger();--newline-- *--newline-- *     // @return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     // Return null if this NestedInteger holds a nested list--newline-- *     public Integer getInteger();--newline-- *--newline-- *     // Set this NestedInteger to hold a single integer.--newline-- *     public void setInteger(int value);--newline-- *--newline-- *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.--newline-- *     public void add(NestedInteger ni);--newline-- *--newline-- *     // @return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     // Return null if this NestedInteger holds a single integer--newline-- *     public List<NestedInteger> getList();--newline-- * }--newline-- */--newline--public class Solution {--newline--    public NestedInteger deserialize(String s) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "# '''--newline--# This is the interface that allows for creating nested lists.--newline--# You should not implement it, or speculate about its implementation--newline--# '''--newline--#class NestedInteger(object):--newline--#    def __init__(self, value=None):--newline--#        '''--newline--#        If value is not specified, initializes an empty list.--newline--#        Otherwise initializes a single integer equal to value.--newline--#        '''--newline--#--newline--#    def isInteger(self):--newline--#        '''--newline--#        @return True if this NestedInteger holds a single integer, rather than a nested list.--newline--#        :rtype bool--newline--#        '''--newline--#--newline--#    def add(self, elem):--newline--#        '''--newline--#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.--newline--#        :rtype void--newline--#        '''--newline--#--newline--#    def setInteger(self, value):--newline--#        '''--newline--#        Set this NestedInteger to hold a single integer equal to value.--newline--#        :rtype void--newline--#        '''--newline--#--newline--#    def getInteger(self):--newline--#        '''--newline--#        @return the single integer that this NestedInteger holds, if it holds a single integer--newline--#        Return None if this NestedInteger holds a nested list--newline--#        :rtype int--newline--#        '''--newline--#--newline--#    def getList(self):--newline--#        '''--newline--#        @return the nested list that this NestedInteger holds, if it holds a nested list--newline--#        Return None if this NestedInteger holds a single integer--newline--#        :rtype List[NestedInteger]--newline--#        '''--newline----newline--class Solution(object):--newline--    def deserialize(self, s):--newline--        '''--newline--        :type s: str--newline--        :rtype: NestedInteger--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * *********************************************************************--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * *********************************************************************--newline-- *--newline-- * // Initializes an empty nested list and return a reference to the nested integer.--newline-- * struct NestedInteger *NestedIntegerInit();--newline-- *--newline-- * // Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- * bool NestedIntegerIsInteger(struct NestedInteger *);--newline-- *--newline-- * // Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- * // The result is undefined if this NestedInteger holds a nested list--newline-- * int NestedIntegerGetInteger(struct NestedInteger *);--newline-- *--newline-- * // Set this NestedInteger to hold a single integer.--newline-- * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);--newline-- *--newline-- * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.--newline-- * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);--newline-- *--newline-- * // Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- * // The result is undefined if this NestedInteger holds a single integer--newline-- * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);--newline-- *--newline-- * // Return the nested ' size that this NestedInteger holds, if it holds a nested list--newline-- * // The result is undefined if this NestedInteger holds a single integer--newline-- * int NestedIntegerGetListSize(struct NestedInteger *);--newline-- * };--newline-- */--newline--struct NestedInteger* deserialize(char* s) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * interface NestedInteger {--newline-- *--newline-- *     // Constructor initializes an empty nested list.--newline-- *     public NestedInteger();--newline-- *--newline-- *     // Constructor initializes a single integer.--newline-- *     public NestedInteger(int value);--newline-- *--newline-- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     bool IsInteger();--newline-- *--newline-- *     // @return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     // Return null if this NestedInteger holds a nested list--newline-- *     int GetInteger();--newline-- *--newline-- *     // Set this NestedInteger to hold a single integer.--newline-- *     public void SetInteger(int value);--newline-- *--newline-- *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.--newline-- *     public void Add(NestedInteger ni);--newline-- *--newline-- *     // @return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     // Return null if this NestedInteger holds a single integer--newline-- *     IList<NestedInteger> GetList();--newline-- * }--newline-- */--newline--public class Solution {--newline--    public NestedInteger Deserialize(string s) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * function NestedInteger() {--newline-- *--newline-- *     Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     @return {boolean}--newline-- *     this.isInteger = function() {--newline-- *         ...--newline-- *     };--newline-- *--newline-- *     Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     Return null if this NestedInteger holds a nested list--newline-- *     @return {integer}--newline-- *     this.getInteger = function() {--newline-- *         ...--newline-- *     };--newline-- *--newline-- *     Set this NestedInteger to hold a single integer equal to value.--newline-- *     @return {void}--newline-- *     this.setInteger = function(value) {--newline-- *         ...--newline-- *     };--newline-- *--newline-- *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.--newline-- *     @return {void}--newline-- *     this.add = function(elem) {--newline-- *         ...--newline-- *     };--newline-- *--newline-- *     Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     Return null if this NestedInteger holds a single integer--newline-- *     @return {NestedInteger[]}--newline-- *     this.getList = function() {--newline-- *         ...--newline-- *     };--newline-- * };--newline-- */--newline--/**--newline-- * @param {string} s--newline-- * @return {NestedInteger}--newline-- */--newline--var deserialize = function(s) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# This is the interface that allows for creating nested lists.--newline--# You should not implement it, or speculate about its implementation--newline--#--newline--#class NestedInteger--newline--#    def is_integer()--newline--#        '''--newline--#        Return true if this NestedInteger holds a single integer, rather than a nested list.--newline--#        @return {Boolean}--newline--#        '''--newline--#--newline--#    def get_integer()--newline--#        '''--newline--#        Return the single integer that this NestedInteger holds, if it holds a single integer--newline--#        Return nil if this NestedInteger holds a nested list--newline--#        @return {Integer}--newline--#        '''--newline--#--newline--#    def set_integer(value)--newline--#        '''--newline--#        Set this NestedInteger to hold a single integer equal to value.--newline--#        @return {Void}--newline--#        '''--newline--#--newline--#    def add(elem)--newline--#        '''--newline--#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.--newline--#        @return {Void}--newline--#        '''--newline--#--newline--#    def get_list()--newline--#        '''--newline--#        Return the nested list that this NestedInteger holds, if it holds a nested list--newline--#        Return nil if this NestedInteger holds a single integer--newline--#        @return {NestedInteger[]}--newline--#        '''--newline----newline--# @param {String} s--newline--# @return {NestedInteger}--newline--def deserialize(s)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * class NestedInteger {--newline-- *     // Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     public func isInteger() -> Bool--newline-- *--newline-- *     // Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     // The result is undefined if this NestedInteger holds a nested list--newline-- *     public func getInteger() -> Int--newline-- *--newline-- *     // Set this NestedInteger to hold a single integer.--newline-- *     public func setInteger(value: Int)--newline-- *--newline-- *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.--newline-- *     public func add(elem: NestedInteger)--newline-- *--newline-- *     // Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     // The result is undefined if this NestedInteger holds a single integer--newline-- *     public func getList() -> [NestedInteger]--newline-- * }--newline-- */--newline--class Solution {--newline--    func deserialize(_ s: String) -> NestedInteger {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * type NestedInteger struct {--newline-- * }--newline-- *--newline-- * // Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- * func (n NestedInteger) IsInteger() bool {}--newline-- *--newline-- * // Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- * // The result is undefined if this NestedInteger holds a nested list--newline-- * // So before calling this method, you should have a check--newline-- * func (n NestedInteger) GetInteger() int {}--newline-- *--newline-- * // Set this NestedInteger to hold a single integer.--newline-- * func (n *NestedInteger) SetInteger(value int) {}--newline-- *--newline-- * // Set this NestedInteger to hold a nested list and adds a nested integer to it.--newline-- * func (n *NestedInteger) Add(elem NestedInteger) {}--newline-- *--newline-- * // Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- * // The list length is zero if this NestedInteger holds a single integer--newline-- * // You can access ' List element directly if you want to modify it--newline-- * func (n NestedInteger) GetList() []*NestedInteger {}--newline-- */--newline--func deserialize(s string) *NestedInteger {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
