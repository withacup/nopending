---CONTENT_BEGIN---

Design a data structure that supports the following two operations:


void addWord(word)
bool search(word)



search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.


For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true



Note:
You may assume that all words are consist of lowercase letters a-z.


click to show hint.

You should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class WordDictionary {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    WordDictionary() {--newline--        --newline--    }--newline--    --newline--    /** Adds a word into the data structure. */--newline--    void addWord(string word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */--newline--    bool search(string word) {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your WordDictionary object will be instantiated and called as such:--newline-- * WordDictionary obj = new WordDictionary();--newline-- * obj.addWord(word);--newline-- * bool param_2 = obj.search(word);--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class WordDictionary {--newline----newline--    /** Initialize your data structure here. */--newline--    public WordDictionary() {--newline--        --newline--    }--newline--    --newline--    /** Adds a word into the data structure. */--newline--    public void addWord(String word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */--newline--    public boolean search(String word) {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your WordDictionary object will be instantiated and called as such:--newline-- * WordDictionary obj = new WordDictionary();--newline-- * obj.addWord(word);--newline-- * boolean param_2 = obj.search(word);--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class WordDictionary(object):--newline----newline--    def __init__(self):--newline--        '''--newline--        Initialize your data structure here.--newline--        '''--newline--        --newline----newline--    def addWord(self, word):--newline--        '''--newline--        Adds a word into the data structure.--newline--        :type word: str--newline--        :rtype: void--newline--        '''--newline--        --newline----newline--    def search(self, word):--newline--        '''--newline--        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.--newline--        :type word: str--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline----newline--# Your WordDictionary object will be instantiated and called as such:--newline--# obj = WordDictionary()--newline--# obj.addWord(word)--newline--# param_2 = obj.search(word)", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} WordDictionary;--newline----newline--/** Initialize your data structure here. */--newline--WordDictionary* wordDictionaryCreate() {--newline--    --newline--}--newline----newline--/** Adds a word into the data structure. */--newline--void wordDictionaryAddWord(WordDictionary* obj, char* word) {--newline--    --newline--}--newline----newline--/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */--newline--bool wordDictionarySearch(WordDictionary* obj, char* word) {--newline--    --newline--}--newline----newline--void wordDictionaryFree(WordDictionary* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your WordDictionary struct will be instantiated and called as such:--newline-- * struct WordDictionary* obj = wordDictionaryCreate();--newline-- * wordDictionaryAddWord(obj, word);--newline-- * bool param_2 = wordDictionarySearch(obj, word);--newline-- * wordDictionaryFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class WordDictionary {--newline----newline--    /** Initialize your data structure here. */--newline--    public WordDictionary() {--newline--        --newline--    }--newline--    --newline--    /** Adds a word into the data structure. */--newline--    public void AddWord(string word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */--newline--    public bool Search(string word) {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your WordDictionary object will be instantiated and called as such:--newline-- * WordDictionary obj = new WordDictionary();--newline-- * obj.AddWord(word);--newline-- * bool param_2 = obj.Search(word);--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Initialize your data structure here.--newline-- */--newline--var WordDictionary = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Adds a word into the data structure. --newline-- * @param {string} word--newline-- * @return {void}--newline-- */--newline--WordDictionary.prototype.addWord = function(word) {--newline--    --newline--};--newline----newline--/**--newline-- * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. --newline-- * @param {string} word--newline-- * @return {boolean}--newline-- */--newline--WordDictionary.prototype.search = function(word) {--newline--    --newline--};--newline----newline--/** --newline-- * Your WordDictionary object will be instantiated and called as such:--newline-- * var obj = Object.create(WordDictionary).createNew()--newline-- * obj.addWord(word)--newline-- * var param_2 = obj.search(word)--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class WordDictionary--newline----newline--=begin--newline--    Initialize your data structure here.--newline--=end--newline--    def initialize()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Adds a word into the data structure.--newline--    :type word: String--newline--    :rtype: Void--newline--=end--newline--    def add_word(word)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.--newline--    :type word: String--newline--    :rtype: Boolean--newline--=end--newline--    def search(word)--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your WordDictionary object will be instantiated and called as such:--newline--# obj = WordDictionary.new()--newline--# obj.add_word(word)--newline--# param_2 = obj.search(word)", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type WordDictionary struct {--newline--    --newline--}--newline----newline----newline--/** Initialize your data structure here. */--newline--func Constructor() WordDictionary {--newline--    --newline--}--newline----newline----newline--/** Adds a word into the data structure. */--newline--func (this *WordDictionary) AddWord(word string)  {--newline--    --newline--}--newline----newline----newline--/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */--newline--func (this *WordDictionary) Search(word string) bool {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your WordDictionary object will be instantiated and called as such:--newline-- * obj := Constructor();--newline-- * obj.AddWord(word);--newline-- * param_2 := obj.Search(word);--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
