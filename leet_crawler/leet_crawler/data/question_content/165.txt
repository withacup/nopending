---CONTENT_BEGIN---
Compare two version numbers version1 and version2.
If version1 &gt; version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:
0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37

Credits:Special thanks to @ts for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    int compareVersion(string version1, string version2) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public int compareVersion(String version1, String version2) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def compareVersion(self, version1, version2):--newline--        '''--newline--        :type version1: str--newline--        :type version2: str--newline--        :rtype: int--newline--        '''", "value": "python", "text": "Python"}, {"defaultCode": "int compareVersion(char* version1, char* version2) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public int CompareVersion(string version1, string version2) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {string} version1--newline-- * @param {string} version2--newline-- * @return {number}--newline-- */--newline--var compareVersion = function(version1, version2) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {String} version1--newline--# @param {String} version2--newline--# @return {Integer}--newline--def compare_version(version1, version2)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func compareVersion(_ version1: String, _ version2: String) -> Int {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func compareVersion(version1 string, version2 string) int {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
