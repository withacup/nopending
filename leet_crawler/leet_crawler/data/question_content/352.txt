---CONTENT_BEGIN---
Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.

For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:

[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]


Follow up:
What if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?


Credits:Special thanks to @yunhong for adding this problem and creating most of the test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * struct Interval {--newline-- *     int start;--newline-- *     int end;--newline-- *     Interval() : start(0), end(0) {}--newline-- *     Interval(int s, int e) : start(s), end(e) {}--newline-- * };--newline-- */--newline--class SummaryRanges {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    SummaryRanges() {--newline--        --newline--    }--newline--    --newline--    void addNum(int val) {--newline--        --newline--    }--newline--    --newline--    vector<Interval> getIntervals() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your SummaryRanges object will be instantiated and called as such:--newline-- * SummaryRanges obj = new SummaryRanges();--newline-- * obj.addNum(val);--newline-- * vector<Interval> param_2 = obj.getIntervals();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * public class Interval {--newline-- *     int start;--newline-- *     int end;--newline-- *     Interval() { start = 0; end = 0; }--newline-- *     Interval(int s, int e) { start = s; end = e; }--newline-- * }--newline-- */--newline--public class SummaryRanges {--newline----newline--    /** Initialize your data structure here. */--newline--    public SummaryRanges() {--newline--        --newline--    }--newline--    --newline--    public void addNum(int val) {--newline--        --newline--    }--newline--    --newline--    public List<Interval> getIntervals() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your SummaryRanges object will be instantiated and called as such:--newline-- * SummaryRanges obj = new SummaryRanges();--newline-- * obj.addNum(val);--newline-- * List<Interval> param_2 = obj.getIntervals();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for an interval.--newline--# class Interval(object):--newline--#     def __init__(self, s=0, e=0):--newline--#         self.start = s--newline--#         self.end = e--newline----newline--class SummaryRanges(object):--newline----newline--    def __init__(self):--newline--        '''--newline--        Initialize your data structure here.--newline--        '''--newline--        --newline----newline--    def addNum(self, val):--newline--        '''--newline--        :type val: int--newline--        :rtype: void--newline--        '''--newline--        --newline----newline--    def getIntervals(self):--newline--        '''--newline--        :rtype: List[Interval]--newline--        '''--newline--        --newline----newline----newline--# Your SummaryRanges object will be instantiated and called as such:--newline--# obj = SummaryRanges()--newline--# obj.addNum(val)--newline--# param_2 = obj.getIntervals()", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * struct Interval {--newline-- *     int start;--newline-- *     int end;--newline-- * };--newline-- */--newline--typedef struct {--newline--    --newline--} SummaryRanges;--newline----newline--/** Initialize your data structure here. */--newline--SummaryRanges* summaryRangesCreate() {--newline--    --newline--}--newline----newline--void summaryRangesAddNum(SummaryRanges* obj, int val) {--newline--    --newline--}--newline----newline--struct Interval* summaryRangesGetIntervals(SummaryRanges* obj, int *returnSize) {--newline--    --newline--}--newline----newline--void summaryRangesFree(SummaryRanges* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your SummaryRanges struct will be instantiated and called as such:--newline-- * struct SummaryRanges* obj = summaryRangesCreate();--newline-- * summaryRangesAddNum(obj, val);--newline-- * struct Interval* param_2 = summaryRangesGetIntervals(obj);--newline-- * summaryRangesFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * type Interval struct {--newline-- *--tab--   Start int--newline-- *--tab--   End   int--newline-- * }--newline-- */--newline--type SummaryRanges struct {--newline----newline--}--newline----newline----newline--/** Initialize your data structure here. */--newline--func Constructor() SummaryRanges {--newline----newline--}--newline----newline----newline--func (this *SummaryRanges) Addnum(val int)  {--newline----newline--}--newline----newline----newline--func (this *SummaryRanges) Getintervals() []Interval {--newline----newline--}--newline----newline----newline--/**--newline-- * Your SummaryRanges object will be instantiated and called as such:--newline-- * obj := Constructor();--newline-- * obj.Addnum(val);--newline-- * param_2 := obj.Getintervals();--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
