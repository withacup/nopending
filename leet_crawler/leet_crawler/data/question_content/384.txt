---CONTENT_BEGIN---
Shuffle a set of numbers without duplicates.


Example:

// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    Solution(vector<int> nums) {--newline--        --newline--    }--newline--    --newline--    /** Resets the array to its original configuration and return it. */--newline--    vector<int> reset() {--newline--        --newline--    }--newline--    --newline--    /** Returns a random shuffling of the array. */--newline--    vector<int> shuffle() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(nums);--newline-- * vector<int> param_1 = obj.reset();--newline-- * vector<int> param_2 = obj.shuffle();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline----newline--    public Solution(int[] nums) {--newline--        --newline--    }--newline--    --newline--    /** Resets the array to its original configuration and return it. */--newline--    public int[] reset() {--newline--        --newline--    }--newline--    --newline--    /** Returns a random shuffling of the array. */--newline--    public int[] shuffle() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(nums);--newline-- * int[] param_1 = obj.reset();--newline-- * int[] param_2 = obj.shuffle();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline----newline--    def __init__(self, nums):--newline--        '''--newline--        :type nums: List[int]--newline--        '''--newline--        --newline----newline--    def reset(self):--newline--        '''--newline--        Resets the array to its original configuration and return it.--newline--        :rtype: List[int]--newline--        '''--newline--        --newline----newline--    def shuffle(self):--newline--        '''--newline--        Returns a random shuffling of the array.--newline--        :rtype: List[int]--newline--        '''--newline--        --newline----newline----newline--# Your Solution object will be instantiated and called as such:--newline--# obj = Solution(nums)--newline--# param_1 = obj.reset()--newline--# param_2 = obj.shuffle()", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} Solution;--newline----newline--Solution* solutionCreate(int* nums, int size) {--newline--    --newline--}--newline----newline--/** Resets the array to its original configuration and return it. */--newline--int* solutionReset(Solution* obj, int *returnSize) {--newline--    --newline--}--newline----newline--/** Returns a random shuffling of the array. */--newline--int* solutionShuffle(Solution* obj, int *returnSize) {--newline--    --newline--}--newline----newline--void solutionFree(Solution* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your Solution struct will be instantiated and called as such:--newline-- * struct Solution* obj = solutionCreate(nums, size);--newline-- * int* param_1 = solutionReset(obj);--newline-- * int* param_2 = solutionShuffle(obj);--newline-- * solutionFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline----newline--    public Solution(int[] nums) {--newline--        --newline--    }--newline--    --newline--    /** Resets the array to its original configuration and return it. */--newline--    public int[] Reset() {--newline--        --newline--    }--newline--    --newline--    /** Returns a random shuffling of the array. */--newline--    public int[] Shuffle() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(nums);--newline-- * int[] param_1 = obj.Reset();--newline-- * int[] param_2 = obj.Shuffle();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} nums--newline-- */--newline--var Solution = function(nums) {--newline--    --newline--};--newline----newline--/**--newline-- * Resets the array to its original configuration and return it.--newline-- * @return {number[]}--newline-- */--newline--Solution.prototype.reset = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Returns a random shuffling of the array.--newline-- * @return {number[]}--newline-- */--newline--Solution.prototype.shuffle = function() {--newline--    --newline--};--newline----newline--/** --newline-- * Your Solution object will be instantiated and called as such:--newline-- * var obj = Object.create(Solution).createNew(nums)--newline-- * var param_1 = obj.reset()--newline-- * var param_2 = obj.shuffle()--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class Solution--newline----newline--=begin--newline--    :type nums: Integer[]--newline--=end--newline--    def initialize(nums)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Resets the array to its original configuration and return it.--newline--    :rtype: Integer[]--newline--=end--newline--    def reset()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Returns a random shuffling of the array.--newline--    :rtype: Integer[]--newline--=end--newline--    def shuffle()--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your Solution object will be instantiated and called as such:--newline--# obj = Solution.new(nums)--newline--# param_1 = obj.reset()--newline--# param_2 = obj.shuffle()", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type Solution struct {--newline--    --newline--}--newline----newline----newline--func Constructor(nums []int) Solution {--newline--    --newline--}--newline----newline----newline--/** Resets the array to its original configuration and return it. */--newline--func (this *Solution) Reset() []int {--newline--    --newline--}--newline----newline----newline--/** Returns a random shuffling of the array. */--newline--func (this *Solution) Shuffle() []int {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * obj := Constructor(nums);--newline-- * param_1 := obj.Reset();--newline-- * param_2 := obj.Shuffle();--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
