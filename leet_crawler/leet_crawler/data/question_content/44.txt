---CONTENT_BEGIN---
Implement wildcard pattern matching with support for '?' and '*'.


'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") â false
isMatch("aa","aa") â true
isMatch("aaa","aa") â false
isMatch("aa", "*") â true
isMatch("aa", "a*") â true
isMatch("ab", "?*") â true
isMatch("aab", "c*a*b") â false

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    bool isMatch(string s, string p) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public boolean isMatch(String s, String p) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def isMatch(self, s, p):--newline--        '''--newline--        :type s: str--newline--        :type p: str--newline--        :rtype: bool--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "bool isMatch(char* s, char* p) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public bool IsMatch(string s, string p) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {string} s--newline-- * @param {string} p--newline-- * @return {boolean}--newline-- */--newline--var isMatch = function(s, p) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {String} s--newline--# @param {String} p--newline--# @return {Boolean}--newline--def is_match(s, p)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func isMatch(_ s: String, _ p: String) -> Bool {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func isMatch(s string, p string) bool {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
