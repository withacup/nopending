---CONTENT_BEGIN---
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.


Example:
Given 1->2->3->4->5->NULL,
return 1->3->5->2->4->NULL.


Note:
The relative order inside both the even and odd groups should remain as it was in the input. 
The first node is considered odd, the second node even and so on ...


Credits:Special thanks to @DjangoUnchained for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * struct ListNode {--newline-- *     int val;--newline-- *     ListNode *next;--newline-- *     ListNode(int x) : val(x), next(NULL) {}--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline--    ListNode* oddEvenList(ListNode* head) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     int val;--newline-- *     ListNode next;--newline-- *     ListNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Solution {--newline--    public ListNode oddEvenList(ListNode head) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for singly-linked list.--newline--# class ListNode(object):--newline--#     def __init__(self, x):--newline--#         self.val = x--newline--#         self.next = None--newline----newline--class Solution(object):--newline--    def oddEvenList(self, head):--newline--        '''--newline--        :type head: ListNode--newline--        :rtype: ListNode--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * struct ListNode {--newline-- *     int val;--newline-- *     struct ListNode *next;--newline-- * };--newline-- */--newline--struct ListNode* oddEvenList(struct ListNode* head) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     public int val;--newline-- *     public ListNode next;--newline-- *     public ListNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Solution {--newline--    public ListNode OddEvenList(ListNode head) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * function ListNode(val) {--newline-- *     this.val = val;--newline-- *     this.next = null;--newline-- * }--newline-- */--newline--/**--newline-- * @param {ListNode} head--newline-- * @return {ListNode}--newline-- */--newline--var oddEvenList = function(head) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# Definition for singly-linked list.--newline--# class ListNode--newline--#     attr_accessor :val, :next--newline--#     def initialize(val)--newline--#         @val = val--newline--#         @next = nil--newline--#     end--newline--# end--newline----newline--# @param {ListNode} head--newline--# @return {ListNode}--newline--def odd_even_list(head)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     public var val: Int--newline-- *     public var next: ListNode?--newline-- *     public init(_ val: Int) {--newline-- *         self.val = val--newline-- *         self.next = nil--newline-- *     }--newline-- * }--newline-- */--newline--class Solution {--newline--    func oddEvenList(_ head: ListNode?) -> ListNode? {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * type ListNode struct {--newline-- *     Val int--newline-- *     Next *ListNode--newline-- * }--newline-- */--newline--func oddEvenList(head *ListNode) *ListNode {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
