---CONTENT_BEGIN---
Write a function that takes an unsigned integer and returns the number of â1' bits it has (also known as the Hamming weight).

For example, the 32-bit integer â11' has binary representation 00000000000000000000000000001011, so the function should return 3.

Credits:Special thanks to @ts for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    int hammingWeight(uint32_t n) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    // you need to treat n as an unsigned value--newline--    public int hammingWeight(int n) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def hammingWeight(self, n):--newline--        '''--newline--        :type n: int--newline--        :rtype: int--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "int hammingWeight(uint32_t n) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public int HammingWeight(uint n) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number} n - a positive integer--newline-- * @return {number}--newline-- */--newline--var hammingWeight = function(n) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer} n, a positive integer--newline--# @return {Integer}--newline--def hamming_weight(n)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}]
---SCRIPT_END---
