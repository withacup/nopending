---CONTENT_BEGIN---

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.



Return a deep copy of the list.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for singly-linked list with a random pointer.--newline-- * struct RandomListNode {--newline-- *     int label;--newline-- *     RandomListNode *next, *random;--newline-- *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline--    RandomListNode *copyRandomList(RandomListNode *head) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list with a random pointer.--newline-- * class RandomListNode {--newline-- *     int label;--newline-- *     RandomListNode next, random;--newline-- *     RandomListNode(int x) { this.label = x; }--newline-- * };--newline-- */--newline--public class Solution {--newline--    public RandomListNode copyRandomList(RandomListNode head) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for singly-linked list with a random pointer.--newline--# class RandomListNode(object):--newline--#     def __init__(self, x):--newline--#         self.label = x--newline--#         self.next = None--newline--#         self.random = None--newline----newline--class Solution(object):--newline--    def copyRandomList(self, head):--newline--        '''--newline--        :type head: RandomListNode--newline--        :rtype: RandomListNode--newline--        '''", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list with a random pointer.--newline-- * struct RandomListNode {--newline-- *     int label;--newline-- *     struct RandomListNode *next;--newline-- *     struct RandomListNode *random;--newline-- * };--newline-- */--newline--struct RandomListNode *copyRandomList(struct RandomListNode *head) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list with a random pointer.--newline-- * public class RandomListNode {--newline-- *     public int label;--newline-- *     public RandomListNode next, random;--newline-- *     public RandomListNode(int x) { this.label = x; }--newline-- * };--newline-- */--newline--public class Solution {--newline--    public RandomListNode CopyRandomList(RandomListNode head) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list with a random pointer.--newline-- * function RandomListNode(label) {--newline-- *     this.label = label;--newline-- *     this.next = this.random = null;--newline-- * }--newline-- */--newline----newline--/**--newline-- * @param {RandomListNode} head--newline-- * @return {RandomListNode}--newline-- */--newline--var copyRandomList = function(head) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}]
---SCRIPT_END---
