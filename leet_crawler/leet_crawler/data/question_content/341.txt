---CONTENT_BEGIN---
Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Given the list [[1,1],2,[1,1]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].



Example 2:
Given the list [1,[4,[6]]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * class NestedInteger {--newline-- *   public:--newline-- *     // Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     bool isInteger() const;--newline-- *--newline-- *     // Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     // The result is undefined if this NestedInteger holds a nested list--newline-- *     int getInteger() const;--newline-- *--newline-- *     // Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     // The result is undefined if this NestedInteger holds a single integer--newline-- *     const vector<NestedInteger> &getList() const;--newline-- * };--newline-- */--newline--class NestedIterator {--newline--public:--newline--    NestedIterator(vector<NestedInteger> &nestedList) {--newline--        --newline--    }--newline----newline--    int next() {--newline--        --newline--    }--newline----newline--    bool hasNext() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your NestedIterator object will be instantiated and called as such:--newline-- * NestedIterator i(nestedList);--newline-- * while (i.hasNext()) cout << i.next();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * public interface NestedInteger {--newline-- *--newline-- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     public boolean isInteger();--newline-- *--newline-- *     // @return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     // Return null if this NestedInteger holds a nested list--newline-- *     public Integer getInteger();--newline-- *--newline-- *     // @return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     // Return null if this NestedInteger holds a single integer--newline-- *     public List<NestedInteger> getList();--newline-- * }--newline-- */--newline--public class NestedIterator implements Iterator<Integer> {--newline----newline--    public NestedIterator(List<NestedInteger> nestedList) {--newline--        --newline--    }--newline----newline--    @Override--newline--    public Integer next() {--newline--        --newline--    }--newline----newline--    @Override--newline--    public boolean hasNext() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your NestedIterator object will be instantiated and called as such:--newline-- * NestedIterator i = new NestedIterator(nestedList);--newline-- * while (i.hasNext()) v[f()] = i.next();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "# '''--newline--# This is the interface that allows for creating nested lists.--newline--# You should not implement it, or speculate about its implementation--newline--# '''--newline--#class NestedInteger(object):--newline--#    def isInteger(self):--newline--#        '''--newline--#        @return True if this NestedInteger holds a single integer, rather than a nested list.--newline--#        :rtype bool--newline--#        '''--newline--#--newline--#    def getInteger(self):--newline--#        '''--newline--#        @return the single integer that this NestedInteger holds, if it holds a single integer--newline--#        Return None if this NestedInteger holds a nested list--newline--#        :rtype int--newline--#        '''--newline--#--newline--#    def getList(self):--newline--#        '''--newline--#        @return the nested list that this NestedInteger holds, if it holds a nested list--newline--#        Return None if this NestedInteger holds a single integer--newline--#        :rtype List[NestedInteger]--newline--#        '''--newline----newline--class NestedIterator(object):--newline----newline--    def __init__(self, nestedList):--newline--        '''--newline--        Initialize your data structure here.--newline--        :type nestedList: List[NestedInteger]--newline--        '''--newline--        --newline----newline--    def next(self):--newline--        '''--newline--        :rtype: int--newline--        '''--newline--        --newline----newline--    def hasNext(self):--newline--        '''--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline--# Your NestedIterator object will be instantiated and called as such:--newline--# i, v = NestedIterator(nestedList), []--newline--# while i.hasNext(): v.append(i.next())", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * *********************************************************************--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * *********************************************************************--newline-- *--newline-- * // Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- * bool NestedIntegerIsInteger(struct NestedInteger *);--newline-- *--newline-- * // Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- * // The result is undefined if this NestedInteger holds a nested list--newline-- * int NestedIntegerGetInteger(struct NestedInteger *);--newline-- *--newline-- * // Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- * // The result is undefined if this NestedInteger holds a single integer--newline-- * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);--newline-- *--newline-- * // Return the nested ' size that this NestedInteger holds, if it holds a nested list--newline-- * // The result is undefined if this NestedInteger holds a single integer--newline-- * int NestedIntegerGetListSize(struct NestedInteger *);--newline-- * };--newline-- */--newline--struct NestedIterator {--newline--    --newline--};--newline----newline--struct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {--newline--    --newline--}--newline----newline--bool nestedIterHasNext(struct NestedIterator *iter) {--newline--    --newline--}--newline----newline--int nestedIterNext(struct NestedIterator *iter) {--newline--    --newline--}--newline----newline--/** Deallocates memory previously allocated for the iterator */--newline--void nestedIterFree(struct NestedIterator *iter) {--newline--    --newline--}--newline----newline--/**--newline-- * Your NestedIterator will be called like this:--newline-- * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);--newline-- * while (nestedIterHasNext(i)) printf('%d\n', nestedIterNext(i));--newline-- * nestedIterFree(i);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * interface NestedInteger {--newline-- *--newline-- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     bool IsInteger();--newline-- *--newline-- *     // @return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     // Return null if this NestedInteger holds a nested list--newline-- *     int GetInteger();--newline-- *--newline-- *     // @return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     // Return null if this NestedInteger holds a single integer--newline-- *     IList<NestedInteger> GetList();--newline-- * }--newline-- */--newline--public class NestedIterator {--newline----newline--    public NestedIterator(IList<NestedInteger> nestedList) {--newline--        --newline--    }--newline----newline--    public bool HasNext() {--newline--        --newline--    }--newline----newline--    public int Next() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your NestedIterator will be called like this:--newline-- * NestedIterator i = new NestedIterator(nestedList);--newline-- * while (i.HasNext()) v[f()] = i.Next();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * // This is the interface that allows for creating nested lists.--newline-- * // You should not implement it, or speculate about its implementation--newline-- * function NestedInteger() {--newline-- *--newline-- *     Return true if this NestedInteger holds a single integer, rather than a nested list.--newline-- *     @return {boolean}--newline-- *     this.isInteger = function() {--newline-- *         ...--newline-- *     };--newline-- *--newline-- *     Return the single integer that this NestedInteger holds, if it holds a single integer--newline-- *     Return null if this NestedInteger holds a nested list--newline-- *     @return {integer}--newline-- *     this.getInteger = function() {--newline-- *         ...--newline-- *     };--newline-- *--newline-- *     Return the nested list that this NestedInteger holds, if it holds a nested list--newline-- *     Return null if this NestedInteger holds a single integer--newline-- *     @return {NestedInteger[]}--newline-- *     this.getList = function() {--newline-- *         ...--newline-- *     };--newline-- * };--newline-- */--newline--/**--newline-- * @constructor--newline-- * @param {NestedInteger[]} nestedList--newline-- */--newline--var NestedIterator = function(nestedList) {--newline--    --newline--};--newline----newline----newline--/**--newline-- * @this NestedIterator--newline-- * @returns {boolean}--newline-- */--newline--NestedIterator.prototype.hasNext = function() {--newline--    --newline--};--newline----newline--/**--newline-- * @this NestedIterator--newline-- * @returns {integer}--newline-- */--newline--NestedIterator.prototype.next = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Your NestedIterator will be called like this:--newline-- * var i = new NestedIterator(nestedList), a = [];--newline-- * while (i.hasNext()) a.push(i.next());--newline--*/", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# This is the interface that allows for creating nested lists.--newline--# You should not implement it, or speculate about its implementation--newline--#--newline--#class NestedInteger--newline--#    def is_integer()--newline--#        '''--newline--#        Return true if this NestedInteger holds a single integer, rather than a nested list.--newline--#        @return {Boolean}--newline--#        '''--newline--#--newline--#    def get_integer()--newline--#        '''--newline--#        Return the single integer that this NestedInteger holds, if it holds a single integer--newline--#        Return nil if this NestedInteger holds a nested list--newline--#        @return {Integer}--newline--#        '''--newline--#--newline--#    def get_list()--newline--#        '''--newline--#        Return the nested list that this NestedInteger holds, if it holds a nested list--newline--#        Return nil if this NestedInteger holds a single integer--newline--#        @return {NestedInteger[]}--newline--#        '''--newline----newline--class NestedIterator--newline--    # @param {NestedInteger[]} nested_list--newline--    def initialize(nested_list)--newline--        --newline--    end--newline----newline--    # @return {Boolean}--newline--    def has_next--newline--        --newline--    end--newline----newline--    # @return {Integer}--newline--    def next--newline--        --newline--    end--newline--end--newline----newline--# Your NestedIterator will be called like this:--newline--# i, v = NestedIterator.new(nested_list), []--newline--# while i.has_next()--newline--#    v << i.next--newline--# end", "value": "ruby", "text": "Ruby"}]
---SCRIPT_END---
