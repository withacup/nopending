---CONTENT_BEGIN---
Design a data structure that supports all following operations in average O(1) time.
Note: Duplicate elements are allowed.


insert(val): Inserts an item val to the collection.
remove(val): Removes an item val from the collection if present.
getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.



Example:

// Init an empty collection.
RandomizedCollection collection = new RandomizedCollection();

// Inserts 1 to the collection. Returns true as the collection did not contain 1.
collection.insert(1);

// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
collection.insert(1);

// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
collection.insert(2);

// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
collection.getRandom();

// Removes 1 from the collection, returns true. Collection now contains [1,2].
collection.remove(1);

// getRandom should return 1 and 2 both equally likely.
collection.getRandom();


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class RandomizedCollection {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    RandomizedCollection() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--    bool insert(int val) {--newline--        --newline--    }--newline--    --newline--    /** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--    bool remove(int val) {--newline--        --newline--    }--newline--    --newline--    /** Get a random element from the collection. */--newline--    int getRandom() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your RandomizedCollection object will be instantiated and called as such:--newline-- * RandomizedCollection obj = new RandomizedCollection();--newline-- * bool param_1 = obj.insert(val);--newline-- * bool param_2 = obj.remove(val);--newline-- * int param_3 = obj.getRandom();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class RandomizedCollection {--newline----newline--    /** Initialize your data structure here. */--newline--    public RandomizedCollection() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--    public boolean insert(int val) {--newline--        --newline--    }--newline--    --newline--    /** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--    public boolean remove(int val) {--newline--        --newline--    }--newline--    --newline--    /** Get a random element from the collection. */--newline--    public int getRandom() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your RandomizedCollection object will be instantiated and called as such:--newline-- * RandomizedCollection obj = new RandomizedCollection();--newline-- * boolean param_1 = obj.insert(val);--newline-- * boolean param_2 = obj.remove(val);--newline-- * int param_3 = obj.getRandom();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class RandomizedCollection(object):--newline----newline--    def __init__(self):--newline--        '''--newline--        Initialize your data structure here.--newline--        '''--newline--        --newline----newline--    def insert(self, val):--newline--        '''--newline--        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.--newline--        :type val: int--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline--    def remove(self, val):--newline--        '''--newline--        Removes a value from the collection. Returns true if the collection contained the specified element.--newline--        :type val: int--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline--    def getRandom(self):--newline--        '''--newline--        Get a random element from the collection.--newline--        :rtype: int--newline--        '''--newline--        --newline----newline----newline--# Your RandomizedCollection object will be instantiated and called as such:--newline--# obj = RandomizedCollection()--newline--# param_1 = obj.insert(val)--newline--# param_2 = obj.remove(val)--newline--# param_3 = obj.getRandom()", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} RandomizedCollection;--newline----newline--/** Initialize your data structure here. */--newline--RandomizedCollection* randomizedCollectionCreate() {--newline--    --newline--}--newline----newline--/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--bool randomizedCollectionInsert(RandomizedCollection* obj, int val) {--newline--    --newline--}--newline----newline--/** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--bool randomizedCollectionRemove(RandomizedCollection* obj, int val) {--newline--    --newline--}--newline----newline--/** Get a random element from the collection. */--newline--int randomizedCollectionGetRandom(RandomizedCollection* obj) {--newline--    --newline--}--newline----newline--void randomizedCollectionFree(RandomizedCollection* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your RandomizedCollection struct will be instantiated and called as such:--newline-- * struct RandomizedCollection* obj = randomizedCollectionCreate();--newline-- * bool param_1 = randomizedCollectionInsert(obj, val);--newline-- * bool param_2 = randomizedCollectionRemove(obj, val);--newline-- * int param_3 = randomizedCollectionGetRandom(obj);--newline-- * randomizedCollectionFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class RandomizedCollection {--newline----newline--    /** Initialize your data structure here. */--newline--    public RandomizedCollection() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--    public bool Insert(int val) {--newline--        --newline--    }--newline--    --newline--    /** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--    public bool Remove(int val) {--newline--        --newline--    }--newline--    --newline--    /** Get a random element from the collection. */--newline--    public int GetRandom() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your RandomizedCollection object will be instantiated and called as such:--newline-- * RandomizedCollection obj = new RandomizedCollection();--newline-- * bool param_1 = obj.Insert(val);--newline-- * bool param_2 = obj.Remove(val);--newline-- * int param_3 = obj.GetRandom();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Initialize your data structure here.--newline-- */--newline--var RandomizedCollection = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Inserts a value to the collection. Returns true if the collection did not already contain the specified element. --newline-- * @param {number} val--newline-- * @return {boolean}--newline-- */--newline--RandomizedCollection.prototype.insert = function(val) {--newline--    --newline--};--newline----newline--/**--newline-- * Removes a value from the collection. Returns true if the collection contained the specified element. --newline-- * @param {number} val--newline-- * @return {boolean}--newline-- */--newline--RandomizedCollection.prototype.remove = function(val) {--newline--    --newline--};--newline----newline--/**--newline-- * Get a random element from the collection.--newline-- * @return {number}--newline-- */--newline--RandomizedCollection.prototype.getRandom = function() {--newline--    --newline--};--newline----newline--/** --newline-- * Your RandomizedCollection object will be instantiated and called as such:--newline-- * var obj = Object.create(RandomizedCollection).createNew()--newline-- * var param_1 = obj.insert(val)--newline-- * var param_2 = obj.remove(val)--newline-- * var param_3 = obj.getRandom()--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class RandomizedCollection--newline----newline--=begin--newline--    Initialize your data structure here.--newline--=end--newline--    def initialize()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Inserts a value to the collection. Returns true if the collection did not already contain the specified element.--newline--    :type val: Integer--newline--    :rtype: Boolean--newline--=end--newline--    def insert(val)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Removes a value from the collection. Returns true if the collection contained the specified element.--newline--    :type val: Integer--newline--    :rtype: Boolean--newline--=end--newline--    def remove(val)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Get a random element from the collection.--newline--    :rtype: Integer--newline--=end--newline--    def get_random()--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your RandomizedCollection object will be instantiated and called as such:--newline--# obj = RandomizedCollection.new()--newline--# param_1 = obj.insert(val)--newline--# param_2 = obj.remove(val)--newline--# param_3 = obj.get_random()", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type RandomizedCollection struct {--newline--    --newline--}--newline----newline----newline--/** Initialize your data structure here. */--newline--func Constructor() RandomizedCollection {--newline--    --newline--}--newline----newline----newline--/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--func (this *RandomizedCollection) Insert(val int) bool {--newline--    --newline--}--newline----newline----newline--/** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--func (this *RandomizedCollection) Remove(val int) bool {--newline--    --newline--}--newline----newline----newline--/** Get a random element from the collection. */--newline--func (this *RandomizedCollection) GetRandom() int {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your RandomizedCollection object will be instantiated and called as such:--newline-- * obj := Constructor();--newline-- * param_1 := obj.Insert(val);--newline-- * param_2 := obj.Remove(val);--newline-- * param_3 := obj.GetRandom();--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
