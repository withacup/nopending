---CONTENT_BEGIN---

Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.



Example 1:

Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.




Example 2:

Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.



Note:

The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    bool checkSubarraySum(vector<int>& nums, int k) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public boolean checkSubarraySum(int[] nums, int k) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def checkSubarraySum(self, nums, k):--newline--        '''--newline--        :type nums: List[int]--newline--        :type k: int--newline--        :rtype: bool--newline--        '''", "value": "python", "text": "Python"}, {"defaultCode": "bool checkSubarraySum(int* nums, int numsSize, int k) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public bool CheckSubarraySum(int[] nums, int k) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} nums--newline-- * @param {number} k--newline-- * @return {boolean}--newline-- */--newline--var checkSubarraySum = function(nums, k) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer[]} nums--newline--# @param {Integer} k--newline--# @return {Boolean}--newline--def check_subarray_sum(nums, k)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func checkSubarraySum(_ nums: [Int], _ k: Int) -> Bool {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func checkSubarraySum(nums []int, k int) bool {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
