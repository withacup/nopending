---CONTENT_BEGIN---
Note: This is a companion problem to the System Design problem: Design TinyURL.

TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk.

Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline----newline--    // Encodes a URL to a shortened URL.--newline--    string encode(string longUrl) {--newline--        --newline--    }--newline----newline--    // Decodes a shortened URL to its original URL.--newline--    string decode(string shortUrl) {--newline--        --newline--    }--newline--};--newline----newline--// Your Solution object will be instantiated and called as such:--newline--// Solution solution;--newline--// solution.decode(solution.encode(url));", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Codec {--newline----newline--    // Encodes a URL to a shortened URL.--newline--    public String encode(String longUrl) {--newline--        --newline--    }--newline----newline--    // Decodes a shortened URL to its original URL.--newline--    public String decode(String shortUrl) {--newline--        --newline--    }--newline--}--newline----newline--// Your Codec object will be instantiated and called as such:--newline--// Codec codec = new Codec();--newline--// codec.decode(codec.encode(url));", "value": "java", "text": "Java"}, {"defaultCode": "class Codec:--newline----newline--    def encode(self, longUrl):--newline--        '''Encodes a URL to a shortened URL.--newline--        --newline--        :type longUrl: str--newline--        :rtype: str--newline--        '''--newline--        --newline----newline--    def decode(self, shortUrl):--newline--        '''Decodes a shortened URL to its original URL.--newline--        --newline--        :type shortUrl: str--newline--        :rtype: str--newline--        '''--newline--        --newline----newline--# Your Codec object will be instantiated and called as such:--newline--# codec = Codec()--newline--# codec.decode(codec.encode(url))", "value": "python", "text": "Python"}, {"defaultCode": "/** Encodes a URL to a shortened URL. */--newline--char* encode(char* longUrl) {--newline--    --newline--}--newline----newline--/** Decodes a shortened URL to its original URL. */--newline--char* decode(char* shortUrl) {--newline--    --newline--}--newline----newline--// Your functions will be called as such:--newline--// char* s = encode(s);--newline--// decode(s);", "value": "c", "text": "C"}, {"defaultCode": "public class Codec {--newline----newline--    // Encodes a URL to a shortened URL--newline--    public string encode(string longUrl) {--newline--        --newline--    }--newline----newline--    // Decodes a shortened URL to its original URL.--newline--    public string decode(string shortUrl) {--newline--        --newline--    }--newline--}--newline----newline--// Your Codec object will be instantiated and called as such:--newline--// Codec codec = new Codec();--newline--// codec.decode(codec.encode(url));", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Encodes a URL to a shortened URL.--newline-- *--newline-- * @param {string} longUrl--newline-- * @return {string}--newline-- */--newline--var encode = function(longUrl) {--newline--    --newline--};--newline----newline--/**--newline-- * Decodes a shortened URL to its original URL.--newline-- *--newline-- * @param {string} shortUrl--newline-- * @return {string}--newline-- */--newline--var decode = function(shortUrl) {--newline--    --newline--};--newline----newline--/**--newline-- * Your functions will be called as such:--newline-- * decode(encode(url));--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# Encodes a URL to a shortened URL.--newline--#--newline--# @param {string} longUrl--newline--# @return {string}--newline--def encode(longUrl)--newline--    --newline--end--newline----newline--# Decodes a shortened URL to its original URL.--newline--#--newline--# @param {string} shortUrl--newline--# @return {string}--newline--def decode(shortUrl)--newline--    --newline--end--newline----newline----newline--# Your functions will be called as such:--newline--# decode(encode(url))", "value": "ruby", "text": "Ruby"}]
---SCRIPT_END---
