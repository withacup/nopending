---CONTENT_BEGIN---

You are given two arrays (without duplicates) nums1 and nums2 where nums1âs elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2. 



The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.


Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.



Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.




Note:

All elements in nums1 and nums2 are unique.
The length of both nums1 and nums2 would not exceed 1000.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public int[] nextGreaterElement(int[] findNums, int[] nums) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def nextGreaterElement(self, findNums, nums):--newline--        '''--newline--        :type findNums: List[int]--newline--        :type nums: List[int]--newline--        :rtype: List[int]--newline--        '''", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Return an array of size *returnSize.--newline-- * Note: The returned array must be malloced, assume caller calls free().--newline-- */--newline--int* nextGreaterElement(int* findNums, int findNumsSize, int* nums, int numsSize, int* returnSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public int[] NextGreaterElement(int[] findNums, int[] nums) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} findNums--newline-- * @param {number[]} nums--newline-- * @return {number[]}--newline-- */--newline--var nextGreaterElement = function(findNums, nums) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer[]} find_nums--newline--# @param {Integer[]} nums--newline--# @return {Integer[]}--newline--def next_greater_element(find_nums, nums)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func nextGreaterElement(_ findNums: [Int], _ nums: [Int]) -> [Int] {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func nextGreaterElement(findNums []int, nums []int) []int {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
