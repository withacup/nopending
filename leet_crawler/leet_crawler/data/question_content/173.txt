---CONTENT_BEGIN---
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree. 

Credits:Special thanks to @ts for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for binary tree--newline-- * struct TreeNode {--newline-- *     int val;--newline-- *     TreeNode *left;--newline-- *     TreeNode *right;--newline-- *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}--newline-- * };--newline-- */--newline--class BSTIterator {--newline--public:--newline--    BSTIterator(TreeNode *root) {--newline--        --newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    bool hasNext() {--newline--        --newline--    }--newline----newline--    /** @return the next smallest number */--newline--    int next() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your BSTIterator will be called like this:--newline-- * BSTIterator i = BSTIterator(root);--newline-- * while (i.hasNext()) cout << i.next();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for binary tree--newline-- * public class TreeNode {--newline-- *     int val;--newline-- *     TreeNode left;--newline-- *     TreeNode right;--newline-- *     TreeNode(int x) { val = x; }--newline-- * }--newline-- */--newline----newline--public class BSTIterator {--newline----newline--    public BSTIterator(TreeNode root) {--newline--        --newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    public boolean hasNext() {--newline--        --newline--    }--newline----newline--    /** @return the next smallest number */--newline--    public int next() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your BSTIterator will be called like this:--newline-- * BSTIterator i = new BSTIterator(root);--newline-- * while (i.hasNext()) v[f()] = i.next();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for a  binary tree node--newline--# class TreeNode(object):--newline--#     def __init__(self, x):--newline--#         self.val = x--newline--#         self.left = None--newline--#         self.right = None--newline----newline--class BSTIterator(object):--newline--    def __init__(self, root):--newline--        '''--newline--        :type root: TreeNode--newline--        '''--newline--        --newline----newline--    def hasNext(self):--newline--        '''--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline--    def next(self):--newline--        '''--newline--        :rtype: int--newline--        '''--newline--        --newline----newline--# Your BSTIterator will be called like this:--newline--# i, v = BSTIterator(root), []--newline--# while i.hasNext(): v.append(i.next())", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for binary tree--newline-- * struct TreeNode {--newline-- *     int val;--newline-- *     struct TreeNode *left;--newline-- *     struct TreeNode *right;--newline-- * };--newline-- */--newline--struct BSTIterator {--newline--    --newline--};--newline----newline--struct BSTIterator *bstIteratorCreate(struct TreeNode *root) {--newline--    --newline--}--newline----newline--/** @return whether we have a next smallest number */--newline--bool bstIteratorHasNext(struct BSTIterator *iter) {--newline--    --newline--}--newline----newline--/** @return the next smallest number */--newline--int bstIteratorNext(struct BSTIterator *iter) {--newline--    --newline--}--newline----newline--/** Deallocates memory previously allocated for the iterator */--newline--void bstIteratorFree(struct BSTIterator *iter) {--newline--    --newline--}--newline----newline--/**--newline-- * Your BSTIterator will be called like this:--newline-- * struct BSTIterator *i = bstIteratorCreate(root);--newline-- * while (bstIteratorHasNext(i)) printf('%d\n', bstIteratorNext(i));--newline-- * bstIteratorFree(i);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for binary tree--newline-- * public class TreeNode {--newline-- *     public int val;--newline-- *     public TreeNode left;--newline-- *     public TreeNode right;--newline-- *     public TreeNode(int x) { val = x; }--newline-- * }--newline-- */--newline----newline--public class BSTIterator {--newline----newline--    public BSTIterator(TreeNode root) {--newline--        --newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    public bool HasNext() {--newline--        --newline--    }--newline----newline--    /** @return the next smallest number */--newline--    public int Next() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your BSTIterator will be called like this:--newline-- * BSTIterator i = new BSTIterator(root);--newline-- * while (i.HasNext()) v[f()] = i.Next();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Definition for binary tree--newline-- * function TreeNode(val) {--newline-- *     this.val = val;--newline-- *     this.left = this.right = null;--newline-- * }--newline-- */--newline----newline--/**--newline-- * @constructor--newline-- * @param {TreeNode} root - root of the binary search tree--newline-- */--newline--var BSTIterator = function(root) {--newline--    --newline--};--newline----newline----newline--/**--newline-- * @this BSTIterator--newline-- * @returns {boolean} - whether we have a next smallest number--newline-- */--newline--BSTIterator.prototype.hasNext = function() {--newline--    --newline--};--newline----newline--/**--newline-- * @this BSTIterator--newline-- * @returns {number} - the next smallest number--newline-- */--newline--BSTIterator.prototype.next = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Your BSTIterator will be called like this:--newline-- * var i = new BSTIterator(root), a = [];--newline-- * while (i.hasNext()) a.push(i.next());--newline--*/", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# Definition for a binary tree node.--newline--# class TreeNode--newline--#     attr_accessor :val, :left, :right--newline--#     def initialize(val)--newline--#         @val = val--newline--#         @left, @right = nil, nil--newline--#     end--newline--# end--newline----newline--class BSTIterator--newline--    # @param {TreeNode} root--newline--    def initialize(root)--newline--        --newline--    end--newline----newline--    # @return {Boolean}--newline--    def has_next--newline--        --newline--    end--newline----newline--    # @return {Integer}--newline--    def next--newline--        --newline--    end--newline--end--newline----newline--# Your BSTIterator will be called like this:--newline--# i, v = BSTIterator.new(root), []--newline--# while i.has_next()--newline--#    v << i.next--newline--# end", "value": "ruby", "text": "Ruby"}]
---SCRIPT_END---
