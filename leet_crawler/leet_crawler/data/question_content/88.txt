---CONTENT_BEGIN---
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.


Note:
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public void merge(int[] nums1, int m, int[] nums2, int n) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def merge(self, nums1, m, nums2, n):--newline--        '''--newline--        :type nums1: List[int]--newline--        :type m: int--newline--        :type nums2: List[int]--newline--        :type n: int--newline--        :rtype: void Do not return anything, modify nums1 in-place instead.--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "void merge(int* nums1, int m, int* nums2, int n) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public void Merge(int[] nums1, int m, int[] nums2, int n) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} nums1--newline-- * @param {number} m--newline-- * @param {number[]} nums2--newline-- * @param {number} n--newline-- * @return {void} Do not return anything, modify nums1 in-place instead.--newline-- */--newline--var merge = function(nums1, m, nums2, n) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer[]} nums1--newline--# @param {Integer} m--newline--# @param {Integer[]} nums2--newline--# @param {Integer} n--newline--# @return {Void} Do not return anything, modify nums1 in-place instead.--newline--def merge(nums1, m, nums2, n)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func merge(nums1 []int, m int, nums2 []int, n int)  {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
