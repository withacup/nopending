---CONTENT_BEGIN---
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.


Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].



Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].



This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * struct Interval {--newline-- *     int start;--newline-- *     int end;--newline-- *     Interval() : start(0), end(0) {}--newline-- *     Interval(int s, int e) : start(s), end(e) {}--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline--    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * public class Interval {--newline-- *     int start;--newline-- *     int end;--newline-- *     Interval() { start = 0; end = 0; }--newline-- *     Interval(int s, int e) { start = s; end = e; }--newline-- * }--newline-- */--newline--public class Solution {--newline--    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for an interval.--newline--# class Interval(object):--newline--#     def __init__(self, s=0, e=0):--newline--#         self.start = s--newline--#         self.end = e--newline----newline--class Solution(object):--newline--    def insert(self, intervals, newInterval):--newline--        '''--newline--        :type intervals: List[Interval]--newline--        :type newInterval: Interval--newline--        :rtype: List[Interval]--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * struct Interval {--newline-- *     int start;--newline-- *     int end;--newline-- * };--newline-- */--newline--/**--newline-- * Return an array of size *returnSize.--newline-- * Note: The returned array must be malloced, assume caller calls free().--newline-- */--newline--struct Interval* insert(struct Interval* intervals, int intervalsSize, struct Interval newInterval, int* returnSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * public class Interval {--newline-- *     public int start;--newline-- *     public int end;--newline-- *     public Interval() { start = 0; end = 0; }--newline-- *     public Interval(int s, int e) { start = s; end = e; }--newline-- * }--newline-- */--newline--public class Solution {--newline--    public IList<Interval> Insert(IList<Interval> intervals, Interval newInterval) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * function Interval(start, end) {--newline-- *     this.start = start;--newline-- *     this.end = end;--newline-- * }--newline-- */--newline--/**--newline-- * @param {Interval[]} intervals--newline-- * @param {Interval} newInterval--newline-- * @return {Interval[]}--newline-- */--newline--var insert = function(intervals, newInterval) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# Definition for an interval.--newline--# class Interval--newline--#     attr_accessor :start, :end--newline--#     def initialize(s=0, e=0)--newline--#         @start = s--newline--#         @end = e--newline--#     end--newline--# end--newline----newline--# @param {Interval[]} intervals--newline--# @param {Interval} new_interval--newline--# @return {Interval[]}--newline--def insert(intervals, new_interval)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * public class Interval {--newline-- *   public var start: Int--newline-- *   public var end: Int--newline-- *   public init(_ start: Int, _ end: Int) {--newline-- *     self.start = start--newline-- *     self.end = end--newline-- *   }--newline-- * }--newline-- */--newline--class Solution {--newline--    func insert(_ intervals: [Interval], _ newInterval: Interval) -> [Interval] {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "/**--newline-- * Definition for an interval.--newline-- * type Interval struct {--newline-- *--tab--   Start int--newline-- *--tab--   End   int--newline-- * }--newline-- */--newline--func insert(intervals []Interval, newInterval Interval) []Interval {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
