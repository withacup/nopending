---CONTENT_BEGIN---
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. 

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.


The encoded string should be as compact as possible.



Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for a binary tree node.--newline-- * struct TreeNode {--newline-- *     int val;--newline-- *     TreeNode *left;--newline-- *     TreeNode *right;--newline-- *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}--newline-- * };--newline-- */--newline--class Codec {--newline--public:--newline----newline--    // Encodes a tree to a single string.--newline--    string serialize(TreeNode* root) {--newline--        --newline--    }--newline----newline--    // Decodes your encoded data to tree.--newline--    TreeNode* deserialize(string data) {--newline--        --newline--    }--newline--};--newline----newline--// Your Codec object will be instantiated and called as such:--newline--// Codec codec;--newline--// codec.deserialize(codec.serialize(root));", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for a binary tree node.--newline-- * public class TreeNode {--newline-- *     int val;--newline-- *     TreeNode left;--newline-- *     TreeNode right;--newline-- *     TreeNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Codec {--newline----newline--    // Encodes a tree to a single string.--newline--    public String serialize(TreeNode root) {--newline--        --newline--    }--newline----newline--    // Decodes your encoded data to tree.--newline--    public TreeNode deserialize(String data) {--newline--        --newline--    }--newline--}--newline----newline--// Your Codec object will be instantiated and called as such:--newline--// Codec codec = new Codec();--newline--// codec.deserialize(codec.serialize(root));", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for a binary tree node.--newline--# class TreeNode(object):--newline--#     def __init__(self, x):--newline--#         self.val = x--newline--#         self.left = None--newline--#         self.right = None--newline----newline--class Codec:--newline----newline--    def serialize(self, root):--newline--        '''Encodes a tree to a single string.--newline--        --newline--        :type root: TreeNode--newline--        :rtype: str--newline--        '''--newline--        --newline----newline--    def deserialize(self, data):--newline--        '''Decodes your encoded data to tree.--newline--        --newline--        :type data: str--newline--        :rtype: TreeNode--newline--        '''--newline--        --newline----newline--# Your Codec object will be instantiated and called as such:--newline--# codec = Codec()--newline--# codec.deserialize(codec.serialize(root))", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for a binary tree node.--newline-- * struct TreeNode {--newline-- *     int val;--newline-- *     struct TreeNode *left;--newline-- *     struct TreeNode *right;--newline-- * };--newline-- */--newline--/** Encodes a tree to a single string. */--newline--char* serialize(struct TreeNode* root) {--newline--    --newline--}--newline----newline--/** Decodes your encoded data to tree. */--newline--struct TreeNode* deserialize(char* data) {--newline--    --newline--}--newline----newline--// Your functions will be called as such:--newline--// char* data = serialize(root);--newline--// deserialize(data);", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for a binary tree node.--newline-- * public class TreeNode {--newline-- *     public int val;--newline-- *     public TreeNode left;--newline-- *     public TreeNode right;--newline-- *     public TreeNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Codec {--newline----newline--    // Encodes a tree to a single string.--newline--    public string serialize(TreeNode root) {--newline--        --newline--    }--newline----newline--    // Decodes your encoded data to tree.--newline--    public TreeNode deserialize(string data) {--newline--        --newline--    }--newline--}--newline----newline--// Your Codec object will be instantiated and called as such:--newline--// Codec codec = new Codec();--newline--// codec.deserialize(codec.serialize(root));", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Definition for a binary tree node.--newline-- * function TreeNode(val) {--newline-- *     this.val = val;--newline-- *     this.left = this.right = null;--newline-- * }--newline-- */--newline----newline--/**--newline-- * Encodes a tree to a single string.--newline-- *--newline-- * @param {TreeNode} root--newline-- * @return {string}--newline-- */--newline--var serialize = function(root) {--newline--    --newline--};--newline----newline--/**--newline-- * Decodes your encoded data to tree.--newline-- *--newline-- * @param {string} data--newline-- * @return {TreeNode}--newline-- */--newline--var deserialize = function(data) {--newline--    --newline--};--newline----newline--/**--newline-- * Your functions will be called as such:--newline-- * deserialize(serialize(root));--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# Definition for a binary tree node.--newline--# class TreeNode--newline--#     attr_accessor :val, :left, :right--newline--#     def initialize(val)--newline--#         @val = val--newline--#         @left, @right = nil, nil--newline--#     end--newline--# end--newline----newline--# Encodes a tree to a single string.--newline--#--newline--# @param {TreeNode} root--newline--# @return {string}--newline--def serialize(root)--newline--    --newline--end--newline----newline--# Decodes your encoded data to tree.--newline--#--newline--# @param {string} data--newline--# @return {TreeNode}--newline--def deserialize(data)--newline--    --newline--end--newline----newline----newline--# Your functions will be called as such:--newline--# deserialize(serialize(data))", "value": "ruby", "text": "Ruby"}]
---SCRIPT_END---
