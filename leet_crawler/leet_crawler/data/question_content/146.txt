---CONTENT_BEGIN---

Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.



get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.


Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class LRUCache {--newline--public:--newline--    LRUCache(int capacity) {--newline--        --newline--    }--newline--    --newline--    int get(int key) {--newline--        --newline--    }--newline--    --newline--    void put(int key, int value) {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your LRUCache object will be instantiated and called as such:--newline-- * LRUCache obj = new LRUCache(capacity);--newline-- * int param_1 = obj.get(key);--newline-- * obj.put(key,value);--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class LRUCache {--newline----newline--    public LRUCache(int capacity) {--newline--        --newline--    }--newline--    --newline--    public int get(int key) {--newline--        --newline--    }--newline--    --newline--    public void put(int key, int value) {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your LRUCache object will be instantiated and called as such:--newline-- * LRUCache obj = new LRUCache(capacity);--newline-- * int param_1 = obj.get(key);--newline-- * obj.put(key,value);--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class LRUCache(object):--newline----newline--    def __init__(self, capacity):--newline--        '''--newline--        :type capacity: int--newline--        '''--newline--        --newline----newline--    def get(self, key):--newline--        '''--newline--        :type key: int--newline--        :rtype: int--newline--        '''--newline--        --newline----newline--    def put(self, key, value):--newline--        '''--newline--        :type key: int--newline--        :type value: int--newline--        :rtype: void--newline--        '''--newline--        --newline----newline----newline--# Your LRUCache object will be instantiated and called as such:--newline--# obj = LRUCache(capacity)--newline--# param_1 = obj.get(key)--newline--# obj.put(key,value)", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} LRUCache;--newline----newline--LRUCache* lRUCacheCreate(int capacity) {--newline--    --newline--}--newline----newline--int lRUCacheGet(LRUCache* obj, int key) {--newline--    --newline--}--newline----newline--void lRUCachePut(LRUCache* obj, int key, int value) {--newline--    --newline--}--newline----newline--void lRUCacheFree(LRUCache* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your LRUCache struct will be instantiated and called as such:--newline-- * struct LRUCache* obj = lRUCacheCreate(capacity);--newline-- * int param_1 = lRUCacheGet(obj, key);--newline-- * lRUCachePut(obj, key, value);--newline-- * lRUCacheFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class LRUCache {--newline----newline--    public LRUCache(int capacity) {--newline--        --newline--    }--newline--    --newline--    public int Get(int key) {--newline--        --newline--    }--newline--    --newline--    public void Put(int key, int value) {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your LRUCache object will be instantiated and called as such:--newline-- * LRUCache obj = new LRUCache(capacity);--newline-- * int param_1 = obj.Get(key);--newline-- * obj.Put(key,value);--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number} capacity--newline-- */--newline--var LRUCache = function(capacity) {--newline--    --newline--};--newline----newline--/** --newline-- * @param {number} key--newline-- * @return {number}--newline-- */--newline--LRUCache.prototype.get = function(key) {--newline--    --newline--};--newline----newline--/** --newline-- * @param {number} key --newline-- * @param {number} value--newline-- * @return {void}--newline-- */--newline--LRUCache.prototype.put = function(key, value) {--newline--    --newline--};--newline----newline--/** --newline-- * Your LRUCache object will be instantiated and called as such:--newline-- * var obj = Object.create(LRUCache).createNew(capacity)--newline-- * var param_1 = obj.get(key)--newline-- * obj.put(key,value)--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class LRUCache--newline----newline--=begin--newline--    :type capacity: Integer--newline--=end--newline--    def initialize(capacity)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    :type key: Integer--newline--    :rtype: Integer--newline--=end--newline--    def get(key)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    :type key: Integer--newline--    :type value: Integer--newline--    :rtype: Void--newline--=end--newline--    def put(key, value)--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your LRUCache object will be instantiated and called as such:--newline--# obj = LRUCache.new(capacity)--newline--# param_1 = obj.get(key)--newline--# obj.put(key,value)", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type LRUCache struct {--newline--    --newline--}--newline----newline----newline--func Constructor(capacity int) LRUCache {--newline--    --newline--}--newline----newline----newline--func (this *LRUCache) Get(key int) int {--newline--    --newline--}--newline----newline----newline--func (this *LRUCache) Put(key int, value int)  {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your LRUCache object will be instantiated and called as such:--newline-- * obj := Constructor(capacity);--newline-- * param_1 := obj.Get(key);--newline-- * obj.Put(key,value);--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
