---CONTENT_BEGIN---

    You are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west,
    x[2] metres to the south,
    x[3] metres to the east and so on. In other words, after each move your direction changes
    counter-clockwise.


    Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.



Example 1:

Given x = [2, 1, 1, 2],
âââââ
â   â
âââââ¼ââ>
    â

Return true (self crossing)




Example 2:

Given x = [1, 2, 3, 4],
ââââââââ
â      â
â
â
âââââââââââââ>

Return false (not self crossing)




Example 3:

Given x = [1, 1, 1, 1],
âââââ
â   â
âââââ¼>

Return true (self crossing)



Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    bool isSelfCrossing(vector<int>& x) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public boolean isSelfCrossing(int[] x) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def isSelfCrossing(self, x):--newline--        '''--newline--        :type x: List[int]--newline--        :rtype: bool--newline--        '''--newline--        ", "value": "python", "text": "Python"}, {"defaultCode": "bool isSelfCrossing(int* x, int xSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public bool IsSelfCrossing(int[] x) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} x--newline-- * @return {boolean}--newline-- */--newline--var isSelfCrossing = function(x) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer[]} x--newline--# @return {Boolean}--newline--def is_self_crossing(x)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func isSelfCrossing(_ x: [Int]) -> Bool {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func isSelfCrossing(x []int) bool {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
