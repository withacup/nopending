---CONTENT_BEGIN---
Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.

To make problem a bit easier, all A, B, C, D have same length of N where 0 &le; N &le; 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.

Example:

Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

Output:
2

Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def fourSumCount(self, A, B, C, D):--newline--        '''--newline--        :type A: List[int]--newline--        :type B: List[int]--newline--        :type C: List[int]--newline--        :type D: List[int]--newline--        :rtype: int--newline--        '''", "value": "python", "text": "Python"}, {"defaultCode": "int fourSumCount(int* A, int ASize, int* B, int BSize, int* C, int CSize, int* D, int DSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public int FourSumCount(int[] A, int[] B, int[] C, int[] D) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} A--newline-- * @param {number[]} B--newline-- * @param {number[]} C--newline-- * @param {number[]} D--newline-- * @return {number}--newline-- */--newline--var fourSumCount = function(A, B, C, D) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer[]} a--newline--# @param {Integer[]} b--newline--# @param {Integer[]} c--newline--# @param {Integer[]} d--newline--# @return {Integer}--newline--def four_sum_count(a, b, c, d)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func fourSumCount(_ A: [Int], _ B: [Int], _ C: [Int], _ D: [Int]) -> Int {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func fourSumCount(A []int, B []int, C []int, D []int) int {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
