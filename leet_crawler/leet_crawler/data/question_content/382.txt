---CONTENT_BEGIN---
Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Follow up:
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?


Example:

// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * struct ListNode {--newline-- *     int val;--newline-- *     ListNode *next;--newline-- *     ListNode(int x) : val(x), next(NULL) {}--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline--    /** @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node. */--newline--    Solution(ListNode* head) {--newline--        --newline--    }--newline--    --newline--    /** Returns a random ' value. */--newline--    int getRandom() {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(head);--newline-- * int param_1 = obj.getRandom();--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     int val;--newline-- *     ListNode next;--newline-- *     ListNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Solution {--newline----newline--    /** @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node. */--newline--    public Solution(ListNode head) {--newline--        --newline--    }--newline--    --newline--    /** Returns a random ' value. */--newline--    public int getRandom() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(head);--newline-- * int param_1 = obj.getRandom();--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "# Definition for singly-linked list.--newline--# class ListNode(object):--newline--#     def __init__(self, x):--newline--#         self.val = x--newline--#         self.next = None--newline----newline--class Solution(object):--newline----newline--    def __init__(self, head):--newline--        '''--newline--        @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node.--newline--        :type head: ListNode--newline--        '''--newline--        --newline----newline--    def getRandom(self):--newline--        '''--newline--        Returns a random ' value.--newline--        :rtype: int--newline--        '''--newline--        --newline----newline----newline--# Your Solution object will be instantiated and called as such:--newline--# obj = Solution(head)--newline--# param_1 = obj.getRandom()", "value": "python", "text": "Python"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * struct ListNode {--newline-- *     int val;--newline-- *     struct ListNode *next;--newline-- * };--newline-- */--newline--typedef struct {--newline--    --newline--} Solution;--newline----newline--/** @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node. */--newline--Solution* solutionCreate(struct ListNode* head) {--newline--    --newline--}--newline----newline--/** Returns a random ' value. */--newline--int solutionGetRandom(Solution* obj) {--newline--    --newline--}--newline----newline--void solutionFree(Solution* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your Solution struct will be instantiated and called as such:--newline-- * struct Solution* obj = solutionCreate(head);--newline-- * int param_1 = solutionGetRandom(obj);--newline-- * solutionFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * public class ListNode {--newline-- *     public int val;--newline-- *     public ListNode next;--newline-- *     public ListNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Solution {--newline----newline--    /** @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node. */--newline--    public Solution(ListNode head) {--newline--        --newline--    }--newline--    --newline--    /** Returns a random ' value. */--newline--    public int GetRandom() {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * Solution obj = new Solution(head);--newline-- * int param_1 = obj.GetRandom();--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * function ListNode(val) {--newline-- *     this.val = val;--newline-- *     this.next = null;--newline-- * }--newline-- */--newline--/**--newline-- * @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node.--newline-- * @param {ListNode} head--newline-- */--newline--var Solution = function(head) {--newline--    --newline--};--newline----newline--/**--newline-- * Returns a random ' value.--newline-- * @return {number}--newline-- */--newline--Solution.prototype.getRandom = function() {--newline--    --newline--};--newline----newline--/** --newline-- * Your Solution object will be instantiated and called as such:--newline-- * var obj = Object.create(Solution).createNew(head)--newline-- * var param_1 = obj.getRandom()--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# Definition for singly-linked list.--newline--# class ListNode--newline--#     attr_accessor :val, :next--newline--#     def initialize(val)--newline--#         @val = val--newline--#         @next = nil--newline--#     end--newline--# end--newline----newline--class Solution--newline----newline--=begin--newline--    @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node.--newline--    :type head: ListNode--newline--=end--newline--    def initialize(head)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Returns a random ' value.--newline--    :rtype: Integer--newline--=end--newline--    def get_random()--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your Solution object will be instantiated and called as such:--newline--# obj = Solution.new(head)--newline--# param_1 = obj.get_random()", "value": "ruby", "text": "Ruby"}, {"defaultCode": "/**--newline-- * Definition for singly-linked list.--newline-- * type ListNode struct {--newline-- *     Val int--newline-- *     Next *ListNode--newline-- * }--newline-- */--newline--type Solution struct {--newline--    --newline--}--newline----newline----newline--/** @param head The linked ' head.--newline--        Note that the head is guaranteed to be not null, so it contains at least one node. */--newline--func Constructor(head *ListNode) Solution {--newline--    --newline--}--newline----newline----newline--/** Returns a random ' value. */--newline--func (this *Solution) GetRandom() int {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your Solution object will be instantiated and called as such:--newline-- * obj := Constructor(head);--newline-- * param_1 := obj.GetRandom();--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
