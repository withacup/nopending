---CONTENT_BEGIN---

Implement a trie with insert, search, and startsWith methods.



Note:
You may assume that all inputs are consist of lowercase letters a-z.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Trie {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    Trie() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a word into the trie. */--newline--    void insert(string word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if the word is in the trie. */--newline--    bool search(string word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if there is any word in the trie that starts with the given prefix. */--newline--    bool startsWith(string prefix) {--newline--        --newline--    }--newline--};--newline----newline--/**--newline-- * Your Trie object will be instantiated and called as such:--newline-- * Trie obj = new Trie();--newline-- * obj.insert(word);--newline-- * bool param_2 = obj.search(word);--newline-- * bool param_3 = obj.startsWith(prefix);--newline-- */", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Trie {--newline----newline--    /** Initialize your data structure here. */--newline--    public Trie() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a word into the trie. */--newline--    public void insert(String word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if the word is in the trie. */--newline--    public boolean search(String word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if there is any word in the trie that starts with the given prefix. */--newline--    public boolean startsWith(String prefix) {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your Trie object will be instantiated and called as such:--newline-- * Trie obj = new Trie();--newline-- * obj.insert(word);--newline-- * boolean param_2 = obj.search(word);--newline-- * boolean param_3 = obj.startsWith(prefix);--newline-- */", "value": "java", "text": "Java"}, {"defaultCode": "class Trie(object):--newline----newline--    def __init__(self):--newline--        '''--newline--        Initialize your data structure here.--newline--        '''--newline--        --newline----newline--    def insert(self, word):--newline--        '''--newline--        Inserts a word into the trie.--newline--        :type word: str--newline--        :rtype: void--newline--        '''--newline--        --newline----newline--    def search(self, word):--newline--        '''--newline--        Returns if the word is in the trie.--newline--        :type word: str--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline--    def startsWith(self, prefix):--newline--        '''--newline--        Returns if there is any word in the trie that starts with the given prefix.--newline--        :type prefix: str--newline--        :rtype: bool--newline--        '''--newline--        --newline----newline----newline--# Your Trie object will be instantiated and called as such:--newline--# obj = Trie()--newline--# obj.insert(word)--newline--# param_2 = obj.search(word)--newline--# param_3 = obj.startsWith(prefix)", "value": "python", "text": "Python"}, {"defaultCode": "typedef struct {--newline--    --newline--} Trie;--newline----newline--/** Initialize your data structure here. */--newline--Trie* trieCreate() {--newline--    --newline--}--newline----newline--/** Inserts a word into the trie. */--newline--void trieInsert(Trie* obj, char* word) {--newline--    --newline--}--newline----newline--/** Returns if the word is in the trie. */--newline--bool trieSearch(Trie* obj, char* word) {--newline--    --newline--}--newline----newline--/** Returns if there is any word in the trie that starts with the given prefix. */--newline--bool trieStartsWith(Trie* obj, char* prefix) {--newline--    --newline--}--newline----newline--void trieFree(Trie* obj) {--newline--    --newline--}--newline----newline--/**--newline-- * Your Trie struct will be instantiated and called as such:--newline-- * struct Trie* obj = trieCreate();--newline-- * trieInsert(obj, word);--newline-- * bool param_2 = trieSearch(obj, word);--newline-- * bool param_3 = trieStartsWith(obj, prefix);--newline-- * trieFree(obj);--newline-- */", "value": "c", "text": "C"}, {"defaultCode": "public class Trie {--newline----newline--    /** Initialize your data structure here. */--newline--    public Trie() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a word into the trie. */--newline--    public void Insert(string word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if the word is in the trie. */--newline--    public bool Search(string word) {--newline--        --newline--    }--newline--    --newline--    /** Returns if there is any word in the trie that starts with the given prefix. */--newline--    public bool StartsWith(string prefix) {--newline--        --newline--    }--newline--}--newline----newline--/**--newline-- * Your Trie object will be instantiated and called as such:--newline-- * Trie obj = new Trie();--newline-- * obj.Insert(word);--newline-- * bool param_2 = obj.Search(word);--newline-- * bool param_3 = obj.StartsWith(prefix);--newline-- */", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * Initialize your data structure here.--newline-- */--newline--var Trie = function() {--newline--    --newline--};--newline----newline--/**--newline-- * Inserts a word into the trie. --newline-- * @param {string} word--newline-- * @return {void}--newline-- */--newline--Trie.prototype.insert = function(word) {--newline--    --newline--};--newline----newline--/**--newline-- * Returns if the word is in the trie. --newline-- * @param {string} word--newline-- * @return {boolean}--newline-- */--newline--Trie.prototype.search = function(word) {--newline--    --newline--};--newline----newline--/**--newline-- * Returns if there is any word in the trie that starts with the given prefix. --newline-- * @param {string} prefix--newline-- * @return {boolean}--newline-- */--newline--Trie.prototype.startsWith = function(prefix) {--newline--    --newline--};--newline----newline--/** --newline-- * Your Trie object will be instantiated and called as such:--newline-- * var obj = Object.create(Trie).createNew()--newline-- * obj.insert(word)--newline-- * var param_2 = obj.search(word)--newline-- * var param_3 = obj.startsWith(prefix)--newline-- */", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "class Trie--newline----newline--=begin--newline--    Initialize your data structure here.--newline--=end--newline--    def initialize()--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Inserts a word into the trie.--newline--    :type word: String--newline--    :rtype: Void--newline--=end--newline--    def insert(word)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Returns if the word is in the trie.--newline--    :type word: String--newline--    :rtype: Boolean--newline--=end--newline--    def search(word)--newline--        --newline--    end--newline----newline----newline--=begin--newline--    Returns if there is any word in the trie that starts with the given prefix.--newline--    :type prefix: String--newline--    :rtype: Boolean--newline--=end--newline--    def starts_with(prefix)--newline--        --newline--    end--newline----newline----newline--end--newline----newline--# Your Trie object will be instantiated and called as such:--newline--# obj = Trie.new()--newline--# obj.insert(word)--newline--# param_2 = obj.search(word)--newline--# param_3 = obj.starts_with(prefix)", "value": "ruby", "text": "Ruby"}, {"defaultCode": "type Trie struct {--newline--    --newline--}--newline----newline----newline--/** Initialize your data structure here. */--newline--func Constructor() Trie {--newline--    --newline--}--newline----newline----newline--/** Inserts a word into the trie. */--newline--func (this *Trie) Insert(word string)  {--newline--    --newline--}--newline----newline----newline--/** Returns if the word is in the trie. */--newline--func (this *Trie) Search(word string) bool {--newline--    --newline--}--newline----newline----newline--/** Returns if there is any word in the trie that starts with the given prefix. */--newline--func (this *Trie) StartsWith(prefix string) bool {--newline--    --newline--}--newline----newline----newline--/**--newline-- * Your Trie object will be instantiated and called as such:--newline-- * obj := Constructor();--newline-- * obj.Insert(word);--newline-- * param_2 := obj.Search(word);--newline-- * param_3 := obj.StartsWith(prefix);--newline-- */", "value": "golang", "text": "Go"}]
---SCRIPT_END---
