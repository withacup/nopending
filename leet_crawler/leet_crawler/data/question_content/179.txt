---CONTENT_BEGIN---
Given a list of non negative integers, arrange them such that they form the largest number.

For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.

Note: The result may be very large, so you need to return a string instead of an integer.

Credits:Special thanks to @ts for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    string largestNumber(vector<int>& nums) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public String largestNumber(int[] nums) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution:--newline--    # @param {integer[]} nums--newline--    # @return {string}--newline--    def largestNumber(self, nums):", "value": "python", "text": "Python"}, {"defaultCode": "char* largestNumber(int* nums, int numsSize) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public string LargestNumber(int[] nums) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {number[]} nums--newline-- * @return {string}--newline-- */--newline--var largestNumber = function(nums) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {Integer[]} nums--newline--# @return {String}--newline--def largest_number(nums)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "func largestNumber(nums []int) string {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
