---CONTENT_BEGIN---
Given an integer n, find the closest integer (not including itself), which is a palindrome. 

The 'closest' is defined as absolute difference minimized between two integers.

Example 1:

Input: "123"
Output: "121"



Note:

The input n is a positive integer represented by string, whose length will not exceed 18.
If there is a tie, return the smaller one as answer.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"defaultCode": "class Solution {--newline--public:--newline--    string nearestPalindromic(string n) {--newline--        --newline--    }--newline--};", "value": "cpp", "text": "C++"}, {"defaultCode": "public class Solution {--newline--    public String nearestPalindromic(String n) {--newline--        --newline--    }--newline--}", "value": "java", "text": "Java"}, {"defaultCode": "class Solution(object):--newline--    def nearestPalindromic(self, n):--newline--        '''--newline--        :type n: str--newline--        :rtype: str--newline--        '''", "value": "python", "text": "Python"}, {"defaultCode": "char* nearestPalindromic(char* n) {--newline--    --newline--}", "value": "c", "text": "C"}, {"defaultCode": "public class Solution {--newline--    public string NearestPalindromic(string n) {--newline--        --newline--    }--newline--}", "value": "csharp", "text": "C#"}, {"defaultCode": "/**--newline-- * @param {string} n--newline-- * @return {string}--newline-- */--newline--var nearestPalindromic = function(n) {--newline--    --newline--};", "value": "javascript", "text": "JavaScript"}, {"defaultCode": "# @param {String} n--newline--# @return {String}--newline--def nearest_palindromic(n)--newline--    --newline--end", "value": "ruby", "text": "Ruby"}, {"defaultCode": "class Solution {--newline--    func nearestPalindromic(_ n: String) -> String {--newline--        --newline--    }--newline--}", "value": "swift", "text": "Swift"}, {"defaultCode": "func nearestPalindromic(n string) string {--newline--    --newline--}", "value": "golang", "text": "Go"}]
---SCRIPT_END---
