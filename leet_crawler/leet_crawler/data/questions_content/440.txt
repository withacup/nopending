---CONTENT_BEGIN---
Given integers n and k, find the lexicographically k-th smallest integer in the range from 1 to n.

Note: 1 &le; k &le; n &le; 109.

Example:

Input:
n: 13   k: 2

Output:
10

Explanation:
The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int findKthNumber(int n, int k) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int findKthNumber(int n, int k) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findKthNumber(self, n, k):         '''         :type n: int         :type k: int         :rtype: int         '''", "text": "Python"}, {"value": "c", "defaultCode": "int findKthNumber(int n, int k) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int FindKthNumber(int n, int k) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n  * @param {number} k  * @return {number}  */ var findKthNumber = function(n, k) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n # @param {Integer} k # @return {Integer} def find_kth_number(n, k)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findKthNumber(_ n: Int, _ k: Int) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findKthNumber(n int, k int) int {      }", "text": "Go"}]
---SCRIPT_END---
