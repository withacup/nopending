---CONTENT_BEGIN---
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.


For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]



The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).



Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int minimumTotal(vector<vector<int>>& triangle) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int minimumTotal(List<List<Integer>> triangle) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def minimumTotal(self, triangle):         '''         :type triangle: List[List[int]]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int minimumTotal(int** triangle, int triangleRowSize, int *triangleColSizes) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MinimumTotal(IList<IList<int>> triangle) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[][]} triangle  * @return {number}  */ var minimumTotal = function(triangle) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[][]} triangle # @return {Integer} def minimum_total(triangle)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func minimumTotal(_ triangle: [[Int]]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func minimumTotal(triangle [][]int) int {      }", "text": "Go"}]
---SCRIPT_END---
