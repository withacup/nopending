---CONTENT_BEGIN---

Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.



Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.


Example:

int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);

// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);

// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     Solution(vector<int> nums) {              }          int pick(int target) {              } };  /**  * Your Solution object will be instantiated and called as such:  * Solution obj = new Solution(nums);  * int param_1 = obj.pick(target);  */", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {      public Solution(int[] nums) {              }          public int pick(int target) {              } }  /**  * Your Solution object will be instantiated and called as such:  * Solution obj = new Solution(nums);  * int param_1 = obj.pick(target);  */", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):      def __init__(self, nums):         '''                  :type nums: List[int]         :type numsSize: int         '''               def pick(self, target):         '''         :type target: int         :rtype: int         '''            # Your Solution object will be instantiated and called as such: # obj = Solution(nums) # param_1 = obj.pick(target)", "text": "Python"}, {"value": "c", "defaultCode": "typedef struct {      } Solution;  Solution* solutionCreate(int* nums, int numsSize) {      }  int solutionPick(Solution* obj, int target) {      }  void solutionFree(Solution* obj) {      }  /**  * Your Solution struct will be instantiated and called as such:  * struct Solution* obj = solutionCreate(nums, numsSize);  * int param_1 = solutionPick(obj, target);  * solutionFree(obj);  */", "text": "C"}, {"value": "golang", "defaultCode": "type Solution struct {      }   func Constructor(nums []int) Solution {      }   func (this *Solution) Pick(target int) int {      }   /**  * Your Solution object will be instantiated and called as such:  * obj := Constructor(nums);  * param_1 := obj.Pick(target);  */", "text": "Go"}]
---SCRIPT_END---
