---CONTENT_BEGIN---
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.


Note:
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public void merge(int[] nums1, int m, int[] nums2, int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def merge(self, nums1, m, nums2, n):         '''         :type nums1: List[int]         :type m: int         :type nums2: List[int]         :type n: int         :rtype: void Do not return anything, modify nums1 in-place instead.         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "void merge(int* nums1, int m, int* nums2, int n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public void Merge(int[] nums1, int m, int[] nums2, int n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums1  * @param {number} m  * @param {number[]} nums2  * @param {number} n  * @return {void} Do not return anything, modify nums1 in-place instead.  */ var merge = function(nums1, m, nums2, n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums1 # @param {Integer} m # @param {Integer[]} nums2 # @param {Integer} n # @return {Void} Do not return anything, modify nums1 in-place instead. def merge(nums1, m, nums2, n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func merge(nums1 []int, m int, nums2 []int, n int)  {      }", "text": "Go"}]
---SCRIPT_END---
