---CONTENT_BEGIN---

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.


push(x) -- Push element x onto stack.


pop() -- Removes the element on top of the stack.


top() -- Get the top element.


getMin() -- Retrieve the minimum element in the stack.




Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class MinStack { public:     /** initialize your data structure here. */     MinStack() {              }          void push(int x) {              }          void pop() {              }          int top() {              }          int getMin() {              } };  /**  * Your MinStack object will be instantiated and called as such:  * MinStack obj = new MinStack();  * obj.push(x);  * obj.pop();  * int param_3 = obj.top();  * int param_4 = obj.getMin();  */"}, {"text": "Java", "value": "java", "defaultCode": "public class MinStack {      /** initialize your data structure here. */     public MinStack() {              }          public void push(int x) {              }          public void pop() {              }          public int top() {              }          public int getMin() {              } }  /**  * Your MinStack object will be instantiated and called as such:  * MinStack obj = new MinStack();  * obj.push(x);  * obj.pop();  * int param_3 = obj.top();  * int param_4 = obj.getMin();  */"}, {"text": "Python", "value": "python", "defaultCode": "class MinStack(object):      def __init__(self):         '''         initialize your data structure here.         '''               def push(self, x):         '''         :type x: int         :rtype: void         '''               def pop(self):         '''         :rtype: void         '''               def top(self):         '''         :rtype: int         '''               def getMin(self):         '''         :rtype: int         '''            # Your MinStack object will be instantiated and called as such: # obj = MinStack() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.getMin()"}, {"text": "C", "value": "c", "defaultCode": "typedef struct {      } MinStack;  /** initialize your data structure here. */ MinStack* minStackCreate(int maxSize) {      }  void minStackPush(MinStack* obj, int x) {      }  void minStackPop(MinStack* obj) {      }  int minStackTop(MinStack* obj) {      }  int minStackGetMin(MinStack* obj) {      }  void minStackFree(MinStack* obj) {      }  /**  * Your MinStack struct will be instantiated and called as such:  * struct MinStack* obj = minStackCreate(maxSize);  * minStackPush(obj, x);  * minStackPop(obj);  * int param_3 = minStackTop(obj);  * int param_4 = minStackGetMin(obj);  * minStackFree(obj);  */"}, {"text": "C#", "value": "csharp", "defaultCode": "public class MinStack {      /** initialize your data structure here. */     public MinStack() {              }          public void Push(int x) {              }          public void Pop() {              }          public int Top() {              }          public int GetMin() {              } }  /**  * Your MinStack object will be instantiated and called as such:  * MinStack obj = new MinStack();  * obj.Push(x);  * obj.Pop();  * int param_3 = obj.Top();  * int param_4 = obj.GetMin();  */"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * initialize your data structure here.  */ var MinStack = function() {      };  /**   * @param {number} x  * @return {void}  */ MinStack.prototype.push = function(x) {      };  /**  * @return {void}  */ MinStack.prototype.pop = function() {      };  /**  * @return {number}  */ MinStack.prototype.top = function() {      };  /**  * @return {number}  */ MinStack.prototype.getMin = function() {      };  /**   * Your MinStack object will be instantiated and called as such:  * var obj = Object.create(MinStack).createNew()  * obj.push(x)  * obj.pop()  * var param_3 = obj.top()  * var param_4 = obj.getMin()  */"}, {"text": "Ruby", "value": "ruby", "defaultCode": "class MinStack  =begin     initialize your data structure here. =end     def initialize()              end   =begin     :type x: Integer     :rtype: Void =end     def push(x)              end   =begin     :rtype: Void =end     def pop()              end   =begin     :rtype: Integer =end     def top()              end   =begin     :rtype: Integer =end     def get_min()              end   end  # Your MinStack object will be instantiated and called as such: # obj = MinStack.new() # obj.push(x) # obj.pop() # param_3 = obj.top() # param_4 = obj.get_min()"}, {"text": "Go", "value": "golang", "defaultCode": "type MinStack struct {      }   /** initialize your data structure here. */ func Constructor() MinStack {      }   func (this *MinStack) Push(x int)  {      }   func (this *MinStack) Pop()  {      }   func (this *MinStack) Top() int {      }   func (this *MinStack) GetMin() int {      }   /**  * Your MinStack object will be instantiated and called as such:  * obj := Constructor();  * obj.Push(x);  * obj.Pop();  * param_3 := obj.Top();  * param_4 := obj.GetMin();  */"}]
---SCRIPT_END---
