---CONTENT_BEGIN---

Divide two integers without using multiplication, division and mod operator.


If it is overflow, return MAX_INT.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int divide(int dividend, int divisor) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int divide(int dividend, int divisor) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def divide(self, dividend, divisor):         '''         :type dividend: int         :type divisor: int         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int divide(int dividend, int divisor) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int Divide(int dividend, int divisor) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} dividend  * @param {number} divisor  * @return {number}  */ var divide = function(dividend, divisor) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} dividend # @param {Integer} divisor # @return {Integer} def divide(dividend, divisor)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func divide(_ dividend: Int, _ divisor: Int) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func divide(dividend int, divisor int) int {      }", "text": "Go"}]
---SCRIPT_END---
