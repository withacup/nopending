---CONTENT_BEGIN---
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?


For example,
Given n = 3, there are a total of 5 unique BST's.


   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int numTrees(int n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int numTrees(int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def numTrees(self, n):         '''         :type n: int         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int numTrees(int n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int NumTrees(int n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {number}  */ var numTrees = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n # @return {Integer} def num_trees(n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func numTrees(_ n: Int) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func numTrees(n int) int {      }", "text": "Go"}]
---SCRIPT_END---
