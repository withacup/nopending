---CONTENT_BEGIN---

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.


For example,
If n = 4 and k = 2, a solution is:



[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> combine(int n, int k) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> combine(int n, int k) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def combine(self, n, k):         '''         :type n: int         :type k: int         :rtype: List[List[int]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** combine(int n, int k, int** columnSizes, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> Combine(int n, int k) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n  * @param {number} k  * @return {number[][]}  */ var combine = function(n, k) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n # @param {Integer} k # @return {Integer[][]} def combine(n, k)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func combine(_ n: Int, _ k: Int) -> [[Int]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func combine(n int, k int) [][]int {      }", "text": "Go"}]
---SCRIPT_END---
