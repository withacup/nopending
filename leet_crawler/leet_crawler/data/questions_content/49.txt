---CONTENT_BEGIN---
Given an array of strings, group anagrams together.


For example, given: ["eat", "tea", "tan", "ate", "nat", "bat"], 
Return:

[
  ["ate", "eat","tea"],
  ["nat","tan"],
  ["bat"]
]

Note: All inputs will be in lower-case.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<vector<string>> groupAnagrams(vector<string>& strs) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<List<String>> groupAnagrams(String[] strs) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def groupAnagrams(self, strs):         '''         :type strs: List[str]         :rtype: List[List[str]]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ char*** groupAnagrams(char** strs, int strsSize, int** columnSizes, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<IList<string>> GroupAnagrams(string[] strs) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string[]} strs  * @return {string[][]}  */ var groupAnagrams = function(strs) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String[]} strs # @return {String[][]} def group_anagrams(strs)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func groupAnagrams(_ strs: [String]) -> [[String]] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func groupAnagrams(strs []string) [][]string {      }"}]
---SCRIPT_END---
