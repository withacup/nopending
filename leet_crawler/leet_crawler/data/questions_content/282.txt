---CONTENT_BEGIN---

Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.


Examples: 
"123", 6 -> ["1+2+3", "1*2*3"] 
"232", 8 -> ["2*3+2", "2+3*2"]
"105", 5 -> ["1*0+5","10-5"]
"00", 0 -> ["0+0", "0-0", "0*0"]
"3456237490", 9191 -> []


Credits:Special thanks to @davidtan1890 for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<string> addOperators(string num, int target) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<String> addOperators(String num, int target) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def addOperators(self, num, target):         '''         :type num: str         :type target: int         :rtype: List[str]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** addOperators(char* num, int target, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<string> AddOperators(string num, int target) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} num  * @param {number} target  * @return {string[]}  */ var addOperators = function(num, target) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} num # @param {Integer} target # @return {String[]} def add_operators(num, target)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func addOperators(_ num: String, _ target: Int) -> [String] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func addOperators(num string, target int) []string {      }"}]
---SCRIPT_END---
