---CONTENT_BEGIN---

Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.


Below is one possible representation of s1 = "great":


    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t


To scramble the string, we may choose any non-leaf node and swap its two children.


For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".


    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t


We say that "rgeat" is a scrambled string of "great".


Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".


    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a


We say that "rgtae" is a scrambled string of "great".


Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool isScramble(string s1, string s2) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean isScramble(String s1, String s2) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def isScramble(self, s1, s2):         '''         :type s1: str         :type s2: str         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool isScramble(char* s1, char* s2) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool IsScramble(string s1, string s2) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s1  * @param {string} s2  * @return {boolean}  */ var isScramble = function(s1, s2) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s1 # @param {String} s2 # @return {Boolean} def is_scramble(s1, s2)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func isScramble(_ s1: String, _ s2: String) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func isScramble(s1 string, s2 string) bool {      }", "text": "Go"}]
---SCRIPT_END---
