---CONTENT_BEGIN---

Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings. 


You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.



Example 1:

Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".



Example 2:

Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).




Note:

The length of both lists will be in the range of [1, 1000].
The length of strings in both lists will be in the range of [1, 30].
The index is starting from 0 to the list length minus 1.
No duplicates in both lists.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public String[] findRestaurant(String[] list1, String[] list2) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def findRestaurant(self, list1, list2):         '''         :type list1: List[str]         :type list2: List[str]         :rtype: List[str]         '''"}, {"text": "Python3", "value": "python3", "defaultCode": "class Solution:     def findRestaurant(self, list1, list2):         '''         :type list1: List[str]         :type list2: List[str]         :rtype: List[str]         '''"}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** findRestaurant(char** list1, int list1Size, char** list2, int list2Size, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public string[] FindRestaurant(string[] list1, string[] list2) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string[]} list1  * @param {string[]} list2  * @return {string[]}  */ var findRestaurant = function(list1, list2) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String[]} list1 # @param {String[]} list2 # @return {String[]} def find_restaurant(list1, list2)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func findRestaurant(_ list1: [String], _ list2: [String]) -> [String] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func findRestaurant(list1 []string, list2 []string) []string {      }"}]
---SCRIPT_END---
