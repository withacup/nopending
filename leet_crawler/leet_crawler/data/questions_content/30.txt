---CONTENT_BEGIN---

You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.



For example, given:
s: "barfoothefoobarman"
words: ["foo", "bar"]



You should return the indices: [0,9].
(order does not matter).

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<int> findSubstring(string s, vector<string>& words) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<Integer> findSubstring(String s, String[] words) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findSubstring(self, s, words):         '''         :type s: str         :type words: List[str]         :rtype: List[int]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<int> FindSubstring(string s, string[] words) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s  * @param {string[]} words  * @return {number[]}  */ var findSubstring = function(s, words) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s # @param {String[]} words # @return {Integer[]} def find_substring(s, words)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findSubstring(_ s: String, _ words: [String]) -> [Int] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findSubstring(s string, words []string) []int {      }", "text": "Go"}]
---SCRIPT_END---
