---CONTENT_BEGIN---

Given a string s, partition s such that every substring of the partition is a palindrome.


Return all possible palindrome partitioning of s.


For example, given s = "aab",

Return

[
  ["aa","b"],
  ["a","a","b"]
]


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<string>> partition(string s) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<List<String>> partition(String s) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def partition(self, s):         '''         :type s: str         :rtype: List[List[str]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ char*** partition(char* s, int** columnSizes, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<IList<string>> Partition(string s) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {string[][]}  */ var partition = function(s) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s # @return {String[][]} def partition(s)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func partition(_ s: String) -> [[String]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func partition(s string) [][]string {      }", "text": "Go"}]
---SCRIPT_END---
