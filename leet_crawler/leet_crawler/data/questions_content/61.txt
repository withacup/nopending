---CONTENT_BEGIN---
Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     ListNode *next;  *     ListNode(int x) : val(x), next(NULL) {}  * };  */ class Solution { public:     ListNode* rotateRight(ListNode* head, int k) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     int val;  *     ListNode next;  *     ListNode(int x) { val = x; }  * }  */ public class Solution {     public ListNode rotateRight(ListNode head, int k) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# Definition for singly-linked list. # class ListNode(object): #     def __init__(self, x): #         self.val = x #         self.next = None  class Solution(object):     def rotateRight(self, head, k):         '''         :type head: ListNode         :type k: int         :rtype: ListNode         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     struct ListNode *next;  * };  */ struct ListNode* rotateRight(struct ListNode* head, int k) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     public int val;  *     public ListNode next;  *     public ListNode(int x) { val = x; }  * }  */ public class Solution {     public ListNode RotateRight(ListNode head, int k) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Definition for singly-linked list.  * function ListNode(val) {  *     this.val = val;  *     this.next = null;  * }  */ /**  * @param {ListNode} head  * @param {number} k  * @return {ListNode}  */ var rotateRight = function(head, k) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# Definition for singly-linked list. # class ListNode #     attr_accessor :val, :next #     def initialize(val) #         @val = val #         @next = nil #     end # end  # @param {ListNode} head # @param {Integer} k # @return {ListNode} def rotate_right(head, k)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     public var val: Int  *     public var next: ListNode?  *     public init(_ val: Int) {  *         self.val = val  *         self.next = nil  *     }  * }  */ class Solution {     func rotateRight(_ head: ListNode?, _ k: Int) -> ListNode? {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "/**  * Definition for singly-linked list.  * type ListNode struct {  *     Val int  *     Next *ListNode  * }  */ func rotateRight(head *ListNode, k int) *ListNode {      }", "text": "Go"}]
---SCRIPT_END---
