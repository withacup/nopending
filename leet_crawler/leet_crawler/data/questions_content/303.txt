---CONTENT_BEGIN---
Given an integer array nums, find the sum of the elements between indices i and j (i &le; j), inclusive.

Example:

Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3



Note:

You may assume that the array does not change.
There are many calls to sumRange function.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class NumArray { public:     NumArray(vector<int> nums) {              }          int sumRange(int i, int j) {              } };  /**  * Your NumArray object will be instantiated and called as such:  * NumArray obj = new NumArray(nums);  * int param_1 = obj.sumRange(i,j);  */", "text": "C++"}, {"value": "java", "defaultCode": "public class NumArray {      public NumArray(int[] nums) {              }          public int sumRange(int i, int j) {              } }  /**  * Your NumArray object will be instantiated and called as such:  * NumArray obj = new NumArray(nums);  * int param_1 = obj.sumRange(i,j);  */", "text": "Java"}, {"value": "python", "defaultCode": "class NumArray(object):      def __init__(self, nums):         '''         :type nums: List[int]         '''               def sumRange(self, i, j):         '''         :type i: int         :type j: int         :rtype: int         '''            # Your NumArray object will be instantiated and called as such: # obj = NumArray(nums) # param_1 = obj.sumRange(i,j)", "text": "Python"}, {"value": "c", "defaultCode": "typedef struct {      } NumArray;  NumArray* numArrayCreate(int* nums, int numsSize) {      }  int numArraySumRange(NumArray* obj, int i, int j) {      }  void numArrayFree(NumArray* obj) {      }  /**  * Your NumArray struct will be instantiated and called as such:  * struct NumArray* obj = numArrayCreate(nums, numsSize);  * int param_1 = numArraySumRange(obj, i, j);  * numArrayFree(obj);  */", "text": "C"}, {"value": "csharp", "defaultCode": "public class NumArray {      public NumArray(int[] nums) {              }          public int SumRange(int i, int j) {              } }  /**  * Your NumArray object will be instantiated and called as such:  * NumArray obj = new NumArray(nums);  * int param_1 = obj.SumRange(i,j);  */", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  */ var NumArray = function(nums) {      };  /**   * @param {number} i   * @param {number} j  * @return {number}  */ NumArray.prototype.sumRange = function(i, j) {      };  /**   * Your NumArray object will be instantiated and called as such:  * var obj = Object.create(NumArray).createNew(nums)  * var param_1 = obj.sumRange(i,j)  */", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "class NumArray  =begin     :type nums: Integer[] =end     def initialize(nums)              end   =begin     :type i: Integer     :type j: Integer     :rtype: Integer =end     def sum_range(i, j)              end   end  # Your NumArray object will be instantiated and called as such: # obj = NumArray.new(nums) # param_1 = obj.sum_range(i,j)", "text": "Ruby"}, {"value": "golang", "defaultCode": "type NumArray struct {      }   func Constructor(nums []int) NumArray {      }   func (this *NumArray) SumRange(i int, j int) int {      }   /**  * Your NumArray object will be instantiated and called as such:  * obj := Constructor(nums);  * param_1 := obj.SumRange(i,j);  */", "text": "Go"}]
---SCRIPT_END---
