---CONTENT_BEGIN---
Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.


Example 1:
nums = [1, 3], n = 6
Return 1.

Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.

Example 2:
nums = [1, 5, 10], n = 20
Return 2.
The two patches can be [2, 4].

Example 3:
nums = [1, 2, 2], n = 5
Return 0.

Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int minPatches(vector<int>& nums, int n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int minPatches(int[] nums, int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def minPatches(self, nums, n):         '''         :type nums: List[int]         :type n: int         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int minPatches(int* nums, int numsSize, int n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MinPatches(int[] nums, int n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @param {number} n  * @return {number}  */ var minPatches = function(nums, n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @param {Integer} n # @return {Integer} def min_patches(nums, n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func minPatches(_ nums: [Int], _ n: Int) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func minPatches(nums []int, n int) int {      }", "text": "Go"}]
---SCRIPT_END---
