---CONTENT_BEGIN---

For a web developer, it is very important to know how to design a web page's size. So, given a specific rectangular web pageâs area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:
1. The area of the rectangular web page you designed must equal to the given target area.
2. The width W should not be larger than the length L, which means L >= W.
3. The difference between length L and width W should be as small as possible.

You need to output the length L and the width W of the web page you designed in sequence.



Example:

Input: 4
Output: [2, 2]
Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. 
But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.



Note:

The given area won't exceed 10,000,000 and is a positive integer
The web page's width and length you designed must be positive integers.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<int> constructRectangle(int area) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int[] constructRectangle(int area) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def constructRectangle(self, area):         '''         :type area: int         :rtype: List[int]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* constructRectangle(int area, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int[] ConstructRectangle(int area) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} area  * @return {number[]}  */ var constructRectangle = function(area) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} area # @return {Integer[]} def construct_rectangle(area)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func constructRectangle(_ area: Int) -> [Int] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func constructRectangle(area int) []int {      }"}]
---SCRIPT_END---
