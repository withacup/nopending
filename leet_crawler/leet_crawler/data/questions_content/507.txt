---CONTENT_BEGIN---
We define the Perfect Number is a positive integer that is equal to the sum of all its positive divisors except itself. 

Now, given an integer n, write a function that returns true when it is a perfect number and false when it is not.


Example:

Input: 28
Output: True
Explanation: 28 = 1 + 2 + 4 + 7 + 14



Note:
The input number n will not exceed 100,000,000. (1e8)

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool checkPerfectNumber(int num) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean checkPerfectNumber(int num) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def checkPerfectNumber(self, num):         '''         :type num: int         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool checkPerfectNumber(int num) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool CheckPerfectNumber(int num) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} num  * @return {boolean}  */ var checkPerfectNumber = function(num) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} num # @return {Boolean} def check_perfect_number(num)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func checkPerfectNumber(_ num: Int) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func checkPerfectNumber(num int) bool {      }", "text": "Go"}]
---SCRIPT_END---
