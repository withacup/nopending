---CONTENT_BEGIN---

Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.



For example, given nums  = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].



Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.



Credits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     void moveZeroes(vector<int>& nums) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public void moveZeroes(int[] nums) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def moveZeroes(self, nums):         '''         :type nums: List[int]         :rtype: void Do not return anything, modify nums in-place instead.         '''         "}, {"text": "C", "value": "c", "defaultCode": "void moveZeroes(int* nums, int numsSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public void MoveZeroes(int[] nums) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {void} Do not return anything, modify nums in-place instead.  */ var moveZeroes = function(nums) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Void} Do not return anything, modify nums in-place instead. def move_zeroes(nums)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func moveZeroes(_ nums: inout [Int]) {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func moveZeroes(nums []int)  {      }"}]
---SCRIPT_END---
