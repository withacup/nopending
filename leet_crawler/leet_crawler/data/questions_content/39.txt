---CONTENT_BEGIN---

Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T. 


The same repeated number may be chosen from C unlimited number of times.


Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.




For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 

[
  [7],
  [2, 2, 3]
]


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> combinationSum(vector<int>& candidates, int target) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> combinationSum(int[] candidates, int target) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def combinationSum(self, candidates, target):         '''         :type candidates: List[int]         :type target: int         :rtype: List[List[int]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** combinationSum(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> CombinationSum(int[] candidates, int target) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} candidates  * @param {number} target  * @return {number[][]}  */ var combinationSum = function(candidates, target) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} candidates # @param {Integer} target # @return {Integer[][]} def combination_sum(candidates, target)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func combinationSum(candidates []int, target int) [][]int {      }", "text": "Go"}]
---SCRIPT_END---
