---CONTENT_BEGIN---
Given an m * n matrix M initialized with all 0's and several update operations.
Operations are represented by a 2D array, and each operation is represented by an array with two positive integers a and b, which means M[i][j] should be added by one for all 0 <= i < a and 0 <= j < b. 
You need to count and return the number of maximum integers in the matrix after performing all the operations.

Example 1:

Input: 
m = 3, n = 3
operations = [[2,2],[3,3]]
Output: 4
Explanation: 
Initially, M = 
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]

After performing [2,2], M = 
[[1, 1, 0],
 [1, 1, 0],
 [0, 0, 0]]

After performing [3,3], M = 
[[2, 2, 1],
 [2, 2, 1],
 [1, 1, 1]]

So the maximum integer in M is 2, and there are four of it in M. So return 4.



Note:

The range of m and n is [1,40000].
The range of a is [1,m], and the range of b is [1,n].
The range of operations size won't exceed 10,000.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int maxCount(int m, int n, vector<vector<int>>& ops) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int maxCount(int m, int n, int[][] ops) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def maxCount(self, m, n, ops):         '''         :type m: int         :type n: int         :type ops: List[List[int]]         :rtype: int         '''", "text": "Python"}, {"value": "python3", "defaultCode": "class Solution:     def maxCount(self, m, n, ops):         '''         :type m: int         :type n: int         :type ops: List[List[int]]         :rtype: int         '''", "text": "Python3"}, {"value": "c", "defaultCode": "int maxCount(int m, int n, int** ops, int opsRowSize, int opsColSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MaxCount(int m, int n, int[,] ops) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} m  * @param {number} n  * @param {number[][]} ops  * @return {number}  */ var maxCount = function(m, n, ops) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} m # @param {Integer} n # @param {Integer[][]} ops # @return {Integer} def max_count(m, n, ops)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func maxCount(_ m: Int, _ n: Int, _ ops: [[Int]]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func maxCount(m int, n int, ops [][]int) int {      }", "text": "Go"}]
---SCRIPT_END---
