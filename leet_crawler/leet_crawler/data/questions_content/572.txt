---CONTENT_BEGIN---

Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.


Example 1:

Given tree s:

     3
    / \
   4   5
  / \
 1   2

Given tree t:

   4 
  / \
 1   2

Return true, because t has the same structure and node values with a subtree of s.


Example 2:

Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0

Given tree t:

   4
  / \
 1   2

Return false.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * Definition for a binary tree node.  * struct TreeNode {  *     int val;  *     TreeNode *left;  *     TreeNode *right;  *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}  * };  */ class Solution { public:     bool isSubtree(TreeNode* s, TreeNode* t) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * Definition for a binary tree node.  * public class TreeNode {  *     int val;  *     TreeNode left;  *     TreeNode right;  *     TreeNode(int x) { val = x; }  * }  */ public class Solution {     public boolean isSubtree(TreeNode s, TreeNode t) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# Definition for a binary tree node. # class TreeNode(object): #     def __init__(self, x): #         self.val = x #         self.left = None #         self.right = None  class Solution(object):     def isSubtree(self, s, t):         '''         :type s: TreeNode         :type t: TreeNode         :rtype: bool         '''", "text": "Python"}, {"value": "python3", "defaultCode": "class Solution:     def isSubtree(self, s, t):         '''         :type s: TreeNode         :type t: TreeNode         :rtype: bool         '''", "text": "Python3"}, {"value": "c", "defaultCode": "/**  * Definition for a binary tree node.  * struct TreeNode {  *     int val;  *     struct TreeNode *left;  *     struct TreeNode *right;  * };  */ bool isSubtree(struct TreeNode* s, struct TreeNode* t) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * Definition for a binary tree node.  * public class TreeNode {  *     public int val;  *     public TreeNode left;  *     public TreeNode right;  *     public TreeNode(int x) { val = x; }  * }  */ public class Solution {     public bool IsSubtree(TreeNode s, TreeNode t) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Definition for a binary tree node.  * function TreeNode(val) {  *     this.val = val;  *     this.left = this.right = null;  * }  */ /**  * @param {TreeNode} s  * @param {TreeNode} t  * @return {boolean}  */ var isSubtree = function(s, t) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# Definition for a binary tree node. # class TreeNode #     attr_accessor :val, :left, :right #     def initialize(val) #         @val = val #         @left, @right = nil, nil #     end # end  # @param {TreeNode} s # @param {TreeNode} t # @return {Boolean} def is_subtree(s, t)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "/**  * Definition for a binary tree node.  * public class TreeNode {  *     public var val: Int  *     public var left: TreeNode?  *     public var right: TreeNode?  *     public init(_ val: Int) {  *         self.val = val  *         self.left = nil  *         self.right = nil  *     }  * }  */ class Solution {     func isSubtree(_ s: TreeNode?, _ t: TreeNode?) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "/**  * Definition for a binary tree node.  * type TreeNode struct {  *     Val int  *     Left *TreeNode  *     Right *TreeNode  * }  */ func isSubtree(s *TreeNode, t *TreeNode) bool {      }", "text": "Go"}]
---SCRIPT_END---
