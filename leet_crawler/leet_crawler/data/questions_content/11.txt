---CONTENT_BEGIN---
Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int maxArea(vector<int>& height) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int maxArea(int[] height) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def maxArea(self, height):         '''         :type height: List[int]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int maxArea(int* height, int heightSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MaxArea(int[] height) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} height  * @return {number}  */ var maxArea = function(height) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} height # @return {Integer} def max_area(height)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func maxArea(_ height: [Int]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func maxArea(height []int) int {      }", "text": "Go"}]
---SCRIPT_END---
