---CONTENT_BEGIN---
Design an in-memory file system to simulate the following functions:

ls: Given a path in string format. If it is a file path, return a list that only contains this file's name. If it is a directory path, return the list of file and directory names in this directory. Your output (file and directory names together) should in lexicographic order.

mkdir: Given a directory path that does not exist, you should make a new directory according to the path. If the middle directories in the path don't exist either, you should create them as well. This function has void return type. 

addContentToFile: Given a file path and file content in string format. If the file doesn't exist, you need to create that file containing given content. If the file already exists, you need to append given content to original content. This function has void return type.

readContentFromFile: Given a file path, return its content in string format.

Example:

Input: 
["FileSystem","ls","mkdir","addContentToFile","ls","readContentFromFile"]
[[],["/"],["/a/b/c"],["/a/b/c/d","hello"],["/"],["/a/b/c/d"]]
Output:
[null,[],null,null,["a"],"hello"]
Explanation:




Note:

You can assume all file or directory paths are absolute paths which begin with / and do not end with / except that the path is just "/".
You can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.
You can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class FileSystem { public:     FileSystem() {              }          vector<string> ls(string path) {              }          void mkdir(string path) {              }          void addContentToFile(string filePath, string content) {              }          string readContentFromFile(string filePath) {              } };  /**  * Your FileSystem object will be instantiated and called as such:  * FileSystem obj = new FileSystem();  * vector<string> param_1 = obj.ls(path);  * obj.mkdir(path);  * obj.addContentToFile(filePath,content);  * string param_4 = obj.readContentFromFile(filePath);  */", "text": "C++"}, {"value": "java", "defaultCode": "public class FileSystem {      public FileSystem() {              }          public List<String> ls(String path) {              }          public void mkdir(String path) {              }          public void addContentToFile(String filePath, String content) {              }          public String readContentFromFile(String filePath) {              } }  /**  * Your FileSystem object will be instantiated and called as such:  * FileSystem obj = new FileSystem();  * List<String> param_1 = obj.ls(path);  * obj.mkdir(path);  * obj.addContentToFile(filePath,content);  * String param_4 = obj.readContentFromFile(filePath);  */", "text": "Java"}, {"value": "python", "defaultCode": "class FileSystem(object):      def __init__(self):               def ls(self, path):         '''         :type path: str         :rtype: List[str]         '''               def mkdir(self, path):         '''         :type path: str         :rtype: void         '''               def addContentToFile(self, filePath, content):         '''         :type filePath: str         :type content: str         :rtype: void         '''               def readContentFromFile(self, filePath):         '''         :type filePath: str         :rtype: str         '''            # Your FileSystem object will be instantiated and called as such: # obj = FileSystem() # param_1 = obj.ls(path) # obj.mkdir(path) # obj.addContentToFile(filePath,content) # param_4 = obj.readContentFromFile(filePath)", "text": "Python"}, {"value": "python3", "defaultCode": "class FileSystem:      def __init__(self):               def ls(self, path):         '''         :type path: str         :rtype: List[str]         '''               def mkdir(self, path):         '''         :type path: str         :rtype: void         '''               def addContentToFile(self, filePath, content):         '''         :type filePath: str         :type content: str         :rtype: void         '''               def readContentFromFile(self, filePath):         '''         :type filePath: str         :rtype: str         '''            # Your FileSystem object will be instantiated and called as such: # obj = FileSystem() # param_1 = obj.ls(path) # obj.mkdir(path) # obj.addContentToFile(filePath,content) # param_4 = obj.readContentFromFile(filePath)", "text": "Python3"}, {"value": "c", "defaultCode": "typedef struct {      } FileSystem;  FileSystem* fileSystemCreate() {      }  char** fileSystemLs(FileSystem* obj, char* path, int *returnSize) {      }  void fileSystemMkdir(FileSystem* obj, char* path) {      }  void fileSystemAddContentToFile(FileSystem* obj, char* filePath, char* content) {      }  char* fileSystemReadContentFromFile(FileSystem* obj, char* filePath) {      }  void fileSystemFree(FileSystem* obj) {      }  /**  * Your FileSystem struct will be instantiated and called as such:  * struct FileSystem* obj = fileSystemCreate();  * char** param_1 = fileSystemLs(obj, path);  * fileSystemMkdir(obj, path);  * fileSystemAddContentToFile(obj, filePath, content);  * char* param_4 = fileSystemReadContentFromFile(obj, filePath);  * fileSystemFree(obj);  */", "text": "C"}, {"value": "csharp", "defaultCode": "public class FileSystem {      public FileSystem() {              }          public IList<string> Ls(string path) {              }          public void Mkdir(string path) {              }          public void AddContentToFile(string filePath, string content) {              }          public string ReadContentFromFile(string filePath) {              } }  /**  * Your FileSystem object will be instantiated and called as such:  * FileSystem obj = new FileSystem();  * IList<string> param_1 = obj.Ls(path);  * obj.Mkdir(path);  * obj.AddContentToFile(filePath,content);  * string param_4 = obj.ReadContentFromFile(filePath);  */", "text": "C#"}, {"value": "javascript", "defaultCode": "var FileSystem = function() {      };  /**   * @param {string} path  * @return {string[]}  */ FileSystem.prototype.ls = function(path) {      };  /**   * @param {string} path  * @return {void}  */ FileSystem.prototype.mkdir = function(path) {      };  /**   * @param {string} filePath   * @param {string} content  * @return {void}  */ FileSystem.prototype.addContentToFile = function(filePath, content) {      };  /**   * @param {string} filePath  * @return {string}  */ FileSystem.prototype.readContentFromFile = function(filePath) {      };  /**   * Your FileSystem object will be instantiated and called as such:  * var obj = Object.create(FileSystem).createNew()  * var param_1 = obj.ls(path)  * obj.mkdir(path)  * obj.addContentToFile(filePath,content)  * var param_4 = obj.readContentFromFile(filePath)  */", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "class FileSystem     def initialize()              end   =begin     :type path: String     :rtype: String[] =end     def ls(path)              end   =begin     :type path: String     :rtype: Void =end     def mkdir(path)              end   =begin     :type filePath: String     :type content: String     :rtype: Void =end     def add_content_to_file(filePath, content)              end   =begin     :type filePath: String     :rtype: String =end     def read_content_from_file(filePath)              end   end  # Your FileSystem object will be instantiated and called as such: # obj = FileSystem.new() # param_1 = obj.ls(path) # obj.mkdir(path) # obj.add_content_to_file(filePath,content) # param_4 = obj.read_content_from_file(filePath)", "text": "Ruby"}, {"value": "golang", "defaultCode": "type FileSystem struct {      }   func Constructor() FileSystem {      }   func (this *FileSystem) Ls(path string) []string {      }   func (this *FileSystem) Mkdir(path string)  {      }   func (this *FileSystem) AddContentToFile(filePath string, content string)  {      }   func (this *FileSystem) ReadContentFromFile(filePath string) string {      }   /**  * Your FileSystem object will be instantiated and called as such:  * obj := Constructor();  * param_1 := obj.Ls(path);  * obj.Mkdir(path);  * obj.AddContentToFile(filePath,content);  * param_4 := obj.ReadContentFromFile(filePath);  */", "text": "Go"}]
---SCRIPT_END---
