---CONTENT_BEGIN---
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int search(vector<int>& nums, int target) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int search(int[] nums, int target) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def search(self, nums, target):         '''         :type nums: List[int]         :type target: int         :rtype: int         '''", "text": "Python"}, {"value": "c", "defaultCode": "int search(int* nums, int numsSize, int target) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int Search(int[] nums, int target) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @param {number} target  * @return {number}  */ var search = function(nums, target) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @param {Integer} target # @return {Integer} def search(nums, target)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func search(_ nums: [Int], _ target: Int) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func search(nums []int, target int) int {      }", "text": "Go"}]
---SCRIPT_END---
