---CONTENT_BEGIN---
Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: True



Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: False



Note:

The input array won't violate no-adjacent-flowers rule.
The input array size is in the range of [1, 20000].
n is a non-negative integer which won't exceed the input array size.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool canPlaceFlowers(vector<int>& flowerbed, int n) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean canPlaceFlowers(int[] flowerbed, int n) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def canPlaceFlowers(self, flowerbed, n):         '''         :type flowerbed: List[int]         :type n: int         :rtype: bool         '''         "}, {"text": "Python3", "value": "python3", "defaultCode": "class Solution:     def canPlaceFlowers(self, flowerbed, n):         '''         :type flowerbed: List[int]         :type n: int         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool CanPlaceFlowers(int[] flowerbed, int n) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} flowerbed  * @param {number} n  * @return {boolean}  */ var canPlaceFlowers = function(flowerbed, n) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} flowerbed # @param {Integer} n # @return {Boolean} def can_place_flowers(flowerbed, n)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func canPlaceFlowers(flowerbed []int, n int) bool {      }"}]
---SCRIPT_END---
