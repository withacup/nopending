---CONTENT_BEGIN---

Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such
that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.

Note: n will be less than 15,000.

Example 1:

Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.



Example 2:

Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].



Example 3:

Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool find132pattern(vector<int>& nums) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean find132pattern(int[] nums) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def find132pattern(self, nums):         '''         :type nums: List[int]         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool find132pattern(int* nums, int numsSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool Find132pattern(int[] nums) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {boolean}  */ var find132pattern = function(nums) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Boolean} def find132pattern(nums)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func find132pattern(_ nums: [Int]) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func find132pattern(nums []int) bool {      }", "text": "Go"}]
---SCRIPT_END---
