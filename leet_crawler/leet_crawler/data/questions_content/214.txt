---CONTENT_BEGIN---

Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.


For example: 
Given "aacecaaa", return "aaacecaaa".
Given "abcd", return "dcbabcd".

Credits:Special thanks to @ifanchu for adding this problem and creating all test cases. Thanks to @Freezen for additional test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     string shortestPalindrome(string s) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public String shortestPalindrome(String s) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def shortestPalindrome(self, s):         '''         :type s: str         :rtype: str         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "char* shortestPalindrome(char* s) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public string ShortestPalindrome(string s) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {string}  */ var shortestPalindrome = function(s) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s # @return {String} def shortest_palindrome(s)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func shortestPalindrome(_ s: String) -> String {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func shortestPalindrome(s string) string {      }", "text": "Go"}]
---SCRIPT_END---
