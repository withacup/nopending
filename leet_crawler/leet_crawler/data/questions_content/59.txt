---CONTENT_BEGIN---
Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.


For example,
Given n = 3,

You should return the following matrix:

[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> generateMatrix(int n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int[][] generateMatrix(int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def generateMatrix(self, n):         '''         :type n: int         :rtype: List[List[int]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays.  * Note: The returned array must be malloced, assume caller calls free().  */ int** generateMatrix(int n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int[,] GenerateMatrix(int n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {number[][]}  */ var generateMatrix = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n # @return {Integer[][]} def generate_matrix(n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func generateMatrix(_ n: Int) -> [[Int]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func generateMatrix(n int) [][]int {      }", "text": "Go"}]
---SCRIPT_END---
