---CONTENT_BEGIN---

Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)



You have the following 3 operations permitted on a word:



a) Insert a character
b) Delete a character
c) Replace a character

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int minDistance(string word1, string word2) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int minDistance(String word1, String word2) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def minDistance(self, word1, word2):         '''         :type word1: str         :type word2: str         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int minDistance(char* word1, char* word2) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int MinDistance(string word1, string word2) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} word1  * @param {string} word2  * @return {number}  */ var minDistance = function(word1, word2) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} word1 # @param {String} word2 # @return {Integer} def min_distance(word1, word2)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func minDistance(_ word1: String, _ word2: String) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func minDistance(word1 string, word2 string) int {      }"}]
---SCRIPT_END---
