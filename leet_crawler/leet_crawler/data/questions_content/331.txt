---CONTENT_BEGIN---
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.


     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #


For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.


Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true
Example 2:
"1,#"
Return false
Example 3:
"9,#,#,1"
Return false

Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool isValidSerialization(string preorder) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean isValidSerialization(String preorder) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def isValidSerialization(self, preorder):         '''         :type preorder: str         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool isValidSerialization(char* preorder) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool IsValidSerialization(string preorder) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} preorder  * @return {boolean}  */ var isValidSerialization = function(preorder) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} preorder # @return {Boolean} def is_valid_serialization(preorder)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func isValidSerialization(_ preorder: String) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func isValidSerialization(preorder string) bool {      }"}]
---SCRIPT_END---
