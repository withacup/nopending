---CONTENT_BEGIN---
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.


Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 &le; k &le; input array's size for non-empty array.

Follow up:
Could you solve it in linear time?
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<int> maxSlidingWindow(vector<int>& nums, int k) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int[] maxSlidingWindow(int[] nums, int k) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def maxSlidingWindow(self, nums, k):         '''         :type nums: List[int]         :type k: int         :rtype: List[int]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int[] MaxSlidingWindow(int[] nums, int k) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @param {number} k  * @return {number[]}  */ var maxSlidingWindow = function(nums, k) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @param {Integer} k # @return {Integer[]} def max_sliding_window(nums, k)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func maxSlidingWindow(_ nums: [Int], _ k: Int) -> [Int] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func maxSlidingWindow(nums []int, k int) []int {      }", "text": "Go"}]
---SCRIPT_END---
