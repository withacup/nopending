---CONTENT_BEGIN---
Given an integer array nums, find the sum of the elements between indices i and j (i &le; j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8



Note:

The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class NumArray { public:     NumArray(vector<int> nums) {              }          void update(int i, int val) {              }          int sumRange(int i, int j) {              } };  /**  * Your NumArray object will be instantiated and called as such:  * NumArray obj = new NumArray(nums);  * obj.update(i,val);  * int param_2 = obj.sumRange(i,j);  */"}, {"text": "Java", "value": "java", "defaultCode": "public class NumArray {      public NumArray(int[] nums) {              }          public void update(int i, int val) {              }          public int sumRange(int i, int j) {              } }  /**  * Your NumArray object will be instantiated and called as such:  * NumArray obj = new NumArray(nums);  * obj.update(i,val);  * int param_2 = obj.sumRange(i,j);  */"}, {"text": "Python", "value": "python", "defaultCode": "class NumArray(object):      def __init__(self, nums):         '''         :type nums: List[int]         '''               def update(self, i, val):         '''         :type i: int         :type val: int         :rtype: void         '''               def sumRange(self, i, j):         '''         :type i: int         :type j: int         :rtype: int         '''            # Your NumArray object will be instantiated and called as such: # obj = NumArray(nums) # obj.update(i,val) # param_2 = obj.sumRange(i,j)"}, {"text": "C", "value": "c", "defaultCode": "typedef struct {      } NumArray;  NumArray* numArrayCreate(int* nums, int numsSize) {      }  void numArrayUpdate(NumArray* obj, int i, int val) {      }  int numArraySumRange(NumArray* obj, int i, int j) {      }  void numArrayFree(NumArray* obj) {      }  /**  * Your NumArray struct will be instantiated and called as such:  * struct NumArray* obj = numArrayCreate(nums, numsSize);  * numArrayUpdate(obj, i, val);  * int param_2 = numArraySumRange(obj, i, j);  * numArrayFree(obj);  */"}, {"text": "C#", "value": "csharp", "defaultCode": "public class NumArray {      public NumArray(int[] nums) {              }          public void Update(int i, int val) {              }          public int SumRange(int i, int j) {              } }  /**  * Your NumArray object will be instantiated and called as such:  * NumArray obj = new NumArray(nums);  * obj.Update(i,val);  * int param_2 = obj.SumRange(i,j);  */"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  */ var NumArray = function(nums) {      };  /**   * @param {number} i   * @param {number} val  * @return {void}  */ NumArray.prototype.update = function(i, val) {      };  /**   * @param {number} i   * @param {number} j  * @return {number}  */ NumArray.prototype.sumRange = function(i, j) {      };  /**   * Your NumArray object will be instantiated and called as such:  * var obj = Object.create(NumArray).createNew(nums)  * obj.update(i,val)  * var param_2 = obj.sumRange(i,j)  */"}, {"text": "Ruby", "value": "ruby", "defaultCode": "class NumArray  =begin     :type nums: Integer[] =end     def initialize(nums)              end   =begin     :type i: Integer     :type val: Integer     :rtype: Void =end     def update(i, val)              end   =begin     :type i: Integer     :type j: Integer     :rtype: Integer =end     def sum_range(i, j)              end   end  # Your NumArray object will be instantiated and called as such: # obj = NumArray.new(nums) # obj.update(i,val) # param_2 = obj.sum_range(i,j)"}, {"text": "Go", "value": "golang", "defaultCode": "type NumArray struct {      }   func Constructor(nums []int) NumArray {      }   func (this *NumArray) Update(i int, val int)  {      }   func (this *NumArray) SumRange(i int, j int) int {      }   /**  * Your NumArray object will be instantiated and called as such:  * obj := Constructor(nums);  * obj.Update(i,val);  * param_2 := obj.SumRange(i,j);  */"}]
---SCRIPT_END---
