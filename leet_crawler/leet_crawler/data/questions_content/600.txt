---CONTENT_BEGIN---
Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.

Example 1:

Input: 5
Output: 5
Explanation: 
Here are the non-negative integers <= 5 with their corresponding binary representations:
0 : 0
1 : 1
2 : 10
3 : 11
4 : 100
5 : 101
Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. 



Note:
1 <= n <= 109

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int findIntegers(int num) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int findIntegers(int num) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findIntegers(self, num):         '''         :type num: int         :rtype: int         '''", "text": "Python"}, {"value": "python3", "defaultCode": "class Solution:     def findIntegers(self, num):         '''         :type num: int         :rtype: int         '''", "text": "Python3"}, {"value": "c", "defaultCode": "int findIntegers(int num) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int FindIntegers(int num) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} num  * @return {number}  */ var findIntegers = function(num) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} num # @return {Integer} def find_integers(num)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findIntegers(_ num: Int) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findIntegers(num int) int {      }", "text": "Go"}]
---SCRIPT_END---
