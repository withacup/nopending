---CONTENT_BEGIN---
The gray code is a binary numeral system where two successive values differ in only one bit.

Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.

For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:

00 - 0
01 - 1
11 - 3
10 - 2


Note:
For a given n, a gray code sequence is not uniquely defined.

For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.

For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<int> grayCode(int n) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<Integer> grayCode(int n) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def grayCode(self, n):         '''         :type n: int         :rtype: List[int]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* grayCode(int n, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<int> GrayCode(int n) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {number[]}  */ var grayCode = function(n) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} n # @return {Integer[]} def gray_code(n)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func grayCode(_ n: Int) -> [Int] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func grayCode(n int) []int {      }"}]
---SCRIPT_END---
