---CONTENT_BEGIN---
Implement regular expression matching with support for '.' and '*'.


'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") â false
isMatch("aa","aa") â true
isMatch("aaa","aa") â false
isMatch("aa", "a*") â true
isMatch("aa", ".*") â true
isMatch("ab", ".*") â true
isMatch("aab", "c*a*b") â true

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool isMatch(string s, string p) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean isMatch(String s, String p) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def isMatch(self, s, p):         '''         :type s: str         :type p: str         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool isMatch(char* s, char* p) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool IsMatch(string s, string p) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} s  * @param {string} p  * @return {boolean}  */ var isMatch = function(s, p) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} s # @param {String} p # @return {Boolean} def is_match(s, p)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func isMatch(_ s: String, _ p: String) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func isMatch(s string, p string) bool {      }"}]
---SCRIPT_END---
