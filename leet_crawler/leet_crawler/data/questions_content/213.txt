---CONTENT_BEGIN---
Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street. 

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Credits:Special thanks to @Freezen for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int rob(vector<int>& nums) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int rob(int[] nums) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def rob(self, nums):         '''         :type nums: List[int]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int rob(int* nums, int numsSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int Rob(int[] nums) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {number}  */ var rob = function(nums) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Integer} def rob(nums)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func rob(_ nums: [Int]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func rob(nums []int) int {      }", "text": "Go"}]
---SCRIPT_END---
