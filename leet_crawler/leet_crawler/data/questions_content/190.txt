---CONTENT_BEGIN---
Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).


Follow up:
If this function is called many times, how would you optimize it?


Related problem: Reverse Integer

Credits:Special thanks to @ts for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     uint32_t reverseBits(uint32_t n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     // you need treat n as an unsigned value     public int reverseBits(int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution:     # @param n, an integer     # @return an integer     def reverseBits(self, n):         ", "text": "Python"}, {"value": "c", "defaultCode": "uint32_t reverseBits(uint32_t n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public uint reverseBits(uint n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n - a positive integer  * @return {number} - a positive integer  */ var reverseBits = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n, a positive integer # @return {Integer} def reverse_bits(n)      end", "text": "Ruby"}]
---SCRIPT_END---
