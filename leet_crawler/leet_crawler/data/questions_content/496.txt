---CONTENT_BEGIN---

You are given two arrays (without duplicates) nums1 and nums2 where nums1âs elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2. 



The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.


Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.



Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.




Note:

All elements in nums1 and nums2 are unique.
The length of both nums1 and nums2 would not exceed 1000.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int[] nextGreaterElement(int[] findNums, int[] nums) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def nextGreaterElement(self, findNums, nums):         '''         :type findNums: List[int]         :type nums: List[int]         :rtype: List[int]         '''"}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* nextGreaterElement(int* findNums, int findNumsSize, int* nums, int numsSize, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int[] NextGreaterElement(int[] findNums, int[] nums) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} findNums  * @param {number[]} nums  * @return {number[]}  */ var nextGreaterElement = function(findNums, nums) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} find_nums # @param {Integer[]} nums # @return {Integer[]} def next_greater_element(find_nums, nums)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func nextGreaterElement(_ findNums: [Int], _ nums: [Int]) -> [Int] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func nextGreaterElement(findNums []int, nums []int) []int {      }"}]
---SCRIPT_END---
