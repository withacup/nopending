---CONTENT_BEGIN---

Evaluate the value of an arithmetic expression in Reverse Polish Notation.



Valid operators are +, -, *, /. Each operand may be an integer or another expression.



Some examples:

  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int evalRPN(vector<string>& tokens) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int evalRPN(String[] tokens) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def evalRPN(self, tokens):         '''         :type tokens: List[str]         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int evalRPN(char** tokens, int tokensSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int EvalRPN(string[] tokens) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string[]} tokens  * @return {number}  */ var evalRPN = function(tokens) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String[]} tokens # @return {Integer} def eval_rpn(tokens)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func evalRPN(_ tokens: [String]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func evalRPN(tokens []string) int {      }"}]
---SCRIPT_END---
