---CONTENT_BEGIN---

Evaluate the value of an arithmetic expression in Reverse Polish Notation.



Valid operators are +, -, *, /. Each operand may be an integer or another expression.



Some examples:

  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int evalRPN(vector<string>& tokens) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int evalRPN(String[] tokens) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def evalRPN(self, tokens):         '''         :type tokens: List[str]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int evalRPN(char** tokens, int tokensSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int EvalRPN(string[] tokens) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string[]} tokens  * @return {number}  */ var evalRPN = function(tokens) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String[]} tokens # @return {Integer} def eval_rpn(tokens)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func evalRPN(_ tokens: [String]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func evalRPN(tokens []string) int {      }", "text": "Go"}]
---SCRIPT_END---
