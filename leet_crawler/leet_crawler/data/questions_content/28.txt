---CONTENT_BEGIN---

Implement strStr().


Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int strStr(string haystack, string needle) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int strStr(String haystack, String needle) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def strStr(self, haystack, needle):         '''         :type haystack: str         :type needle: str         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int strStr(char* haystack, char* needle) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int StrStr(string haystack, string needle) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} haystack  * @param {string} needle  * @return {number}  */ var strStr = function(haystack, needle) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} haystack # @param {String} needle # @return {Integer} def str_str(haystack, needle)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func strStr(_ haystack: String, _ needle: String) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func strStr(haystack string, needle string) int {      }"}]
---SCRIPT_END---
