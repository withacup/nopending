---CONTENT_BEGIN---
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]

The total number of unique paths is 2.

Note: m and n will be at most 100.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int uniquePathsWithObstacles(int[][] obstacleGrid) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def uniquePathsWithObstacles(self, obstacleGrid):         '''         :type obstacleGrid: List[List[int]]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridRowSize, int obstacleGridColSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int UniquePathsWithObstacles(int[,] obstacleGrid) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[][]} obstacleGrid  * @return {number}  */ var uniquePathsWithObstacles = function(obstacleGrid) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[][]} obstacle_grid # @return {Integer} def unique_paths_with_obstacles(obstacle_grid)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func uniquePathsWithObstacles(_ obstacleGrid: [[Int]]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func uniquePathsWithObstacles(obstacleGrid [][]int) int {      }", "text": "Go"}]
---SCRIPT_END---
