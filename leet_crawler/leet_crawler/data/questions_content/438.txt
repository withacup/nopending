---CONTENT_BEGIN---
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".



Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<int> findAnagrams(string s, string p) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<Integer> findAnagrams(String s, String p) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def findAnagrams(self, s, p):         '''         :type s: str         :type p: str         :rtype: List[int]         '''"}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* findAnagrams(char* s, char* p, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<int> FindAnagrams(string s, string p) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} s  * @param {string} p  * @return {number[]}  */ var findAnagrams = function(s, p) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} s # @param {String} p # @return {Integer[]} def find_anagrams(s, p)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func findAnagrams(_ s: String, _ p: String) -> [Int] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func findAnagrams(s string, p string) []int {      }"}]
---SCRIPT_END---
