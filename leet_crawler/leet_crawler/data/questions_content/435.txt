---CONTENT_BEGIN---

Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.


Note:

You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.



Example 1:

Input: [ [1,2], [2,3], [3,4], [1,3] ]

Output: 1

Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.



Example 2:

Input: [ [1,2], [1,2], [1,2] ]

Output: 2

Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.



Example 3:

Input: [ [1,2], [2,3] ]

Output: 0

Explanation: You don't need to remove any of the intervals since they're already non-overlapping.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  *     Interval() : start(0), end(0) {}  *     Interval(int s, int e) : start(s), end(e) {}  * };  */ class Solution { public:     int eraseOverlapIntervals(vector<Interval>& intervals) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     int start;  *     int end;  *     Interval() { start = 0; end = 0; }  *     Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public int eraseOverlapIntervals(Interval[] intervals) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# Definition for an interval. # class Interval(object): #     def __init__(self, s=0, e=0): #         self.start = s #         self.end = e  class Solution(object):     def eraseOverlapIntervals(self, intervals):         '''         :type intervals: List[Interval]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  * };  */ int eraseOverlapIntervals(struct Interval* intervals, int intervalsSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     public int start;  *     public int end;  *     public Interval() { start = 0; end = 0; }  *     public Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public int EraseOverlapIntervals(Interval[] intervals) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Definition for an interval.  * function Interval(start, end) {  *     this.start = start;  *     this.end = end;  * }  */ /**  * @param {Interval[]} intervals  * @return {number}  */ var eraseOverlapIntervals = function(intervals) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# Definition for an interval. # class Interval #     attr_accessor :start, :end #     def initialize(s=0, e=0) #         @start = s #         @end = e #     end # end  # @param {Interval[]} intervals # @return {Integer} def erase_overlap_intervals(intervals)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *   public var start: Int  *   public var end: Int  *   public init(_ start: Int, _ end: Int) {  *     self.start = start  *     self.end = end  *   }  * }  */ class Solution {     func eraseOverlapIntervals(_ intervals: [Interval]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "/**  * Definition for an interval.  * type Interval struct {  *       Start int  *       End   int  * }  */ func eraseOverlapIntervals(intervals []Interval) int {      }", "text": "Go"}]
---SCRIPT_END---
