---CONTENT_BEGIN---

Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.



For example,

X X X X
X O O X
X X O X
X O X X




After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     void solve(vector<vector<char>>& board) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public void solve(char[][] board) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def solve(self, board):         '''         :type board: List[List[str]]         :rtype: void Do not return anything, modify board in-place instead.         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "void solve(char** board, int boardRowSize, int boardColSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public void Solve(char[,] board) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {character[][]} board  * @return {void} Do not return anything, modify board in-place instead.  */ var solve = function(board) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Character[][]} board # @return {Void} Do not return anything, modify board in-place instead. def solve(board)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func solve(_ board: inout [[Character]]) {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func solve(board [][]byte)  {      }", "text": "Go"}]
---SCRIPT_END---
