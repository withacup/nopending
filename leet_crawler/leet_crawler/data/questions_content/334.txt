---CONTENT_BEGIN---

Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.


Formally the function should:
Return true if there exists i, j, k  
such that arr[i] &lt; arr[j] &lt; arr[k] given 0 &le; i &lt; j &lt; k &le; n-1 
else return false.



Your algorithm should run in O(n) time complexity and O(1) space complexity.


Examples:
Given [1, 2, 3, 4, 5],
return true.


Given [5, 4, 3, 2, 1],
return false.


Credits:Special thanks to @DjangoUnchained for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool increasingTriplet(vector<int>& nums) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean increasingTriplet(int[] nums) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def increasingTriplet(self, nums):         '''         :type nums: List[int]         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool increasingTriplet(int* nums, int numsSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool IncreasingTriplet(int[] nums) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {boolean}  */ var increasingTriplet = function(nums) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Boolean} def increasing_triplet(nums)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func increasingTriplet(_ nums: [Int]) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func increasingTriplet(nums []int) bool {      }"}]
---SCRIPT_END---
