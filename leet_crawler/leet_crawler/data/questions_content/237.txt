---CONTENT_BEGIN---

Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.



Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node with value 3, the linked list should become 1 -> 2 -> 4 after calling your function.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     ListNode *next;  *     ListNode(int x) : val(x), next(NULL) {}  * };  */ class Solution { public:     void deleteNode(ListNode* node) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     int val;  *     ListNode next;  *     ListNode(int x) { val = x; }  * }  */ public class Solution {     public void deleteNode(ListNode node) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# Definition for singly-linked list. # class ListNode(object): #     def __init__(self, x): #         self.val = x #         self.next = None  class Solution(object):     def deleteNode(self, node):         '''         :type node: ListNode         :rtype: void Do not return anything, modify node in-place instead.         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     struct ListNode *next;  * };  */ void deleteNode(struct ListNode* node) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     public int val;  *     public ListNode next;  *     public ListNode(int x) { val = x; }  * }  */ public class Solution {     public void DeleteNode(ListNode node) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Definition for singly-linked list.  * function ListNode(val) {  *     this.val = val;  *     this.next = null;  * }  */ /**  * @param {ListNode} node  * @return {void} Do not return anything, modify node in-place instead.  */ var deleteNode = function(node) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# Definition for singly-linked list. # class ListNode #     attr_accessor :val, :next #     def initialize(val) #         @val = val #         @next = nil #     end # end  # @param {ListNode} node # @return {Void} Do not return anything, modify node in-place instead. def delete_node(node)      end", "text": "Ruby"}]
---SCRIPT_END---
