---CONTENT_BEGIN---
Given n points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).

Example:

Input:
[[0,0],[1,0],[2,0]]

Output:
2

Explanation:
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int numberOfBoomerangs(vector<pair<int, int>>& points) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int numberOfBoomerangs(int[][] points) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def numberOfBoomerangs(self, points):         '''         :type points: List[List[int]]         :rtype: int         '''"}, {"text": "C", "value": "c", "defaultCode": "int numberOfBoomerangs(int** points, int pointsRowSize, int pointsColSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int NumberOfBoomerangs(int[,] points) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[][]} points  * @return {number}  */ var numberOfBoomerangs = function(points) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[][]} points # @return {Integer} def number_of_boomerangs(points)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func numberOfBoomerangs(_ points: [[Int]]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func numberOfBoomerangs(points [][]int) int {      }"}]
---SCRIPT_END---
