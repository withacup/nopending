---CONTENT_BEGIN---
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int minPathSum(vector<vector<int>>& grid) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int minPathSum(int[][] grid) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def minPathSum(self, grid):         '''         :type grid: List[List[int]]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int minPathSum(int** grid, int gridRowSize, int gridColSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MinPathSum(int[,] grid) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[][]} grid  * @return {number}  */ var minPathSum = function(grid) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[][]} grid # @return {Integer} def min_path_sum(grid)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func minPathSum(_ grid: [[Int]]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func minPathSum(grid [][]int) int {      }", "text": "Go"}]
---SCRIPT_END---
