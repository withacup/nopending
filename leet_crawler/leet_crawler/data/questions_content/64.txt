---CONTENT_BEGIN---
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int minPathSum(vector<vector<int>>& grid) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int minPathSum(int[][] grid) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def minPathSum(self, grid):         '''         :type grid: List[List[int]]         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int minPathSum(int** grid, int gridRowSize, int gridColSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int MinPathSum(int[,] grid) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[][]} grid  * @return {number}  */ var minPathSum = function(grid) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[][]} grid # @return {Integer} def min_path_sum(grid)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func minPathSum(_ grid: [[Int]]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func minPathSum(grid [][]int) int {      }"}]
---SCRIPT_END---
