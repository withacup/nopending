---CONTENT_BEGIN---
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2



Note:

The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int subarraySum(vector<int>& nums, int k) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int subarraySum(int[] nums, int k) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def subarraySum(self, nums, k):         '''         :type nums: List[int]         :type k: int         :rtype: int         '''"}, {"text": "C", "value": "c", "defaultCode": "int subarraySum(int* nums, int numsSize, int k) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int SubarraySum(int[] nums, int k) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @param {number} k  * @return {number}  */ var subarraySum = function(nums, k) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @param {Integer} k # @return {Integer} def subarray_sum(nums, k)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func subarraySum(_ nums: [Int], _ k: Int) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func subarraySum(nums []int, k int) int {      }"}]
---SCRIPT_END---
