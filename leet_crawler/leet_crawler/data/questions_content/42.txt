---CONTENT_BEGIN---

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. 



For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.




The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int trap(vector<int>& height) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int trap(int[] height) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def trap(self, height):         '''         :type height: List[int]         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int trap(int* height, int heightSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int Trap(int[] height) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} height  * @return {number}  */ var trap = function(height) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} height # @return {Integer} def trap(height)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func trap(_ height: [Int]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func trap(height []int) int {      }"}]
---SCRIPT_END---
