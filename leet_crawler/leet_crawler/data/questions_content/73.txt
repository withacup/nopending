---CONTENT_BEGIN---

Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.


click to show follow up.

Follow up:


Did you use extra space?
A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     void setZeroes(vector<vector<int>>& matrix) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public void setZeroes(int[][] matrix) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def setZeroes(self, matrix):         '''         :type matrix: List[List[int]]         :rtype: void Do not return anything, modify matrix in-place instead.         '''"}, {"text": "C", "value": "c", "defaultCode": "void setZeroes(int** matrix, int matrixRowSize, int matrixColSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public void SetZeroes(int[,] matrix) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[][]} matrix  * @return {void} Do not return anything, modify matrix in-place instead.  */ var setZeroes = function(matrix) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[][]} matrix # @return {Void} Do not return anything, modify matrix in-place instead. def set_zeroes(matrix)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func setZeroes(_ matrix: inout [[Int]]) {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func setZeroes(matrix [][]int)  {      }"}]
---SCRIPT_END---
