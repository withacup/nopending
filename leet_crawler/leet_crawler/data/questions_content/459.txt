---CONTENT_BEGIN---
Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.  You may assume the given string consists of lowercase English letters only and its length  will not exceed 10000. 

Example 1:

Input: "abab"

Output: True

Explanation: It's the substring "ab" twice.



Example 2:

Input: "aba"

Output: False



Example 3:

Input: "abcabcabcabc"

Output: True

Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool repeatedSubstringPattern(string s) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean repeatedSubstringPattern(String s) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def repeatedSubstringPattern(self, s):         '''         :type s: str         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool repeatedSubstringPattern(char* s) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool RepeatedSubstringPattern(string s) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {boolean}  */ var repeatedSubstringPattern = function(s) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s # @return {Boolean} def repeated_substring_pattern(s)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func repeatedSubstringPattern(_ s: String) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func repeatedSubstringPattern(s string) bool {      }", "text": "Go"}]
---SCRIPT_END---
