---CONTENT_BEGIN---

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?


Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool search(vector<int>& nums, int target) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean search(int[] nums, int target) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def search(self, nums, target):         '''         :type nums: List[int]         :type target: int         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool search(int* nums, int numsSize, int target) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool Search(int[] nums, int target) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @param {number} target  * @return {boolean}  */ var search = function(nums, target) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @param {Integer} target # @return {Boolean} def search(nums, target)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func search(_ nums: [Int], _ target: Int) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func search(nums []int, target int) bool {      }"}]
---SCRIPT_END---
