---CONTENT_BEGIN---
Write a function that takes an unsigned integer and returns the number of â1' bits it has (also known as the Hamming weight).

For example, the 32-bit integer â11' has binary representation 00000000000000000000000000001011, so the function should return 3.

Credits:Special thanks to @ts for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int hammingWeight(uint32_t n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     // you need to treat n as an unsigned value     public int hammingWeight(int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def hammingWeight(self, n):         '''         :type n: int         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int hammingWeight(uint32_t n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int HammingWeight(uint n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n - a positive integer  * @return {number}  */ var hammingWeight = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n, a positive integer # @return {Integer} def hamming_weight(n)      end", "text": "Ruby"}]
---SCRIPT_END---
