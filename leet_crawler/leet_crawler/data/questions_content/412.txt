---CONTENT_BEGIN---
Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output âFizzâ instead of the number and for the multiples of five output âBuzzâ. For numbers which are multiples of both three and five output âFizzBuzzâ.

Example:

n = 15,

Return:
[
    "1",
    "2",
    "Fizz",
    "4",
    "Buzz",
    "Fizz",
    "7",
    "8",
    "Fizz",
    "Buzz",
    "11",
    "Fizz",
    "13",
    "14",
    "FizzBuzz"
]


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<string> fizzBuzz(int n) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<String> fizzBuzz(int n) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def fizzBuzz(self, n):         '''         :type n: int         :rtype: List[str]         '''"}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** fizzBuzz(int n, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<string> FizzBuzz(int n) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {string[]}  */ var fizzBuzz = function(n) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} n # @return {String[]} def fizz_buzz(n)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func fizzBuzz(_ n: Int) -> [String] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func fizzBuzz(n int) []string {      }"}]
---SCRIPT_END---
