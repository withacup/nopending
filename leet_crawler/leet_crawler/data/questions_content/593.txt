---CONTENT_BEGIN---
Given the coordinates of four points in 2D space, return whether the four points could construct a square.

The coordinate (x,y) of a point is represented by an integer array with two integers.

Example:

Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: True



 Note: 

All the input integers are in the range [-10000, 10000].
A valid square has four equal sides with positive length and four equal angles (90-degree angles).
Input points have no order.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def validSquare(self, p1, p2, p3, p4):         '''         :type p1: List[int]         :type p2: List[int]         :type p3: List[int]         :type p4: List[int]         :rtype: bool         '''", "text": "Python"}, {"value": "python3", "defaultCode": "class Solution:     def validSquare(self, p1, p2, p3, p4):         '''         :type p1: List[int]         :type p2: List[int]         :type p3: List[int]         :type p4: List[int]         :rtype: bool         '''", "text": "Python3"}, {"value": "c", "defaultCode": "bool validSquare(int* p1, int p1Size, int* p2, int p2Size, int* p3, int p3Size, int* p4, int p4Size) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool ValidSquare(int[] p1, int[] p2, int[] p3, int[] p4) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} p1  * @param {number[]} p2  * @param {number[]} p3  * @param {number[]} p4  * @return {boolean}  */ var validSquare = function(p1, p2, p3, p4) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} p1 # @param {Integer[]} p2 # @param {Integer[]} p3 # @param {Integer[]} p4 # @return {Boolean} def valid_square(p1, p2, p3, p4)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func validSquare(_ p1: [Int], _ p2: [Int], _ p3: [Int], _ p4: [Int]) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func validSquare(p1 []int, p2 []int, p3 []int, p4 []int) bool {      }", "text": "Go"}]
---SCRIPT_END---
