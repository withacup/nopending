---CONTENT_BEGIN---
Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:



postTweet(userId, tweetId): Compose a new tweet.
getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
follow(followerId, followeeId): Follower follows a followee.
unfollow(followerId, followeeId): Follower unfollows a followee.



Example:

Twitter twitter = new Twitter();

// User 1 posts a new tweet (id = 5).
twitter.postTweet(1, 5);

// User 1's news feed should return a list with 1 tweet id -> [5].
twitter.getNewsFeed(1);

// User 1 follows user 2.
twitter.follow(1, 2);

// User 2 posts a new tweet (id = 6).
twitter.postTweet(2, 6);

// User 1's news feed should return a list with 2 tweet ids -> [6, 5].
// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.getNewsFeed(1);

// User 1 unfollows user 2.
twitter.unfollow(1, 2);

// User 1's news feed should return a list with 1 tweet id -> [5],
// since user 1 is no longer following user 2.
twitter.getNewsFeed(1);


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Twitter { public:     /** Initialize your data structure here. */     Twitter() {              }          /** Compose a new tweet. */     void postTweet(int userId, int tweetId) {              }          /** Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */     vector<int> getNewsFeed(int userId) {              }          /** Follower follows a followee. If the operation is invalid, it should be a no-op. */     void follow(int followerId, int followeeId) {              }          /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */     void unfollow(int followerId, int followeeId) {              } };  /**  * Your Twitter object will be instantiated and called as such:  * Twitter obj = new Twitter();  * obj.postTweet(userId,tweetId);  * vector<int> param_2 = obj.getNewsFeed(userId);  * obj.follow(followerId,followeeId);  * obj.unfollow(followerId,followeeId);  */", "text": "C++"}, {"value": "java", "defaultCode": "public class Twitter {      /** Initialize your data structure here. */     public Twitter() {              }          /** Compose a new tweet. */     public void postTweet(int userId, int tweetId) {              }          /** Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */     public List<Integer> getNewsFeed(int userId) {              }          /** Follower follows a followee. If the operation is invalid, it should be a no-op. */     public void follow(int followerId, int followeeId) {              }          /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */     public void unfollow(int followerId, int followeeId) {              } }  /**  * Your Twitter object will be instantiated and called as such:  * Twitter obj = new Twitter();  * obj.postTweet(userId,tweetId);  * List<Integer> param_2 = obj.getNewsFeed(userId);  * obj.follow(followerId,followeeId);  * obj.unfollow(followerId,followeeId);  */", "text": "Java"}, {"value": "python", "defaultCode": "class Twitter(object):      def __init__(self):         '''         Initialize your data structure here.         '''               def postTweet(self, userId, tweetId):         '''         Compose a new tweet.         :type userId: int         :type tweetId: int         :rtype: void         '''               def getNewsFeed(self, userId):         '''         Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.         :type userId: int         :rtype: List[int]         '''               def follow(self, followerId, followeeId):         '''         Follower follows a followee. If the operation is invalid, it should be a no-op.         :type followerId: int         :type followeeId: int         :rtype: void         '''               def unfollow(self, followerId, followeeId):         '''         Follower unfollows a followee. If the operation is invalid, it should be a no-op.         :type followerId: int         :type followeeId: int         :rtype: void         '''            # Your Twitter object will be instantiated and called as such: # obj = Twitter() # obj.postTweet(userId,tweetId) # param_2 = obj.getNewsFeed(userId) # obj.follow(followerId,followeeId) # obj.unfollow(followerId,followeeId)", "text": "Python"}, {"value": "c", "defaultCode": "typedef struct {      } Twitter;  /** Initialize your data structure here. */ Twitter* twitterCreate() {      }  /** Compose a new tweet. */ void twitterPostTweet(Twitter* obj, int userId, int tweetId) {      }  /** Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */ int* twitterGetNewsFeed(Twitter* obj, int userId, int *returnSize) {      }  /** Follower follows a followee. If the operation is invalid, it should be a no-op. */ void twitterFollow(Twitter* obj, int followerId, int followeeId) {      }  /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */ void twitterUnfollow(Twitter* obj, int followerId, int followeeId) {      }  void twitterFree(Twitter* obj) {      }  /**  * Your Twitter struct will be instantiated and called as such:  * struct Twitter* obj = twitterCreate();  * twitterPostTweet(obj, userId, tweetId);  * int* param_2 = twitterGetNewsFeed(obj, userId);  * twitterFollow(obj, followerId, followeeId);  * twitterUnfollow(obj, followerId, followeeId);  * twitterFree(obj);  */", "text": "C"}, {"value": "csharp", "defaultCode": "public class Twitter {      /** Initialize your data structure here. */     public Twitter() {              }          /** Compose a new tweet. */     public void PostTweet(int userId, int tweetId) {              }          /** Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */     public IList<int> GetNewsFeed(int userId) {              }          /** Follower follows a followee. If the operation is invalid, it should be a no-op. */     public void Follow(int followerId, int followeeId) {              }          /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */     public void Unfollow(int followerId, int followeeId) {              } }  /**  * Your Twitter object will be instantiated and called as such:  * Twitter obj = new Twitter();  * obj.PostTweet(userId,tweetId);  * IList<int> param_2 = obj.GetNewsFeed(userId);  * obj.Follow(followerId,followeeId);  * obj.Unfollow(followerId,followeeId);  */", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Initialize your data structure here.  */ var Twitter = function() {      };  /**  * Compose a new tweet.   * @param {number} userId   * @param {number} tweetId  * @return {void}  */ Twitter.prototype.postTweet = function(userId, tweetId) {      };  /**  * Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.   * @param {number} userId  * @return {number[]}  */ Twitter.prototype.getNewsFeed = function(userId) {      };  /**  * Follower follows a followee. If the operation is invalid, it should be a no-op.   * @param {number} followerId   * @param {number} followeeId  * @return {void}  */ Twitter.prototype.follow = function(followerId, followeeId) {      };  /**  * Follower unfollows a followee. If the operation is invalid, it should be a no-op.   * @param {number} followerId   * @param {number} followeeId  * @return {void}  */ Twitter.prototype.unfollow = function(followerId, followeeId) {      };  /**   * Your Twitter object will be instantiated and called as such:  * var obj = Object.create(Twitter).createNew()  * obj.postTweet(userId,tweetId)  * var param_2 = obj.getNewsFeed(userId)  * obj.follow(followerId,followeeId)  * obj.unfollow(followerId,followeeId)  */", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "class Twitter  =begin     Initialize your data structure here. =end     def initialize()              end   =begin     Compose a new tweet.     :type userId: Integer     :type tweetId: Integer     :rtype: Void =end     def post_tweet(userId, tweetId)              end   =begin     Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.     :type userId: Integer     :rtype: Integer[] =end     def get_news_feed(userId)              end   =begin     Follower follows a followee. If the operation is invalid, it should be a no-op.     :type followerId: Integer     :type followeeId: Integer     :rtype: Void =end     def follow(followerId, followeeId)              end   =begin     Follower unfollows a followee. If the operation is invalid, it should be a no-op.     :type followerId: Integer     :type followeeId: Integer     :rtype: Void =end     def unfollow(followerId, followeeId)              end   end  # Your Twitter object will be instantiated and called as such: # obj = Twitter.new() # obj.post_tweet(userId,tweetId) # param_2 = obj.get_news_feed(userId) # obj.follow(followerId,followeeId) # obj.unfollow(followerId,followeeId)", "text": "Ruby"}, {"value": "golang", "defaultCode": "type Twitter struct {      }   /** Initialize your data structure here. */ func Constructor() Twitter {      }   /** Compose a new tweet. */ func (this *Twitter) PostTweet(userId int, tweetId int)  {      }   /** Retrieve the 10 most recent tweet ids in the ' news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */ func (this *Twitter) GetNewsFeed(userId int) []int {      }   /** Follower follows a followee. If the operation is invalid, it should be a no-op. */ func (this *Twitter) Follow(followerId int, followeeId int)  {      }   /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */ func (this *Twitter) Unfollow(followerId int, followeeId int)  {      }   /**  * Your Twitter object will be instantiated and called as such:  * obj := Constructor();  * obj.PostTweet(userId,tweetId);  * param_2 := obj.GetNewsFeed(userId);  * obj.Follow(followerId,followeeId);  * obj.Unfollow(followerId,followeeId);  */", "text": "Go"}]
---SCRIPT_END---
