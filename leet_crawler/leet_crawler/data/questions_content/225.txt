---CONTENT_BEGIN---

Implement the following operations of a stack using queues.


push(x) -- Push element x onto stack.


pop() -- Removes the element on top of the stack.


top() -- Get the top element.


empty() -- Return whether the stack is empty.


Notes:

You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).



Credits:Special thanks to @jianchao.li.fighter for adding this problem and all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class MyStack { public:     /** Initialize your data structure here. */     MyStack() {              }          /** Push element x onto stack. */     void push(int x) {              }          /** Removes the element on top of the stack and returns that element. */     int pop() {              }          /** Get the top element. */     int top() {              }          /** Returns whether the stack is empty. */     bool empty() {              } };  /**  * Your MyStack object will be instantiated and called as such:  * MyStack obj = new MyStack();  * obj.push(x);  * int param_2 = obj.pop();  * int param_3 = obj.top();  * bool param_4 = obj.empty();  */"}, {"text": "Java", "value": "java", "defaultCode": "public class MyStack {      /** Initialize your data structure here. */     public MyStack() {              }          /** Push element x onto stack. */     public void push(int x) {              }          /** Removes the element on top of the stack and returns that element. */     public int pop() {              }          /** Get the top element. */     public int top() {              }          /** Returns whether the stack is empty. */     public boolean empty() {              } }  /**  * Your MyStack object will be instantiated and called as such:  * MyStack obj = new MyStack();  * obj.push(x);  * int param_2 = obj.pop();  * int param_3 = obj.top();  * boolean param_4 = obj.empty();  */"}, {"text": "Python", "value": "python", "defaultCode": "class MyStack(object):      def __init__(self):         '''         Initialize your data structure here.         '''               def push(self, x):         '''         Push element x onto stack.         :type x: int         :rtype: void         '''               def pop(self):         '''         Removes the element on top of the stack and returns that element.         :rtype: int         '''               def top(self):         '''         Get the top element.         :rtype: int         '''               def empty(self):         '''         Returns whether the stack is empty.         :rtype: bool         '''            # Your MyStack object will be instantiated and called as such: # obj = MyStack() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.top() # param_4 = obj.empty()"}, {"text": "C", "value": "c", "defaultCode": "typedef struct {      } MyStack;  /** Initialize your data structure here. */ MyStack* myStackCreate(int maxSize) {      }  /** Push element x onto stack. */ void myStackPush(MyStack* obj, int x) {      }  /** Removes the element on top of the stack and returns that element. */ int myStackPop(MyStack* obj) {      }  /** Get the top element. */ int myStackTop(MyStack* obj) {      }  /** Returns whether the stack is empty. */ bool myStackEmpty(MyStack* obj) {      }  void myStackFree(MyStack* obj) {      }  /**  * Your MyStack struct will be instantiated and called as such:  * struct MyStack* obj = myStackCreate(maxSize);  * myStackPush(obj, x);  * int param_2 = myStackPop(obj);  * int param_3 = myStackTop(obj);  * bool param_4 = myStackEmpty(obj);  * myStackFree(obj);  */"}, {"text": "C#", "value": "csharp", "defaultCode": "public class MyStack {      /** Initialize your data structure here. */     public MyStack() {              }          /** Push element x onto stack. */     public void Push(int x) {              }          /** Removes the element on top of the stack and returns that element. */     public int Pop() {              }          /** Get the top element. */     public int Top() {              }          /** Returns whether the stack is empty. */     public bool Empty() {              } }  /**  * Your MyStack object will be instantiated and called as such:  * MyStack obj = new MyStack();  * obj.Push(x);  * int param_2 = obj.Pop();  * int param_3 = obj.Top();  * bool param_4 = obj.Empty();  */"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * Initialize your data structure here.  */ var MyStack = function() {      };  /**  * Push element x onto stack.   * @param {number} x  * @return {void}  */ MyStack.prototype.push = function(x) {      };  /**  * Removes the element on top of the stack and returns that element.  * @return {number}  */ MyStack.prototype.pop = function() {      };  /**  * Get the top element.  * @return {number}  */ MyStack.prototype.top = function() {      };  /**  * Returns whether the stack is empty.  * @return {boolean}  */ MyStack.prototype.empty = function() {      };  /**   * Your MyStack object will be instantiated and called as such:  * var obj = Object.create(MyStack).createNew()  * obj.push(x)  * var param_2 = obj.pop()  * var param_3 = obj.top()  * var param_4 = obj.empty()  */"}, {"text": "Ruby", "value": "ruby", "defaultCode": "class MyStack  =begin     Initialize your data structure here. =end     def initialize()              end   =begin     Push element x onto stack.     :type x: Integer     :rtype: Void =end     def push(x)              end   =begin     Removes the element on top of the stack and returns that element.     :rtype: Integer =end     def pop()              end   =begin     Get the top element.     :rtype: Integer =end     def top()              end   =begin     Returns whether the stack is empty.     :rtype: Boolean =end     def empty()              end   end  # Your MyStack object will be instantiated and called as such: # obj = MyStack.new() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.top() # param_4 = obj.empty()"}, {"text": "Go", "value": "golang", "defaultCode": "type MyStack struct {      }   /** Initialize your data structure here. */ func Constructor() MyStack {      }   /** Push element x onto stack. */ func (this *MyStack) Push(x int)  {      }   /** Removes the element on top of the stack and returns that element. */ func (this *MyStack) Pop() int {      }   /** Get the top element. */ func (this *MyStack) Top() int {      }   /** Returns whether the stack is empty. */ func (this *MyStack) Empty() bool {      }   /**  * Your MyStack object will be instantiated and called as such:  * obj := Constructor();  * obj.Push(x);  * param_2 := obj.Pop();  * param_3 := obj.Top();  * param_4 := obj.Empty();  */"}]
---SCRIPT_END---
