---CONTENT_BEGIN---

There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]


Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?


For example:
2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.



click to show more hints.

Hints:

This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.
Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.
Topological sort could also be done via BFS.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean canFinish(int numCourses, int[][] prerequisites) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def canFinish(self, numCourses, prerequisites):         '''         :type numCourses: int         :type prerequisites: List[List[int]]         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool canFinish(int numCourses, int** prerequisites, int prerequisitesRowSize, int prerequisitesColSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool CanFinish(int numCourses, int[,] prerequisites) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} numCourses  * @param {number[][]} prerequisites  * @return {boolean}  */ var canFinish = function(numCourses, prerequisites) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} num_courses # @param {Integer[][]} prerequisites # @return {Boolean} def can_finish(num_courses, prerequisites)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func canFinish(numCourses int, prerequisites [][]int) bool {      }", "text": "Go"}]
---SCRIPT_END---
