---CONTENT_BEGIN---
Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Note:

The given integer is guaranteed to fit within the range of a 32-bit signed integer.
You could assume no leading zero bit in the integerâs binary representation.



Example 1:

Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.



Example 2:

Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int findComplement(int num) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int findComplement(int num) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findComplement(self, num):         '''         :type num: int         :rtype: int         '''", "text": "Python"}, {"value": "c", "defaultCode": "int findComplement(int num) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int FindComplement(int num) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} num  * @return {number}  */ var findComplement = function(num) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} num # @return {Integer} def find_complement(num)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findComplement(_ num: Int) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findComplement(num int) int {      }", "text": "Go"}]
---SCRIPT_END---
