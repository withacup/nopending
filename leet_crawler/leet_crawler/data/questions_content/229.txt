---CONTENT_BEGIN---
Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times. The algorithm should run in linear time and in O(1) space.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<int> majorityElement(vector<int>& nums) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<Integer> majorityElement(int[] nums) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def majorityElement(self, nums):         '''         :type nums: List[int]         :rtype: List[int]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* majorityElement(int* nums, int numsSize, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<int> MajorityElement(int[] nums) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {number[]}  */ var majorityElement = function(nums) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Integer[]} def majority_element(nums)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func majorityElement(_ nums: [Int]) -> [Int] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func majorityElement(nums []int) []int {      }", "text": "Go"}]
---SCRIPT_END---
