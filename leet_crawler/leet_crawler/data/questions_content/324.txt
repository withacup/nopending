---CONTENT_BEGIN---

    Given an unsorted array nums, reorder it such that
    nums[0] < nums[1] > nums[2] < nums[3]....



    Example:
    (1) Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6]. 
    (2) Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].



    Note:
    You may assume all input has valid answer.



    Follow Up:
    Can you do it in O(n) time and/or in-place with O(1) extra space?


Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     void wiggleSort(vector<int>& nums) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public void wiggleSort(int[] nums) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def wiggleSort(self, nums):         '''         :type nums: List[int]         :rtype: void Do not return anything, modify nums in-place instead.         '''         "}, {"text": "C", "value": "c", "defaultCode": "void wiggleSort(int* nums, int numsSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public void WiggleSort(int[] nums) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {void} Do not return anything, modify nums in-place instead.  */ var wiggleSort = function(nums) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Void} Do not return anything, modify nums in-place instead. def wiggle_sort(nums)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func wiggleSort(_ nums: inout [Int]) {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func wiggleSort(nums []int)  {      }"}]
---SCRIPT_END---
