---CONTENT_BEGIN---
Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.


Note:
The number of people is less than 1,100.


Example

Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int[][] reconstructQueue(int[][] people) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def reconstructQueue(self, people):         '''         :type people: List[List[int]]         :rtype: List[List[int]]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int** reconstructQueue(int** people, int peopleRowSize, int peopleColSize, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int[,] ReconstructQueue(int[,] people) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[][]} people  * @return {number[][]}  */ var reconstructQueue = function(people) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[][]} people # @return {Integer[][]} def reconstruct_queue(people)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func reconstructQueue(_ people: [[Int]]) -> [[Int]] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func reconstructQueue(people [][]int) [][]int {      }"}]
---SCRIPT_END---
