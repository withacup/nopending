---CONTENT_BEGIN---
Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].


For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<int> searchRange(vector<int>& nums, int target) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int[] searchRange(int[] nums, int target) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def searchRange(self, nums, target):         '''         :type nums: List[int]         :type target: int         :rtype: List[int]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* searchRange(int* nums, int numsSize, int target, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int[] SearchRange(int[] nums, int target) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @param {number} target  * @return {number[]}  */ var searchRange = function(nums, target) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @param {Integer} target # @return {Integer[]} def search_range(nums, target)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func searchRange(_ nums: [Int], _ target: Int) -> [Int] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func searchRange(nums []int, target int) []int {      }", "text": "Go"}]
---SCRIPT_END---
