---CONTENT_BEGIN---

Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, twoâs complement method is used.


Note:

All letters in hexadecimal (a-f) must be in lowercase.
The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character '0'; otherwise, the first character in the hexadecimal string will not be the zero character.
The given number is guaranteed to fit within the range of a 32-bit signed integer.
You must not use any method provided by the library which converts/formats the number to hex directly.



Example 1:

Input:
26

Output:
"1a"



Example 2:

Input:
-1

Output:
"ffffffff"


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     string toHex(int num) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public String toHex(int num) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def toHex(self, num):         '''         :type num: int         :rtype: str         '''", "text": "Python"}, {"value": "c", "defaultCode": "char* toHex(int num) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public string ToHex(int num) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} num  * @return {string}  */ var toHex = function(num) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} num # @return {String} def to_hex(num)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func toHex(_ num: Int) -> String {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func toHex(num int) string {      }", "text": "Go"}]
---SCRIPT_END---
