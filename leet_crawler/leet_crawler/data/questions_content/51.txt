---CONTENT_BEGIN---
The n-queens puzzle is the problem of placing n queens on an nÃn chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<string>> solveNQueens(int n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<List<String>> solveNQueens(int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def solveNQueens(self, n):         '''         :type n: int         :rtype: List[List[str]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char*** solveNQueens(int n, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<IList<string>> SolveNQueens(int n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {string[][]}  */ var solveNQueens = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n # @return {String[][]} def solve_n_queens(n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func solveNQueens(_ n: Int) -> [[String]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func solveNQueens(n int) [][]string {      }", "text": "Go"}]
---SCRIPT_END---
