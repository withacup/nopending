---CONTENT_BEGIN---
Shuffle a set of numbers without duplicates.


Example:

// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     Solution(vector<int> nums) {              }          /** Resets the array to its original configuration and return it. */     vector<int> reset() {              }          /** Returns a random shuffling of the array. */     vector<int> shuffle() {              } };  /**  * Your Solution object will be instantiated and called as such:  * Solution obj = new Solution(nums);  * vector<int> param_1 = obj.reset();  * vector<int> param_2 = obj.shuffle();  */"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {      public Solution(int[] nums) {              }          /** Resets the array to its original configuration and return it. */     public int[] reset() {              }          /** Returns a random shuffling of the array. */     public int[] shuffle() {              } }  /**  * Your Solution object will be instantiated and called as such:  * Solution obj = new Solution(nums);  * int[] param_1 = obj.reset();  * int[] param_2 = obj.shuffle();  */"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):      def __init__(self, nums):         '''         :type nums: List[int]         '''               def reset(self):         '''         Resets the array to its original configuration and return it.         :rtype: List[int]         '''               def shuffle(self):         '''         Returns a random shuffling of the array.         :rtype: List[int]         '''            # Your Solution object will be instantiated and called as such: # obj = Solution(nums) # param_1 = obj.reset() # param_2 = obj.shuffle()"}, {"text": "C", "value": "c", "defaultCode": "typedef struct {      } Solution;  Solution* solutionCreate(int* nums, int size) {      }  /** Resets the array to its original configuration and return it. */ int* solutionReset(Solution* obj, int *returnSize) {      }  /** Returns a random shuffling of the array. */ int* solutionShuffle(Solution* obj, int *returnSize) {      }  void solutionFree(Solution* obj) {      }  /**  * Your Solution struct will be instantiated and called as such:  * struct Solution* obj = solutionCreate(nums, size);  * int* param_1 = solutionReset(obj);  * int* param_2 = solutionShuffle(obj);  * solutionFree(obj);  */"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {      public Solution(int[] nums) {              }          /** Resets the array to its original configuration and return it. */     public int[] Reset() {              }          /** Returns a random shuffling of the array. */     public int[] Shuffle() {              } }  /**  * Your Solution object will be instantiated and called as such:  * Solution obj = new Solution(nums);  * int[] param_1 = obj.Reset();  * int[] param_2 = obj.Shuffle();  */"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  */ var Solution = function(nums) {      };  /**  * Resets the array to its original configuration and return it.  * @return {number[]}  */ Solution.prototype.reset = function() {      };  /**  * Returns a random shuffling of the array.  * @return {number[]}  */ Solution.prototype.shuffle = function() {      };  /**   * Your Solution object will be instantiated and called as such:  * var obj = Object.create(Solution).createNew(nums)  * var param_1 = obj.reset()  * var param_2 = obj.shuffle()  */"}, {"text": "Ruby", "value": "ruby", "defaultCode": "class Solution  =begin     :type nums: Integer[] =end     def initialize(nums)              end   =begin     Resets the array to its original configuration and return it.     :rtype: Integer[] =end     def reset()              end   =begin     Returns a random shuffling of the array.     :rtype: Integer[] =end     def shuffle()              end   end  # Your Solution object will be instantiated and called as such: # obj = Solution.new(nums) # param_1 = obj.reset() # param_2 = obj.shuffle()"}, {"text": "Go", "value": "golang", "defaultCode": "type Solution struct {      }   func Constructor(nums []int) Solution {      }   /** Resets the array to its original configuration and return it. */ func (this *Solution) Reset() []int {      }   /** Returns a random shuffling of the array. */ func (this *Solution) Shuffle() []int {      }   /**  * Your Solution object will be instantiated and called as such:  * obj := Constructor(nums);  * param_1 := obj.Reset();  * param_2 := obj.Shuffle();  */"}]
---SCRIPT_END---
