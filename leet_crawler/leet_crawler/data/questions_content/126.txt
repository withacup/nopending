---CONTENT_BEGIN---

Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:


Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.



For example,


Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]


Return

  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]




Note:

Return an empty list if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.




UPDATE (2017/1/20):
The wordList parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def findLadders(self, beginWord, endWord, wordList):         '''         :type beginWord: str         :type endWord: str         :type wordList: List[str]         :rtype: List[List[str]]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ char*** findLadders(char* beginWord, char* endWord, char** wordList, int wordListSize, int** columnSizes, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<IList<string>> FindLadders(string beginWord, string endWord, IList<string> wordList) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} beginWord  * @param {string} endWord  * @param {string[]} wordList  * @return {string[][]}  */ var findLadders = function(beginWord, endWord, wordList) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} begin_word # @param {String} end_word # @param {String[]} word_list # @return {String[][]} def find_ladders(begin_word, end_word, word_list)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func findLadders(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> [[String]] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func findLadders(beginWord string, endWord string, wordList []string) [][]string {      }"}]
---SCRIPT_END---
