---CONTENT_BEGIN---
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 &le; x, y &lt; 231.


Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       â   â

The above arrows point to positions where the corresponding bits are different.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int hammingDistance(int x, int y) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int hammingDistance(int x, int y) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def hammingDistance(self, x, y):         '''         :type x: int         :type y: int         :rtype: int         '''"}, {"text": "C", "value": "c", "defaultCode": "int hammingDistance(int x, int y) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int HammingDistance(int x, int y) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} x  * @param {number} y  * @return {number}  */ var hammingDistance = function(x, y) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} x # @param {Integer} y # @return {Integer} def hamming_distance(x, y)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func hammingDistance(_ x: Int, _ y: Int) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func hammingDistance(x int, y int) int {      }"}]
---SCRIPT_END---
