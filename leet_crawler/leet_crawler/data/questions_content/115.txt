---CONTENT_BEGIN---

Given a string S and a string T, count the number of distinct subsequences of T in S.



A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).



Here is an example:
S = "rabbbit", T = "rabbit"


Return 3.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int numDistinct(string s, string t) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int numDistinct(String s, String t) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def numDistinct(self, s, t):         '''         :type s: str         :type t: str         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int numDistinct(char* s, char* t) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int NumDistinct(string s, string t) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} s  * @param {string} t  * @return {number}  */ var numDistinct = function(s, t) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} s # @param {String} t # @return {Integer} def num_distinct(s, t)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func numDistinct(_ s: String, _ t: String) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func numDistinct(s string, t string) int {      }"}]
---SCRIPT_END---
