---CONTENT_BEGIN---

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.



 Example 1:
Input:  k = 3,  n = 7
Output: 

[[1,2,4]]


 Example 2:
Input:  k = 3,  n = 9
Output: 

[[1,2,6], [1,3,5], [2,3,4]]



Credits:Special thanks to @mithmatt for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> combinationSum3(int k, int n) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> combinationSum3(int k, int n) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def combinationSum3(self, k, n):         '''         :type k: int         :type n: int         :rtype: List[List[int]]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** combinationSum3(int k, int n, int** columnSizes, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> CombinationSum3(int k, int n) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} k  * @param {number} n  * @return {number[][]}  */ var combinationSum3 = function(k, n) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} k # @param {Integer} n # @return {Integer[][]} def combination_sum3(k, n)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func combinationSum3(k int, n int) [][]int {      }"}]
---SCRIPT_END---
