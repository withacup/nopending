---CONTENT_BEGIN---

Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.




OJ's undirected graph serialization:


Nodes are labeled uniquely.


We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.




As an example, consider the serialized graph {0,1,2#1,2#2,2}.



The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.




Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/




---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * Definition for undirected graph.  * struct UndirectedGraphNode {  *     int label;  *     vector<UndirectedGraphNode *> neighbors;  *     UndirectedGraphNode(int x) : label(x) {};  * };  */ class Solution { public:     UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * Definition for undirected graph.  * class UndirectedGraphNode {  *     int label;  *     List<UndirectedGraphNode> neighbors;  *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }  * };  */ public class Solution {     public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# Definition for a undirected graph node # class UndirectedGraphNode: #     def __init__(self, x): #         self.label = x #         self.neighbors = []  class Solution:     # @param node, a undirected graph node     # @return a undirected graph node     def cloneGraph(self, node):         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * #define NEIGHBORS_MAX_SIZE 100  * struct UndirectedGraphNode {  *     int label;  *     struct UndirectedGraphNode *neighbors[NEIGHBORS_MAX_SIZE];  *     int neighborsCount;  * };  */ struct UndirectedGraphNode *cloneGraph(struct UndirectedGraphNode *graph) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * Definition for undirected graph.  * public class UndirectedGraphNode {  *     public int label;  *     public IList<UndirectedGraphNode> neighbors;  *     public UndirectedGraphNode(int x) { label = x; neighbors = new List<UndirectedGraphNode>(); }  * };  */ public class Solution {     public UndirectedGraphNode CloneGraph(UndirectedGraphNode node) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Definition for undirected graph.  * function UndirectedGraphNode(label) {  *     this.label = label;  *     this.neighbors = [];   // Array of UndirectedGraphNode  * }  */  /**  * @param {UndirectedGraphNode} graph  * @return {UndirectedGraphNode}  */ var cloneGraph = function(graph) {      };", "text": "JavaScript"}]
---SCRIPT_END---
