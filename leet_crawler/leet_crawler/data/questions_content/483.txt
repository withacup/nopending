---CONTENT_BEGIN---
For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.
Now given a string representing n, you should return the smallest good base of n in string format. 

Example 1:

Input: "13"
Output: "3"
Explanation: 13 base 3 is 111.



Example 2:

Input: "4681"
Output: "8"
Explanation: 4681 base 8 is 11111.



Example 3:

Input: "1000000000000000000"
Output: "999999999999999999"
Explanation: 1000000000000000000 base 999999999999999999 is 11.



Note:

The range of n is [3, 10^18].
The string representing n is always valid and will not have leading zeros.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     string smallestGoodBase(string n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public String smallestGoodBase(String n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def smallestGoodBase(self, n):         '''         :type n: str         :rtype: str         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "char* smallestGoodBase(char* n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public string SmallestGoodBase(string n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} n  * @return {string}  */ var smallestGoodBase = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} n # @return {String} def smallest_good_base(n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func smallestGoodBase(_ n: String) -> String {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func smallestGoodBase(n string) string {      }", "text": "Go"}]
---SCRIPT_END---
