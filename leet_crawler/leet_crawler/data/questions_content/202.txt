---CONTENT_BEGIN---
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example:&nbsp;19 is a happy number


12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1


Credits:Special thanks to @mithmatt and @ts for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool isHappy(int n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean isHappy(int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def isHappy(self, n):         '''         :type n: int         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool isHappy(int n) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool IsHappy(int n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {boolean}  */ var isHappy = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n # @return {Boolean} def is_happy(n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func isHappy(_ n: Int) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func isHappy(n int) bool {      }", "text": "Go"}]
---SCRIPT_END---
