---CONTENT_BEGIN---
Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.


Note:
Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.


Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.





The above image represents the elevation map [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] before the rain.




After the rain, water are trapped between the blocks. The total volume of water trapped is 4.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int trapRainWater(vector<vector<int>>& heightMap) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int trapRainWater(int[][] heightMap) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def trapRainWater(self, heightMap):         '''         :type heightMap: List[List[int]]         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int trapRainWater(int** heightMap, int heightMapRowSize, int heightMapColSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int TrapRainWater(int[,] heightMap) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[][]} heightMap  * @return {number}  */ var trapRainWater = function(heightMap) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[][]} height_map # @return {Integer} def trap_rain_water(height_map)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func trapRainWater(_ heightMap: [[Int]]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func trapRainWater(heightMap [][]int) int {      }"}]
---SCRIPT_END---
