---CONTENT_BEGIN---

Given a string s and a string t, check if s is subsequence of t.



You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).



A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).


Example 1:
s = "abc", t = "ahbgdc"


Return true.


Example 2:
s = "axc", t = "ahbgdc"


Return false.


Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?

Credits:Special thanks to @pbrother for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool isSubsequence(string s, string t) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean isSubsequence(String s, String t) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def isSubsequence(self, s, t):         '''         :type s: str         :type t: str         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool isSubsequence(char* s, char* t) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool IsSubsequence(string s, string t) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} s  * @param {string} t  * @return {boolean}  */ var isSubsequence = function(s, t) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} s # @param {String} t # @return {Boolean} def is_subsequence(s, t)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func isSubsequence(_ s: String, _ t: String) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func isSubsequence(s string, t string) bool {      }"}]
---SCRIPT_END---
