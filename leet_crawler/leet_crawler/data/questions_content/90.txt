---CONTENT_BEGIN---

Given a collection of integers that might contain duplicates, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.


For example,
If nums = [1,2,2], a solution is:



[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> subsetsWithDup(vector<int>& nums) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> subsetsWithDup(int[] nums) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def subsetsWithDup(self, nums):         '''         :type nums: List[int]         :rtype: List[List[int]]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** subsetsWithDup(int* nums, int numsSize, int** columnSizes, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> SubsetsWithDup(int[] nums) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {number[][]}  */ var subsetsWithDup = function(nums) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Integer[][]} def subsets_with_dup(nums)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func subsetsWithDup(_ nums: [Int]) -> [[Int]] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func subsetsWithDup(nums []int) [][]int {      }"}]
---SCRIPT_END---
