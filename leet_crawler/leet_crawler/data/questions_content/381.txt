---CONTENT_BEGIN---
Design a data structure that supports all following operations in average O(1) time.
Note: Duplicate elements are allowed.


insert(val): Inserts an item val to the collection.
remove(val): Removes an item val from the collection if present.
getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.



Example:

// Init an empty collection.
RandomizedCollection collection = new RandomizedCollection();

// Inserts 1 to the collection. Returns true as the collection did not contain 1.
collection.insert(1);

// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
collection.insert(1);

// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
collection.insert(2);

// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
collection.getRandom();

// Removes 1 from the collection, returns true. Collection now contains [1,2].
collection.remove(1);

// getRandom should return 1 and 2 both equally likely.
collection.getRandom();


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class RandomizedCollection { public:     /** Initialize your data structure here. */     RandomizedCollection() {              }          /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */     bool insert(int val) {              }          /** Removes a value from the collection. Returns true if the collection contained the specified element. */     bool remove(int val) {              }          /** Get a random element from the collection. */     int getRandom() {              } };  /**  * Your RandomizedCollection object will be instantiated and called as such:  * RandomizedCollection obj = new RandomizedCollection();  * bool param_1 = obj.insert(val);  * bool param_2 = obj.remove(val);  * int param_3 = obj.getRandom();  */"}, {"text": "Java", "value": "java", "defaultCode": "public class RandomizedCollection {      /** Initialize your data structure here. */     public RandomizedCollection() {              }          /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */     public boolean insert(int val) {              }          /** Removes a value from the collection. Returns true if the collection contained the specified element. */     public boolean remove(int val) {              }          /** Get a random element from the collection. */     public int getRandom() {              } }  /**  * Your RandomizedCollection object will be instantiated and called as such:  * RandomizedCollection obj = new RandomizedCollection();  * boolean param_1 = obj.insert(val);  * boolean param_2 = obj.remove(val);  * int param_3 = obj.getRandom();  */"}, {"text": "Python", "value": "python", "defaultCode": "class RandomizedCollection(object):      def __init__(self):         '''         Initialize your data structure here.         '''               def insert(self, val):         '''         Inserts a value to the collection. Returns true if the collection did not already contain the specified element.         :type val: int         :rtype: bool         '''               def remove(self, val):         '''         Removes a value from the collection. Returns true if the collection contained the specified element.         :type val: int         :rtype: bool         '''               def getRandom(self):         '''         Get a random element from the collection.         :rtype: int         '''            # Your RandomizedCollection object will be instantiated and called as such: # obj = RandomizedCollection() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.getRandom()"}, {"text": "C", "value": "c", "defaultCode": "typedef struct {      } RandomizedCollection;  /** Initialize your data structure here. */ RandomizedCollection* randomizedCollectionCreate() {      }  /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */ bool randomizedCollectionInsert(RandomizedCollection* obj, int val) {      }  /** Removes a value from the collection. Returns true if the collection contained the specified element. */ bool randomizedCollectionRemove(RandomizedCollection* obj, int val) {      }  /** Get a random element from the collection. */ int randomizedCollectionGetRandom(RandomizedCollection* obj) {      }  void randomizedCollectionFree(RandomizedCollection* obj) {      }  /**  * Your RandomizedCollection struct will be instantiated and called as such:  * struct RandomizedCollection* obj = randomizedCollectionCreate();  * bool param_1 = randomizedCollectionInsert(obj, val);  * bool param_2 = randomizedCollectionRemove(obj, val);  * int param_3 = randomizedCollectionGetRandom(obj);  * randomizedCollectionFree(obj);  */"}, {"text": "C#", "value": "csharp", "defaultCode": "public class RandomizedCollection {      /** Initialize your data structure here. */     public RandomizedCollection() {              }          /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */     public bool Insert(int val) {              }          /** Removes a value from the collection. Returns true if the collection contained the specified element. */     public bool Remove(int val) {              }          /** Get a random element from the collection. */     public int GetRandom() {              } }  /**  * Your RandomizedCollection object will be instantiated and called as such:  * RandomizedCollection obj = new RandomizedCollection();  * bool param_1 = obj.Insert(val);  * bool param_2 = obj.Remove(val);  * int param_3 = obj.GetRandom();  */"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * Initialize your data structure here.  */ var RandomizedCollection = function() {      };  /**  * Inserts a value to the collection. Returns true if the collection did not already contain the specified element.   * @param {number} val  * @return {boolean}  */ RandomizedCollection.prototype.insert = function(val) {      };  /**  * Removes a value from the collection. Returns true if the collection contained the specified element.   * @param {number} val  * @return {boolean}  */ RandomizedCollection.prototype.remove = function(val) {      };  /**  * Get a random element from the collection.  * @return {number}  */ RandomizedCollection.prototype.getRandom = function() {      };  /**   * Your RandomizedCollection object will be instantiated and called as such:  * var obj = Object.create(RandomizedCollection).createNew()  * var param_1 = obj.insert(val)  * var param_2 = obj.remove(val)  * var param_3 = obj.getRandom()  */"}, {"text": "Ruby", "value": "ruby", "defaultCode": "class RandomizedCollection  =begin     Initialize your data structure here. =end     def initialize()              end   =begin     Inserts a value to the collection. Returns true if the collection did not already contain the specified element.     :type val: Integer     :rtype: Boolean =end     def insert(val)              end   =begin     Removes a value from the collection. Returns true if the collection contained the specified element.     :type val: Integer     :rtype: Boolean =end     def remove(val)              end   =begin     Get a random element from the collection.     :rtype: Integer =end     def get_random()              end   end  # Your RandomizedCollection object will be instantiated and called as such: # obj = RandomizedCollection.new() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.get_random()"}, {"text": "Go", "value": "golang", "defaultCode": "type RandomizedCollection struct {      }   /** Initialize your data structure here. */ func Constructor() RandomizedCollection {      }   /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */ func (this *RandomizedCollection) Insert(val int) bool {      }   /** Removes a value from the collection. Returns true if the collection contained the specified element. */ func (this *RandomizedCollection) Remove(val int) bool {      }   /** Get a random element from the collection. */ func (this *RandomizedCollection) GetRandom() int {      }   /**  * Your RandomizedCollection object will be instantiated and called as such:  * obj := Constructor();  * param_1 := obj.Insert(val);  * param_2 := obj.Remove(val);  * param_3 := obj.GetRandom();  */"}]
---SCRIPT_END---
