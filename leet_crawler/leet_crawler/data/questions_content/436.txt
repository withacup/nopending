---CONTENT_BEGIN---

Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the "right" of i.



For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.


Note:

You may assume the interval's end point is always bigger than its start point.
You may assume none of these intervals have the same start point.



Example 1:

Input: [ [1,2] ]

Output: [-1]

Explanation: There is only one interval in the collection, so it outputs -1.



Example 2:

Input: [ [3,4], [2,3], [1,2] ]

Output: [-1, 0, 1]

Explanation: There is no satisfied "right" interval for [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point;
For [1,2], the interval [2,3] has minimum-"right" start point.



Example 3:

Input: [ [1,4], [2,3], [3,4] ]

Output: [-1, 2, -1]

Explanation: There is no satisfied "right" interval for [1,4] and [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  *     Interval() : start(0), end(0) {}  *     Interval(int s, int e) : start(s), end(e) {}  * };  */ class Solution { public:     vector<int> findRightInterval(vector<Interval>& intervals) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     int start;  *     int end;  *     Interval() { start = 0; end = 0; }  *     Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public int[] findRightInterval(Interval[] intervals) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# Definition for an interval. # class Interval(object): #     def __init__(self, s=0, e=0): #         self.start = s #         self.end = e  class Solution(object):     def findRightInterval(self, intervals):         '''         :type intervals: List[Interval]         :rtype: List[int]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  * };  */ /**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* findRightInterval(struct Interval* intervals, int intervalsSize, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     public int start;  *     public int end;  *     public Interval() { start = 0; end = 0; }  *     public Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public int[] FindRightInterval(Interval[] intervals) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Definition for an interval.  * function Interval(start, end) {  *     this.start = start;  *     this.end = end;  * }  */ /**  * @param {Interval[]} intervals  * @return {number[]}  */ var findRightInterval = function(intervals) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# Definition for an interval. # class Interval #     attr_accessor :start, :end #     def initialize(s=0, e=0) #         @start = s #         @end = e #     end # end  # @param {Interval[]} intervals # @return {Integer[]} def find_right_interval(intervals)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *   public var start: Int  *   public var end: Int  *   public init(_ start: Int, _ end: Int) {  *     self.start = start  *     self.end = end  *   }  * }  */ class Solution {     func findRightInterval(_ intervals: [Interval]) -> [Int] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "/**  * Definition for an interval.  * type Interval struct {  *       Start int  *       End   int  * }  */ func findRightInterval(intervals []Interval) []int {      }", "text": "Go"}]
---SCRIPT_END---
