---CONTENT_BEGIN---
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. 

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.


For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.



Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


Credits:Special thanks to @Louis1992 for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "/**  * Definition for a binary tree node.  * struct TreeNode {  *     int val;  *     TreeNode *left;  *     TreeNode *right;  *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}  * };  */ class Codec { public:      // Encodes a tree to a single string.     string serialize(TreeNode* root) {              }      // Decodes your encoded data to tree.     TreeNode* deserialize(string data) {              } };  // Your Codec object will be instantiated and called as such: // Codec codec; // codec.deserialize(codec.serialize(root));"}, {"text": "Java", "value": "java", "defaultCode": "/**  * Definition for a binary tree node.  * public class TreeNode {  *     int val;  *     TreeNode left;  *     TreeNode right;  *     TreeNode(int x) { val = x; }  * }  */ public class Codec {      // Encodes a tree to a single string.     public String serialize(TreeNode root) {              }      // Decodes your encoded data to tree.     public TreeNode deserialize(String data) {              } }  // Your Codec object will be instantiated and called as such: // Codec codec = new Codec(); // codec.deserialize(codec.serialize(root));"}, {"text": "Python", "value": "python", "defaultCode": "# Definition for a binary tree node. # class TreeNode(object): #     def __init__(self, x): #         self.val = x #         self.left = None #         self.right = None  class Codec:      def serialize(self, root):         '''Encodes a tree to a single string.                  :type root: TreeNode         :rtype: str         '''               def deserialize(self, data):         '''Decodes your encoded data to tree.                  :type data: str         :rtype: TreeNode         '''           # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.deserialize(codec.serialize(root))"}, {"text": "C", "value": "c", "defaultCode": "/**  * Definition for a binary tree node.  * struct TreeNode {  *     int val;  *     struct TreeNode *left;  *     struct TreeNode *right;  * };  */ /** Encodes a tree to a single string. */ char* serialize(struct TreeNode* root) {      }  /** Decodes your encoded data to tree. */ struct TreeNode* deserialize(char* data) {      }  // Your functions will be called as such: // char* data = serialize(root); // deserialize(data);"}, {"text": "C#", "value": "csharp", "defaultCode": "/**  * Definition for a binary tree node.  * public class TreeNode {  *     public int val;  *     public TreeNode left;  *     public TreeNode right;  *     public TreeNode(int x) { val = x; }  * }  */ public class Codec {      // Encodes a tree to a single string.     public string serialize(TreeNode root) {              }      // Decodes your encoded data to tree.     public TreeNode deserialize(string data) {              } }  // Your Codec object will be instantiated and called as such: // Codec codec = new Codec(); // codec.deserialize(codec.serialize(root));"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * Definition for a binary tree node.  * function TreeNode(val) {  *     this.val = val;  *     this.left = this.right = null;  * }  */  /**  * Encodes a tree to a single string.  *  * @param {TreeNode} root  * @return {string}  */ var serialize = function(root) {      };  /**  * Decodes your encoded data to tree.  *  * @param {string} data  * @return {TreeNode}  */ var deserialize = function(data) {      };  /**  * Your functions will be called as such:  * deserialize(serialize(root));  */"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# Definition for a binary tree node. # class TreeNode #     attr_accessor :val, :left, :right #     def initialize(val) #         @val = val #         @left, @right = nil, nil #     end # end  # Encodes a tree to a single string. # # @param {TreeNode} root # @return {string} def serialize(root)      end  # Decodes your encoded data to tree. # # @param {string} data # @return {TreeNode} def deserialize(data)      end   # Your functions will be called as such: # deserialize(serialize(data))"}]
---SCRIPT_END---
