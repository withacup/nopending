---CONTENT_BEGIN---
Given numRows, generate the first numRows of Pascal's triangle.


For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> generate(int numRows) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> generate(int numRows) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def generate(self, numRows):         '''         :type numRows: int         :rtype: List[List[int]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** generate(int numRows, int** columnSizes) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> Generate(int numRows) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} numRows  * @return {number[][]}  */ var generate = function(numRows) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} num_rows # @return {Integer[][]} def generate(num_rows)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func generate(_ numRows: Int) -> [[Int]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func generate(numRows int) [][]int {      }", "text": "Go"}]
---SCRIPT_END---
