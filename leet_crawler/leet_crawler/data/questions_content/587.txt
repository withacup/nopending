---CONTENT_BEGIN---
There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.

Example 1:

Input: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
Output: [[1,1],[2,0],[4,2],[3,3],[2,4]]
Explanation:




Example 2:

Input: [[1,2],[2,2],[4,2]]
Output: [[1,2],[2,2],[4,2]]
Explanation:

Even you only have trees in a line, you need to use rope to enclose them. 



 Note: 

All trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.
All input integers will range from 0 to 100. 
The garden has at least one tree. 
All coordinates are distinct. 
Input points have NO order. No order required for output.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "/**  * Definition for a point.  * struct Point {  *     int x;  *     int y;  *     Point() : x(0), y(0) {}  *     Point(int a, int b) : x(a), y(b) {}  * };  */ class Solution { public:     vector<Point> outerTrees(vector<Point>& points) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "/**  * Definition for a point.  * class Point {  *     int x;  *     int y;  *     Point() { x = 0; y = 0; }  *     Point(int a, int b) { x = a; y = b; }  * }  */ public class Solution {     public List<Point> outerTrees(Point[] points) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "# Definition for a point. # class Point(object): #     def __init__(self, a=0, b=0): #         self.x = a #         self.y = b  class Solution(object):     def outerTrees(self, points):         '''         :type points: List[Point]         :rtype: List[Point]         '''"}, {"text": "Python3", "value": "python3", "defaultCode": "class Solution:     def outerTrees(self, points):         '''         :type points: List[Point]         :rtype: List[Point]         '''"}, {"text": "C", "value": "c", "defaultCode": "/**  * Definition for a point.  * struct Point {  *     int x;  *     int y;  * }  */ /**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ struct Point* outerTrees(struct Point* points, int pointsSize, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "/**  * Definition for a point.  * public class Point {  *     public int x;  *     public int y;  *     public Point() { x = 0; y = 0; }  *     public Point(int a, int b) { x = a; y = b; }  * }  */ public class Solution {     public IList<Point> OuterTrees(Point[] points) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * Definition for a point.  * function Point(x, y) {  *     this.x = x;  *     this.y = y;  * }  */ /**  * @param {Point[]} points  * @return {Point[]}  */ var outerTrees = function(points) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# Definition for a point. # class Point #     attr_accessor :x, :y #     def initialize(x=0, y=0) #         @x = x #         @y = y #     end # end  # @param {Point[]} points # @return {Point[]} def outer_trees(points)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "/**  * Definition for a point.  * public class Point {  *   public var x: Int  *   public var y: Int  *   public init(_ x: Int, _ y: Int) {  *     self.x = x  *     self.y = y  *   }  * }  */ class Solution {     func outerTrees(_ points: [Point]) -> [Point] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "/**  * Definition for a point.  * type Point struct {  *     X int  *     Y int  * }  */ func outerTrees(points []Point) []Point {      }"}]
---SCRIPT_END---
