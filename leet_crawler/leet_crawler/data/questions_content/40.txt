---CONTENT_BEGIN---

Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.


Each number in C may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.




For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 

[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> combinationSum2(int[] candidates, int target) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def combinationSum2(self, candidates, target):         '''         :type candidates: List[int]         :type target: int         :rtype: List[List[int]]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** combinationSum2(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> CombinationSum2(int[] candidates, int target) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} candidates  * @param {number} target  * @return {number[][]}  */ var combinationSum2 = function(candidates, target) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} candidates # @param {Integer} target # @return {Integer[][]} def combination_sum2(candidates, target)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func combinationSum2(candidates []int, target int) [][]int {      }"}]
---SCRIPT_END---
