---CONTENT_BEGIN---
Given an integer matrix, find the length of the longest increasing path.


From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).


Example 1:

nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]




Return 4

The longest increasing path is [1, 2, 6, 9].


Example 2:

nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]




Return 4

The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int longestIncreasingPath(vector<vector<int>>& matrix) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int longestIncreasingPath(int[][] matrix) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def longestIncreasingPath(self, matrix):         '''         :type matrix: List[List[int]]         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int longestIncreasingPath(int** matrix, int matrixRowSize, int matrixColSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int LongestIncreasingPath(int[,] matrix) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[][]} matrix  * @return {number}  */ var longestIncreasingPath = function(matrix) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[][]} matrix # @return {Integer} def longest_increasing_path(matrix)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func longestIncreasingPath(_ matrix: [[Int]]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func longestIncreasingPath(matrix [][]int) int {      }"}]
---SCRIPT_END---
