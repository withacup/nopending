---CONTENT_BEGIN---

Given a 2D board and a word, find if the word exists in the grid.


The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.



For example,
Given board = 

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]


word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool exist(vector<vector<char>>& board, string word) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean exist(char[][] board, String word) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def exist(self, board, word):         '''         :type board: List[List[str]]         :type word: str         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool exist(char** board, int boardRowSize, int boardColSize, char* word) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool Exist(char[,] board, string word) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {character[][]} board  * @param {string} word  * @return {boolean}  */ var exist = function(board, word) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Character[][]} board # @param {String} word # @return {Boolean} def exist(board, word)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func exist(_ board: [[Character]], _ word: String) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func exist(board [][]byte, word string) bool {      }"}]
---SCRIPT_END---
