---CONTENT_BEGIN---
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.



Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.



Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     string frequencySort(string s) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public String frequencySort(String s) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def frequencySort(self, s):         '''         :type s: str         :rtype: str         '''         "}, {"text": "C", "value": "c", "defaultCode": "char* frequencySort(char* s) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public string FrequencySort(string s) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {string}  */ var frequencySort = function(s) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} s # @return {String} def frequency_sort(s)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func frequencySort(_ s: String) -> String {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func frequencySort(s string) string {      }"}]
---SCRIPT_END---
