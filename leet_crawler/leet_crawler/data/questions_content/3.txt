---CONTENT_BEGIN---
Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int lengthOfLongestSubstring(string s) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int lengthOfLongestSubstring(String s) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def lengthOfLongestSubstring(self, s):         '''         :type s: str         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int lengthOfLongestSubstring(char* s) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int LengthOfLongestSubstring(string s) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {number}  */ var lengthOfLongestSubstring = function(s) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s # @return {Integer} def length_of_longest_substring(s)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func lengthOfLongestSubstring(_ s: String) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func lengthOfLongestSubstring(s string) int {      }", "text": "Go"}]
---SCRIPT_END---
