---CONTENT_BEGIN---
Note: This is a companion problem to the System Design problem: Design TinyURL.

TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk.

Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:      // Encodes a URL to a shortened URL.     string encode(string longUrl) {              }      // Decodes a shortened URL to its original URL.     string decode(string shortUrl) {              } };  // Your Solution object will be instantiated and called as such: // Solution solution; // solution.decode(solution.encode(url));", "text": "C++"}, {"value": "java", "defaultCode": "public class Codec {      // Encodes a URL to a shortened URL.     public String encode(String longUrl) {              }      // Decodes a shortened URL to its original URL.     public String decode(String shortUrl) {              } }  // Your Codec object will be instantiated and called as such: // Codec codec = new Codec(); // codec.decode(codec.encode(url));", "text": "Java"}, {"value": "python", "defaultCode": "class Codec:      def encode(self, longUrl):         '''Encodes a URL to a shortened URL.                  :type longUrl: str         :rtype: str         '''               def decode(self, shortUrl):         '''Decodes a shortened URL to its original URL.                  :type shortUrl: str         :rtype: str         '''           # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.decode(codec.encode(url))", "text": "Python"}, {"value": "c", "defaultCode": "/** Encodes a URL to a shortened URL. */ char* encode(char* longUrl) {      }  /** Decodes a shortened URL to its original URL. */ char* decode(char* shortUrl) {      }  // Your functions will be called as such: // char* s = encode(s); // decode(s);", "text": "C"}, {"value": "csharp", "defaultCode": "public class Codec {      // Encodes a URL to a shortened URL     public string encode(string longUrl) {              }      // Decodes a shortened URL to its original URL.     public string decode(string shortUrl) {              } }  // Your Codec object will be instantiated and called as such: // Codec codec = new Codec(); // codec.decode(codec.encode(url));", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Encodes a URL to a shortened URL.  *  * @param {string} longUrl  * @return {string}  */ var encode = function(longUrl) {      };  /**  * Decodes a shortened URL to its original URL.  *  * @param {string} shortUrl  * @return {string}  */ var decode = function(shortUrl) {      };  /**  * Your functions will be called as such:  * decode(encode(url));  */", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# Encodes a URL to a shortened URL. # # @param {string} longUrl # @return {string} def encode(longUrl)      end  # Decodes a shortened URL to its original URL. # # @param {string} shortUrl # @return {string} def decode(shortUrl)      end   # Your functions will be called as such: # decode(encode(url))", "text": "Ruby"}]
---SCRIPT_END---
