---CONTENT_BEGIN---

Given a string s, partition s such that every substring of the partition is a palindrome.


Return the minimum cuts needed for a palindrome partitioning of s.


For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int minCut(string s) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int minCut(String s) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def minCut(self, s):         '''         :type s: str         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int minCut(char* s) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int MinCut(string s) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {number}  */ var minCut = function(s) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} s # @return {Integer} def min_cut(s)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func minCut(_ s: String) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func minCut(s string) int {      }"}]
---SCRIPT_END---
