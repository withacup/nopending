---CONTENT_BEGIN---

Given two arrays, write a function to compute their intersection.


Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].


Note:

Each element in the result must be unique.
The result can be in any order.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int[] intersection(int[] nums1, int[] nums2) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def intersection(self, nums1, nums2):         '''         :type nums1: List[int]         :type nums2: List[int]         :rtype: List[int]         '''", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int[] Intersection(int[] nums1, int[] nums2) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums1  * @param {number[]} nums2  * @return {number[]}  */ var intersection = function(nums1, nums2) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums1 # @param {Integer[]} nums2 # @return {Integer[]} def intersection(nums1, nums2)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func intersection(nums1 []int, nums2 []int) []int {      }", "text": "Go"}]
---SCRIPT_END---
