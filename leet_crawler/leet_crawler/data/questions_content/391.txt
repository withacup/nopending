---CONTENT_BEGIN---

Given N axis-aligned rectangles where N > 0, determine if they all together form an exact cover of a rectangular region.



Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).



Example 1:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [3,2,4,4],
  [1,3,2,4],
  [2,3,3,4]
]

Return true. All 5 rectangles together form an exact cover of a rectangular region.






Example 2:

rectangles = [
  [1,1,2,3],
  [1,3,2,4],
  [3,1,4,2],
  [3,2,4,4]
]

Return false. Because there is a gap between the two rectangular regions.






Example 3:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [3,2,4,4]
]

Return false. Because there is a gap in the top center.






Example 4:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [2,2,4,4]
]

Return false. Because two of the rectangles overlap with each other.




---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool isRectangleCover(vector<vector<int>>& rectangles) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean isRectangleCover(int[][] rectangles) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def isRectangleCover(self, rectangles):         '''         :type rectangles: List[List[int]]         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool isRectangleCover(int** rectangles, int rectanglesRowSize, int rectanglesColSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool IsRectangleCover(int[,] rectangles) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[][]} rectangles  * @return {boolean}  */ var isRectangleCover = function(rectangles) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[][]} rectangles # @return {Boolean} def is_rectangle_cover(rectangles)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func isRectangleCover(_ rectangles: [[Int]]) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func isRectangleCover(rectangles [][]int) bool {      }", "text": "Go"}]
---SCRIPT_END---
