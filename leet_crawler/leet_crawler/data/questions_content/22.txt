---CONTENT_BEGIN---

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.



For example, given n = 3, a solution set is:


[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<string> generateParenthesis(int n) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<String> generateParenthesis(int n) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def generateParenthesis(self, n):         '''         :type n: int         :rtype: List[str]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** generateParenthesis(int n, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<string> GenerateParenthesis(int n) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {string[]}  */ var generateParenthesis = function(n) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} n # @return {String[]} def generate_parenthesis(n)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func generateParenthesis(_ n: Int) -> [String] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func generateParenthesis(n int) []string {      }", "text": "Go"}]
---SCRIPT_END---
