---CONTENT_BEGIN---
Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces  .

You may assume that the given expression is always valid.

Some examples:

"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23




Note: Do not use the eval built-in library function.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int calculate(string s) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int calculate(String s) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def calculate(self, s):         '''         :type s: str         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int calculate(char* s) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int Calculate(string s) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {number}  */ var calculate = function(s) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s # @return {Integer} def calculate(s)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func calculate(_ s: String) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func calculate(s string) int {      }", "text": "Go"}]
---SCRIPT_END---
