---CONTENT_BEGIN---
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     ListNode *next;  *     ListNode(int x) : val(x), next(NULL) {}  * };  */ class Solution { public:     ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     int val;  *     ListNode next;  *     ListNode(int x) { val = x; }  * }  */ public class Solution {     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "# Definition for singly-linked list. # class ListNode(object): #     def __init__(self, x): #         self.val = x #         self.next = None  class Solution(object):     def mergeTwoLists(self, l1, l2):         '''         :type l1: ListNode         :type l2: ListNode         :rtype: ListNode         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     struct ListNode *next;  * };  */ struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     public int val;  *     public ListNode next;  *     public ListNode(int x) { val = x; }  * }  */ public class Solution {     public ListNode MergeTwoLists(ListNode l1, ListNode l2) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * Definition for singly-linked list.  * function ListNode(val) {  *     this.val = val;  *     this.next = null;  * }  */ /**  * @param {ListNode} l1  * @param {ListNode} l2  * @return {ListNode}  */ var mergeTwoLists = function(l1, l2) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# Definition for singly-linked list. # class ListNode #     attr_accessor :val, :next #     def initialize(val) #         @val = val #         @next = nil #     end # end  # @param {ListNode} l1 # @param {ListNode} l2 # @return {ListNode} def merge_two_lists(l1, l2)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "/**  * Definition for singly-linked list.  * public class ListNode {  *     public var val: Int  *     public var next: ListNode?  *     public init(_ val: Int) {  *         self.val = val  *         self.next = nil  *     }  * }  */ class Solution {     func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "/**  * Definition for singly-linked list.  * type ListNode struct {  *     Val int  *     Next *ListNode  * }  */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {      }"}]
---SCRIPT_END---
