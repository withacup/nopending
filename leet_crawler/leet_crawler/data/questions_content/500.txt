---CONTENT_BEGIN---
Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below. 







Example 1:

Input: ["Hello", "Alaska", "Dad", "Peace"]
Output: ["Alaska", "Dad"]



Note:

You may use one character in the keyboard more than once.
You may assume the input string will only contain letters of alphabet.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<string> findWords(vector<string>& words) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public String[] findWords(String[] words) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findWords(self, words):         '''         :type words: List[str]         :rtype: List[str]         '''", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** findWords(char** words, int wordsSize, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public string[] FindWords(string[] words) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string[]} words  * @return {string[]}  */ var findWords = function(words) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String[]} words # @return {String[]} def find_words(words)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findWords(_ words: [String]) -> [String] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findWords(words []string) []string {      }", "text": "Go"}]
---SCRIPT_END---
