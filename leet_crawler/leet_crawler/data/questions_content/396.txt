---CONTENT_BEGIN---

Given an array of integers A and let n to be its length.



Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a "rotation function" F on A as follow:



F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].

Calculate the maximum value of F(0), F(1), ..., F(n-1). 


Note:
n is guaranteed to be less than 105.


Example:

A = [4, 3, 2, 6]

F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int maxRotateFunction(vector<int>& A) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int maxRotateFunction(int[] A) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def maxRotateFunction(self, A):         '''         :type A: List[int]         :rtype: int         '''"}, {"text": "C", "value": "c", "defaultCode": "int maxRotateFunction(int* A, int ASize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int MaxRotateFunction(int[] A) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} A  * @return {number}  */ var maxRotateFunction = function(A) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} a # @return {Integer} def max_rotate_function(a)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func maxRotateFunction(_ A: [Int]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func maxRotateFunction(A []int) int {      }"}]
---SCRIPT_END---
