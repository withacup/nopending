---CONTENT_BEGIN---
Given a non negative integer number num. For every numbers i in the range 0 &le; i &le; num calculate the number of 1's in their binary representation and return them as an array.


Example:
For num = 5 you should return [0,1,1,2,1,2].


Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount  in c++ or in any other language.



Credits:Special thanks to @ syedee  for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<int> countBits(int num) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int[] countBits(int num) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def countBits(self, num):         '''         :type num: int         :rtype: List[int]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int* countBits(int num, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int[] CountBits(int num) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} num  * @return {number[]}  */ var countBits = function(num) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} num # @return {Integer[]} def count_bits(num)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func countBits(_ num: Int) -> [Int] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func countBits(num int) []int {      }"}]
---SCRIPT_END---
