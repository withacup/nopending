---CONTENT_BEGIN---

You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k. 


Define a pair (u,v) which consists of one element from the first array and one element from the second array.

Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.


Example 1:

Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3

Return: [1,2],[1,4],[1,6]

The first 3 pairs are returned from the sequence:
[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]



Example 2:

Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2

Return: [1,1],[1,1]

The first 2 pairs are returned from the sequence:
[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]



Example 3:

Given nums1 = [1,2], nums2 = [3],  k = 3 

Return: [1,3],[2,3]

All possible pairs are returned from the sequence:
[1,3],[2,3]



Credits:Special thanks to @elmirap and @StefanPochmann for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def kSmallestPairs(self, nums1, nums2, k):         '''         :type nums1: List[int]         :type nums2: List[int]         :type k: int         :rtype: List[List[int]]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** kSmallestPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int** columnSizes, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<int[]> KSmallestPairs(int[] nums1, int[] nums2, int k) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums1  * @param {number[]} nums2  * @param {number} k  * @return {number[][]}  */ var kSmallestPairs = function(nums1, nums2, k) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums1 # @param {Integer[]} nums2 # @param {Integer} k # @return {Integer[][]} def k_smallest_pairs(nums1, nums2, k)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func kSmallestPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [[Int]] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func kSmallestPairs(nums1 []int, nums2 []int, k int) [][]int {      }"}]
---SCRIPT_END---
