---CONTENT_BEGIN---

Implement a trie with insert, search, and startsWith methods.



Note:
You may assume that all inputs are consist of lowercase letters a-z.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Trie { public:     /** Initialize your data structure here. */     Trie() {              }          /** Inserts a word into the trie. */     void insert(string word) {              }          /** Returns if the word is in the trie. */     bool search(string word) {              }          /** Returns if there is any word in the trie that starts with the given prefix. */     bool startsWith(string prefix) {              } };  /**  * Your Trie object will be instantiated and called as such:  * Trie obj = new Trie();  * obj.insert(word);  * bool param_2 = obj.search(word);  * bool param_3 = obj.startsWith(prefix);  */", "text": "C++"}, {"value": "java", "defaultCode": "public class Trie {      /** Initialize your data structure here. */     public Trie() {              }          /** Inserts a word into the trie. */     public void insert(String word) {              }          /** Returns if the word is in the trie. */     public boolean search(String word) {              }          /** Returns if there is any word in the trie that starts with the given prefix. */     public boolean startsWith(String prefix) {              } }  /**  * Your Trie object will be instantiated and called as such:  * Trie obj = new Trie();  * obj.insert(word);  * boolean param_2 = obj.search(word);  * boolean param_3 = obj.startsWith(prefix);  */", "text": "Java"}, {"value": "python", "defaultCode": "class Trie(object):      def __init__(self):         '''         Initialize your data structure here.         '''               def insert(self, word):         '''         Inserts a word into the trie.         :type word: str         :rtype: void         '''               def search(self, word):         '''         Returns if the word is in the trie.         :type word: str         :rtype: bool         '''               def startsWith(self, prefix):         '''         Returns if there is any word in the trie that starts with the given prefix.         :type prefix: str         :rtype: bool         '''            # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.startsWith(prefix)", "text": "Python"}, {"value": "c", "defaultCode": "typedef struct {      } Trie;  /** Initialize your data structure here. */ Trie* trieCreate() {      }  /** Inserts a word into the trie. */ void trieInsert(Trie* obj, char* word) {      }  /** Returns if the word is in the trie. */ bool trieSearch(Trie* obj, char* word) {      }  /** Returns if there is any word in the trie that starts with the given prefix. */ bool trieStartsWith(Trie* obj, char* prefix) {      }  void trieFree(Trie* obj) {      }  /**  * Your Trie struct will be instantiated and called as such:  * struct Trie* obj = trieCreate();  * trieInsert(obj, word);  * bool param_2 = trieSearch(obj, word);  * bool param_3 = trieStartsWith(obj, prefix);  * trieFree(obj);  */", "text": "C"}, {"value": "csharp", "defaultCode": "public class Trie {      /** Initialize your data structure here. */     public Trie() {              }          /** Inserts a word into the trie. */     public void Insert(string word) {              }          /** Returns if the word is in the trie. */     public bool Search(string word) {              }          /** Returns if there is any word in the trie that starts with the given prefix. */     public bool StartsWith(string prefix) {              } }  /**  * Your Trie object will be instantiated and called as such:  * Trie obj = new Trie();  * obj.Insert(word);  * bool param_2 = obj.Search(word);  * bool param_3 = obj.StartsWith(prefix);  */", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Initialize your data structure here.  */ var Trie = function() {      };  /**  * Inserts a word into the trie.   * @param {string} word  * @return {void}  */ Trie.prototype.insert = function(word) {      };  /**  * Returns if the word is in the trie.   * @param {string} word  * @return {boolean}  */ Trie.prototype.search = function(word) {      };  /**  * Returns if there is any word in the trie that starts with the given prefix.   * @param {string} prefix  * @return {boolean}  */ Trie.prototype.startsWith = function(prefix) {      };  /**   * Your Trie object will be instantiated and called as such:  * var obj = Object.create(Trie).createNew()  * obj.insert(word)  * var param_2 = obj.search(word)  * var param_3 = obj.startsWith(prefix)  */", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "class Trie  =begin     Initialize your data structure here. =end     def initialize()              end   =begin     Inserts a word into the trie.     :type word: String     :rtype: Void =end     def insert(word)              end   =begin     Returns if the word is in the trie.     :type word: String     :rtype: Boolean =end     def search(word)              end   =begin     Returns if there is any word in the trie that starts with the given prefix.     :type prefix: String     :rtype: Boolean =end     def starts_with(prefix)              end   end  # Your Trie object will be instantiated and called as such: # obj = Trie.new() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.starts_with(prefix)", "text": "Ruby"}, {"value": "golang", "defaultCode": "type Trie struct {      }   /** Initialize your data structure here. */ func Constructor() Trie {      }   /** Inserts a word into the trie. */ func (this *Trie) Insert(word string)  {      }   /** Returns if the word is in the trie. */ func (this *Trie) Search(word string) bool {      }   /** Returns if there is any word in the trie that starts with the given prefix. */ func (this *Trie) StartsWith(prefix string) bool {      }   /**  * Your Trie object will be instantiated and called as such:  * obj := Constructor();  * obj.Insert(word);  * param_2 := obj.Search(word);  * param_3 := obj.StartsWith(prefix);  */", "text": "Go"}]
---SCRIPT_END---
