---CONTENT_BEGIN---
A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).
Each LED represents a zero or one, with the least significant bit on the right.

For example, the above binary watch reads "3:25".

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.

Example:
Input: n = 1Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]


Note:

The order of output does not matter.
The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<string> readBinaryWatch(int num) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<String> readBinaryWatch(int num) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def readBinaryWatch(self, num):         '''         :type num: int         :rtype: List[str]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** readBinaryWatch(int num, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<string> ReadBinaryWatch(int num) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} num  * @return {string[]}  */ var readBinaryWatch = function(num) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} num # @return {String[]} def read_binary_watch(num)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func readBinaryWatch(_ num: Int) -> [String] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func readBinaryWatch(num int) []string {      }"}]
---SCRIPT_END---
