---CONTENT_BEGIN---
Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.


Note:

If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.




    Example 1:
    tickets = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
    Return ["JFK", "MUC", "LHR", "SFO", "SJC"].


    Example 2:
    tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
    Return ["JFK","ATL","JFK","SFO","ATL","SFO"].
    Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"]. But it is larger in lexical order.


Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<string> findItinerary(vector<pair<string, string>> tickets) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<String> findItinerary(String[][] tickets) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def findItinerary(self, tickets):         '''         :type tickets: List[List[str]]         :rtype: List[str]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** findItinerary(char*** tickets, int ticketsRowSize, int ticketsColSize, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<string> FindItinerary(string[,] tickets) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string[][]} tickets  * @return {string[]}  */ var findItinerary = function(tickets) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {string[][]} tickets # @return {String[]} def find_itinerary(tickets)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func findItinerary(_ tickets: [[String]]) -> [String] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func findItinerary(tickets [][]string) []string {      }"}]
---SCRIPT_END---
