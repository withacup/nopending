---CONTENT_BEGIN---
Consider the string s to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so s will look like this: "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".

Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.

Note: p consists of only lowercase English letters and the size of p might be over 10000.

Example 1:

Input: "a"
Output: 1

Explanation: Only the substring "a" of string "a" is in the string s.



Example 2:

Input: "cac"
Output: 2
Explanation: There are two substrings "a", "c" of string "cac" in the string s.



Example 3:

Input: "zab"
Output: 6
Explanation: There are six substrings "z", "a", "b", "za", "ab", "zab" of string "zab" in the string s.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int findSubstringInWraproundString(string p) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int findSubstringInWraproundString(String p) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findSubstringInWraproundString(self, p):         '''         :type p: str         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int findSubstringInWraproundString(char* p) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int FindSubstringInWraproundString(string p) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} p  * @return {number}  */ var findSubstringInWraproundString = function(p) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} p # @return {Integer} def find_substring_in_wrapround_string(p)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findSubstringInWraproundString(_ p: String) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findSubstringInWraproundString(p string) int {      }", "text": "Go"}]
---SCRIPT_END---
