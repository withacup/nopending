---CONTENT_BEGIN---
Rotate an array of n elements to the right by k steps.
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4]. 

Note:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.


[show hint]
Hint:
Could you do it in-place with O(1) extra space?


Related problem: Reverse Words in a String II

Credits:Special thanks to @Freezen for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     void rotate(vector<int>& nums, int k) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public void rotate(int[] nums, int k) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def rotate(self, nums, k):         '''         :type nums: List[int]         :type k: int         :rtype: void Do not return anything, modify nums in-place instead.         '''         "}, {"text": "C", "value": "c", "defaultCode": "void rotate(int* nums, int numsSize, int k) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public void Rotate(int[] nums, int k) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @param {number} k  * @return {void} Do not return anything, modify nums in-place instead.  */ var rotate = function(nums, k) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @param {Integer} k # @return {Void} Do not return anything, modify nums in-place instead. def rotate(nums, k)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func rotate(_ nums: inout [Int], _ k: Int) {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func rotate(nums []int, k int)  {      }"}]
---SCRIPT_END---
