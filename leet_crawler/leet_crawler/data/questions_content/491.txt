---CONTENT_BEGIN---

Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .


Example:

Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]



Note:

The length of the given array will not exceed 15.
The range of integer in the given array is [-100,100].
The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> findSubsequences(vector<int>& nums) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> findSubsequences(int[] nums) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findSubsequences(self, nums):         '''         :type nums: List[int]         :rtype: List[List[int]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *columnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** findSubsequences(int* nums, int numsSize, int** columnSizes, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> FindSubsequences(int[] nums) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {number[][]}  */ var findSubsequences = function(nums) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Integer[][]} def find_subsequences(nums)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findSubsequences(_ nums: [Int]) -> [[Int]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findSubsequences(nums []int) [][]int {      }", "text": "Go"}]
---SCRIPT_END---
