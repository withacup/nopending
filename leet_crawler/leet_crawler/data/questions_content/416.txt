---CONTENT_BEGIN---
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.


Note:

Each of the array element will not exceed 100.
The array size will not exceed 200.



Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].



Example 2:

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     bool canPartition(vector<int>& nums) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public boolean canPartition(int[] nums) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def canPartition(self, nums):         '''         :type nums: List[int]         :rtype: bool         '''         "}, {"text": "C", "value": "c", "defaultCode": "bool canPartition(int* nums, int numsSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public bool CanPartition(int[] nums) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {boolean}  */ var canPartition = function(nums) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Boolean} def can_partition(nums)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func canPartition(_ nums: [Int]) -> Bool {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func canPartition(nums []int) bool {      }"}]
---SCRIPT_END---
