---CONTENT_BEGIN---
Validate if a given string is numeric.


Some examples:
"0" => true
"   0.1  " => true
"abc" => false
"1 a" => false
"2e10" => true


Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.



Update (2015-02-10):
The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button  to reset your code definition.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     bool isNumber(string s) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public boolean isNumber(String s) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def isNumber(self, s):         '''         :type s: str         :rtype: bool         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "bool isNumber(char* s) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public bool IsNumber(string s) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {string} s  * @return {boolean}  */ var isNumber = function(s) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {String} s # @return {Boolean} def is_number(s)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func isNumber(_ s: String) -> Bool {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func isNumber(s string) bool {      }", "text": "Go"}]
---SCRIPT_END---
