---CONTENT_BEGIN---
Given a nested list of integers represented as a string, implement a parser to deserialize it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Note:
You may assume that the string is well-formed:

String is non-empty.
String does not contain white spaces.
String contains only digits 0-9, [, - ,, ].



Example 1:

Given s = "324",

You should return a NestedInteger object which contains a single integer 324.



Example 2:

Given s = "[123,[456,[789]]]",

Return a NestedInteger object containing a nested list with 2 elements:

1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * // This is the interface that allows for creating nested lists.  * // You should not implement it, or speculate about its implementation  * class NestedInteger {  *   public:  *     // Constructor initializes an empty nested list.  *     NestedInteger();  *  *     // Constructor initializes a single integer.  *     NestedInteger(int value);  *  *     // Return true if this NestedInteger holds a single integer, rather than a nested list.  *     bool isInteger() const;  *  *     // Return the single integer that this NestedInteger holds, if it holds a single integer  *     // The result is undefined if this NestedInteger holds a nested list  *     int getInteger() const;  *  *     // Set this NestedInteger to hold a single integer.  *     void setInteger(int value);  *  *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.  *     void add(const NestedInteger &ni);  *  *     // Return the nested list that this NestedInteger holds, if it holds a nested list  *     // The result is undefined if this NestedInteger holds a single integer  *     const vector<NestedInteger> &getList() const;  * };  */ class Solution { public:     NestedInteger deserialize(string s) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * // This is the interface that allows for creating nested lists.  * // You should not implement it, or speculate about its implementation  * public interface NestedInteger {  *     // Constructor initializes an empty nested list.  *     public NestedInteger();  *  *     // Constructor initializes a single integer.  *     public NestedInteger(int value);  *  *     // @return true if this NestedInteger holds a single integer, rather than a nested list.  *     public boolean isInteger();  *  *     // @return the single integer that this NestedInteger holds, if it holds a single integer  *     // Return null if this NestedInteger holds a nested list  *     public Integer getInteger();  *  *     // Set this NestedInteger to hold a single integer.  *     public void setInteger(int value);  *  *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.  *     public void add(NestedInteger ni);  *  *     // @return the nested list that this NestedInteger holds, if it holds a nested list  *     // Return null if this NestedInteger holds a single integer  *     public List<NestedInteger> getList();  * }  */ public class Solution {     public NestedInteger deserialize(String s) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# ''' # This is the interface that allows for creating nested lists. # You should not implement it, or speculate about its implementation # ''' #class NestedInteger(object): #    def __init__(self, value=None): #        ''' #        If value is not specified, initializes an empty list. #        Otherwise initializes a single integer equal to value. #        ''' # #    def isInteger(self): #        ''' #        @return True if this NestedInteger holds a single integer, rather than a nested list. #        :rtype bool #        ''' # #    def add(self, elem): #        ''' #        Set this NestedInteger to hold a nested list and adds a nested integer elem to it. #        :rtype void #        ''' # #    def setInteger(self, value): #        ''' #        Set this NestedInteger to hold a single integer equal to value. #        :rtype void #        ''' # #    def getInteger(self): #        ''' #        @return the single integer that this NestedInteger holds, if it holds a single integer #        Return None if this NestedInteger holds a nested list #        :rtype int #        ''' # #    def getList(self): #        ''' #        @return the nested list that this NestedInteger holds, if it holds a nested list #        Return None if this NestedInteger holds a single integer #        :rtype List[NestedInteger] #        '''  class Solution(object):     def deserialize(self, s):         '''         :type s: str         :rtype: NestedInteger         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * *********************************************************************  * // This is the interface that allows for creating nested lists.  * // You should not implement it, or speculate about its implementation  * *********************************************************************  *  * // Initializes an empty nested list and return a reference to the nested integer.  * struct NestedInteger *NestedIntegerInit();  *  * // Return true if this NestedInteger holds a single integer, rather than a nested list.  * bool NestedIntegerIsInteger(struct NestedInteger *);  *  * // Return the single integer that this NestedInteger holds, if it holds a single integer  * // The result is undefined if this NestedInteger holds a nested list  * int NestedIntegerGetInteger(struct NestedInteger *);  *  * // Set this NestedInteger to hold a single integer.  * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);  *  * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.  * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);  *  * // Return the nested list that this NestedInteger holds, if it holds a nested list  * // The result is undefined if this NestedInteger holds a single integer  * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);  *  * // Return the nested ' size that this NestedInteger holds, if it holds a nested list  * // The result is undefined if this NestedInteger holds a single integer  * int NestedIntegerGetListSize(struct NestedInteger *);  * };  */ struct NestedInteger* deserialize(char* s) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * // This is the interface that allows for creating nested lists.  * // You should not implement it, or speculate about its implementation  * interface NestedInteger {  *  *     // Constructor initializes an empty nested list.  *     public NestedInteger();  *  *     // Constructor initializes a single integer.  *     public NestedInteger(int value);  *  *     // @return true if this NestedInteger holds a single integer, rather than a nested list.  *     bool IsInteger();  *  *     // @return the single integer that this NestedInteger holds, if it holds a single integer  *     // Return null if this NestedInteger holds a nested list  *     int GetInteger();  *  *     // Set this NestedInteger to hold a single integer.  *     public void SetInteger(int value);  *  *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.  *     public void Add(NestedInteger ni);  *  *     // @return the nested list that this NestedInteger holds, if it holds a nested list  *     // Return null if this NestedInteger holds a single integer  *     IList<NestedInteger> GetList();  * }  */ public class Solution {     public NestedInteger Deserialize(string s) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * // This is the interface that allows for creating nested lists.  * // You should not implement it, or speculate about its implementation  * function NestedInteger() {  *  *     Return true if this NestedInteger holds a single integer, rather than a nested list.  *     @return {boolean}  *     this.isInteger = function() {  *         ...  *     };  *  *     Return the single integer that this NestedInteger holds, if it holds a single integer  *     Return null if this NestedInteger holds a nested list  *     @return {integer}  *     this.getInteger = function() {  *         ...  *     };  *  *     Set this NestedInteger to hold a single integer equal to value.  *     @return {void}  *     this.setInteger = function(value) {  *         ...  *     };  *  *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.  *     @return {void}  *     this.add = function(elem) {  *         ...  *     };  *  *     Return the nested list that this NestedInteger holds, if it holds a nested list  *     Return null if this NestedInteger holds a single integer  *     @return {NestedInteger[]}  *     this.getList = function() {  *         ...  *     };  * };  */ /**  * @param {string} s  * @return {NestedInteger}  */ var deserialize = function(s) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# This is the interface that allows for creating nested lists. # You should not implement it, or speculate about its implementation # #class NestedInteger #    def is_integer() #        ''' #        Return true if this NestedInteger holds a single integer, rather than a nested list. #        @return {Boolean} #        ''' # #    def get_integer() #        ''' #        Return the single integer that this NestedInteger holds, if it holds a single integer #        Return nil if this NestedInteger holds a nested list #        @return {Integer} #        ''' # #    def set_integer(value) #        ''' #        Set this NestedInteger to hold a single integer equal to value. #        @return {Void} #        ''' # #    def add(elem) #        ''' #        Set this NestedInteger to hold a nested list and adds a nested integer elem to it. #        @return {Void} #        ''' # #    def get_list() #        ''' #        Return the nested list that this NestedInteger holds, if it holds a nested list #        Return nil if this NestedInteger holds a single integer #        @return {NestedInteger[]} #        '''  # @param {String} s # @return {NestedInteger} def deserialize(s)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "/**  * // This is the interface that allows for creating nested lists.  * // You should not implement it, or speculate about its implementation  * class NestedInteger {  *     // Return true if this NestedInteger holds a single integer, rather than a nested list.  *     public func isInteger() -> Bool  *  *     // Return the single integer that this NestedInteger holds, if it holds a single integer  *     // The result is undefined if this NestedInteger holds a nested list  *     public func getInteger() -> Int  *  *     // Set this NestedInteger to hold a single integer.  *     public func setInteger(value: Int)  *  *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.  *     public func add(elem: NestedInteger)  *  *     // Return the nested list that this NestedInteger holds, if it holds a nested list  *     // The result is undefined if this NestedInteger holds a single integer  *     public func getList() -> [NestedInteger]  * }  */ class Solution {     func deserialize(_ s: String) -> NestedInteger {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "/**  * // This is the interface that allows for creating nested lists.  * // You should not implement it, or speculate about its implementation  * type NestedInteger struct {  * }  *  * // Return true if this NestedInteger holds a single integer, rather than a nested list.  * func (n NestedInteger) IsInteger() bool {}  *  * // Return the single integer that this NestedInteger holds, if it holds a single integer  * // The result is undefined if this NestedInteger holds a nested list  * // So before calling this method, you should have a check  * func (n NestedInteger) GetInteger() int {}  *  * // Set this NestedInteger to hold a single integer.  * func (n *NestedInteger) SetInteger(value int) {}  *  * // Set this NestedInteger to hold a nested list and adds a nested integer to it.  * func (n *NestedInteger) Add(elem NestedInteger) {}  *  * // Return the nested list that this NestedInteger holds, if it holds a nested list  * // The list length is zero if this NestedInteger holds a single integer  * // You can access ' List element directly if you want to modify it  * func (n NestedInteger) GetList() []*NestedInteger {}  */ func deserialize(s string) *NestedInteger {      }", "text": "Go"}]
---SCRIPT_END---
