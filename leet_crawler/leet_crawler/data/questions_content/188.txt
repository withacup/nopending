---CONTENT_BEGIN---
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Credits:Special thanks to @Freezen for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int maxProfit(int k, vector<int>& prices) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int maxProfit(int k, int[] prices) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def maxProfit(self, k, prices):         '''         :type k: int         :type prices: List[int]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int maxProfit(int k, int* prices, int pricesSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MaxProfit(int k, int[] prices) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} k  * @param {number[]} prices  * @return {number}  */ var maxProfit = function(k, prices) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} k # @param {Integer[]} prices # @return {Integer} def max_profit(k, prices)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func maxProfit(_ k: Int, _ prices: [Int]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func maxProfit(k int, prices []int) int {      }", "text": "Go"}]
---SCRIPT_END---
