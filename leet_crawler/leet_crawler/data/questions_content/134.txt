---CONTENT_BEGIN---

There are N gas stations along a circular route, where the amount of gas at station i is gas[i].



You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.



Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.



Note:
The solution is guaranteed to be unique.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public int canCompleteCircuit(int[] gas, int[] cost) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def canCompleteCircuit(self, gas, cost):         '''         :type gas: List[int]         :type cost: List[int]         :rtype: int         '''         "}, {"text": "C", "value": "c", "defaultCode": "int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public int CanCompleteCircuit(int[] gas, int[] cost) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number[]} gas  * @param {number[]} cost  * @return {number}  */ var canCompleteCircuit = function(gas, cost) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer[]} gas # @param {Integer[]} cost # @return {Integer} def can_complete_circuit(gas, cost)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func canCompleteCircuit(_ gas: [Int], _ cost: [Int]) -> Int {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func canCompleteCircuit(gas []int, cost []int) int {      }"}]
---SCRIPT_END---
