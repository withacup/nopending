---CONTENT_BEGIN---
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0



Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public double findMedianSortedArrays(int[] nums1, int[] nums2) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def findMedianSortedArrays(self, nums1, nums2):         '''         :type nums1: List[int]         :type nums2: List[int]         :rtype: float         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public double FindMedianSortedArrays(int[] nums1, int[] nums2) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums1  * @param {number[]} nums2  * @return {number}  */ var findMedianSortedArrays = function(nums1, nums2) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums1 # @param {Integer[]} nums2 # @return {Float} def find_median_sorted_arrays(nums1, nums2)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {      }", "text": "Go"}]
---SCRIPT_END---
