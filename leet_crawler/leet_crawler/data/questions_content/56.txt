---CONTENT_BEGIN---
Given a collection of intervals, merge all overlapping intervals.


For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  *     Interval() : start(0), end(0) {}  *     Interval(int s, int e) : start(s), end(e) {}  * };  */ class Solution { public:     vector<Interval> merge(vector<Interval>& intervals) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     int start;  *     int end;  *     Interval() { start = 0; end = 0; }  *     Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public List<Interval> merge(List<Interval> intervals) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "# Definition for an interval. # class Interval(object): #     def __init__(self, s=0, e=0): #         self.start = s #         self.end = e  class Solution(object):     def merge(self, intervals):         '''         :type intervals: List[Interval]         :rtype: List[Interval]         '''"}, {"text": "C", "value": "c", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  * };  */ /**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ struct Interval* merge(struct Interval* intervals, int intervalsSize, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     public int start;  *     public int end;  *     public Interval() { start = 0; end = 0; }  *     public Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public IList<Interval> Merge(IList<Interval> intervals) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * Definition for an interval.  * function Interval(start, end) {  *     this.start = start;  *     this.end = end;  * }  */ /**  * @param {Interval[]} intervals  * @return {Interval[]}  */ var merge = function(intervals) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# Definition for an interval. # class Interval #     attr_accessor :start, :end #     def initialize(s=0, e=0) #         @start = s #         @end = e #     end # end  # @param {Interval[]} intervals # @return {Interval[]} def merge(intervals)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *   public var start: Int  *   public var end: Int  *   public init(_ start: Int, _ end: Int) {  *     self.start = start  *     self.end = end  *   }  * }  */ class Solution {     func merge(_ intervals: [Interval]) -> [Interval] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "/**  * Definition for an interval.  * type Interval struct {  *       Start int  *       End   int  * }  */ func merge(intervals []Interval) []Interval {      }"}]
---SCRIPT_END---
