---CONTENT_BEGIN---
Design a data structure that supports all following operations in average O(1) time.



insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.



Example:

// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class RandomizedSet { public:     /** Initialize your data structure here. */     RandomizedSet() {              }          /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */     bool insert(int val) {              }          /** Removes a value from the set. Returns true if the set contained the specified element. */     bool remove(int val) {              }          /** Get a random element from the set. */     int getRandom() {              } };  /**  * Your RandomizedSet object will be instantiated and called as such:  * RandomizedSet obj = new RandomizedSet();  * bool param_1 = obj.insert(val);  * bool param_2 = obj.remove(val);  * int param_3 = obj.getRandom();  */", "text": "C++"}, {"value": "java", "defaultCode": "public class RandomizedSet {      /** Initialize your data structure here. */     public RandomizedSet() {              }          /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */     public boolean insert(int val) {              }          /** Removes a value from the set. Returns true if the set contained the specified element. */     public boolean remove(int val) {              }          /** Get a random element from the set. */     public int getRandom() {              } }  /**  * Your RandomizedSet object will be instantiated and called as such:  * RandomizedSet obj = new RandomizedSet();  * boolean param_1 = obj.insert(val);  * boolean param_2 = obj.remove(val);  * int param_3 = obj.getRandom();  */", "text": "Java"}, {"value": "python", "defaultCode": "class RandomizedSet(object):      def __init__(self):         '''         Initialize your data structure here.         '''               def insert(self, val):         '''         Inserts a value to the set. Returns true if the set did not already contain the specified element.         :type val: int         :rtype: bool         '''               def remove(self, val):         '''         Removes a value from the set. Returns true if the set contained the specified element.         :type val: int         :rtype: bool         '''               def getRandom(self):         '''         Get a random element from the set.         :rtype: int         '''            # Your RandomizedSet object will be instantiated and called as such: # obj = RandomizedSet() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.getRandom()", "text": "Python"}, {"value": "c", "defaultCode": "typedef struct {      } RandomizedSet;  /** Initialize your data structure here. */ RandomizedSet* randomizedSetCreate() {      }  /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */ bool randomizedSetInsert(RandomizedSet* obj, int val) {      }  /** Removes a value from the set. Returns true if the set contained the specified element. */ bool randomizedSetRemove(RandomizedSet* obj, int val) {      }  /** Get a random element from the set. */ int randomizedSetGetRandom(RandomizedSet* obj) {      }  void randomizedSetFree(RandomizedSet* obj) {      }  /**  * Your RandomizedSet struct will be instantiated and called as such:  * struct RandomizedSet* obj = randomizedSetCreate();  * bool param_1 = randomizedSetInsert(obj, val);  * bool param_2 = randomizedSetRemove(obj, val);  * int param_3 = randomizedSetGetRandom(obj);  * randomizedSetFree(obj);  */", "text": "C"}, {"value": "csharp", "defaultCode": "public class RandomizedSet {      /** Initialize your data structure here. */     public RandomizedSet() {              }          /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */     public bool Insert(int val) {              }          /** Removes a value from the set. Returns true if the set contained the specified element. */     public bool Remove(int val) {              }          /** Get a random element from the set. */     public int GetRandom() {              } }  /**  * Your RandomizedSet object will be instantiated and called as such:  * RandomizedSet obj = new RandomizedSet();  * bool param_1 = obj.Insert(val);  * bool param_2 = obj.Remove(val);  * int param_3 = obj.GetRandom();  */", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Initialize your data structure here.  */ var RandomizedSet = function() {      };  /**  * Inserts a value to the set. Returns true if the set did not already contain the specified element.   * @param {number} val  * @return {boolean}  */ RandomizedSet.prototype.insert = function(val) {      };  /**  * Removes a value from the set. Returns true if the set contained the specified element.   * @param {number} val  * @return {boolean}  */ RandomizedSet.prototype.remove = function(val) {      };  /**  * Get a random element from the set.  * @return {number}  */ RandomizedSet.prototype.getRandom = function() {      };  /**   * Your RandomizedSet object will be instantiated and called as such:  * var obj = Object.create(RandomizedSet).createNew()  * var param_1 = obj.insert(val)  * var param_2 = obj.remove(val)  * var param_3 = obj.getRandom()  */", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "class RandomizedSet  =begin     Initialize your data structure here. =end     def initialize()              end   =begin     Inserts a value to the set. Returns true if the set did not already contain the specified element.     :type val: Integer     :rtype: Boolean =end     def insert(val)              end   =begin     Removes a value from the set. Returns true if the set contained the specified element.     :type val: Integer     :rtype: Boolean =end     def remove(val)              end   =begin     Get a random element from the set.     :rtype: Integer =end     def get_random()              end   end  # Your RandomizedSet object will be instantiated and called as such: # obj = RandomizedSet.new() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.get_random()", "text": "Ruby"}, {"value": "golang", "defaultCode": "type RandomizedSet struct {      }   /** Initialize your data structure here. */ func Constructor() RandomizedSet {      }   /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */ func (this *RandomizedSet) Insert(val int) bool {      }   /** Removes a value from the set. Returns true if the set contained the specified element. */ func (this *RandomizedSet) Remove(val int) bool {      }   /** Get a random element from the set. */ func (this *RandomizedSet) GetRandom() int {      }   /**  * Your RandomizedSet object will be instantiated and called as such:  * obj := Constructor();  * param_1 := obj.Insert(val);  * param_2 := obj.Remove(val);  * param_3 := obj.GetRandom();  */", "text": "Go"}]
---SCRIPT_END---
