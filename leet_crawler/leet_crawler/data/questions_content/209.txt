---CONTENT_BEGIN---

Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â¥ s. If there isn't one, return 0 instead.


For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.


click to show more practice.

More practice:

If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).


Credits:Special thanks to @Freezen for adding this problem and creating all test cases.
---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int minSubArrayLen(int s, vector<int>& nums) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int minSubArrayLen(int s, int[] nums) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def minSubArrayLen(self, s, nums):         '''         :type s: int         :type nums: List[int]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int minSubArrayLen(int s, int* nums, int numsSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MinSubArrayLen(int s, int[] nums) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number} s  * @param {number[]} nums  * @return {number}  */ var minSubArrayLen = function(s, nums) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer} s # @param {Integer[]} nums # @return {Integer} def min_sub_array_len(s, nums)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func minSubArrayLen(_ s: Int, _ nums: [Int]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func minSubArrayLen(s int, nums []int) int {      }", "text": "Go"}]
---SCRIPT_END---
