---CONTENT_BEGIN---
The count-and-say sequence is the sequence of integers beginning as follows:
1, 11, 21, 1211, 111221, ...



1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.



Given an integer n, generate the nth sequence.



Note: The sequence of integers will be represented as a string.


---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     string countAndSay(int n) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public String countAndSay(int n) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def countAndSay(self, n):         '''         :type n: int         :rtype: str         '''         "}, {"text": "C", "value": "c", "defaultCode": "char* countAndSay(int n) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public string CountAndSay(int n) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {number} n  * @return {string}  */ var countAndSay = function(n) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {Integer} n # @return {String} def count_and_say(n)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func countAndSay(_ n: Int) -> String {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func countAndSay(n int) string {      }"}]
---SCRIPT_END---
