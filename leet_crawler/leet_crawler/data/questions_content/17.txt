---CONTENT_BEGIN---
Given a digit string, return all possible letter combinations that the number could represent.



A mapping of digit to letters (just like on the telephone buttons) is given below.



Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].



Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"text": "C++", "value": "cpp", "defaultCode": "class Solution { public:     vector<string> letterCombinations(string digits) {              } };"}, {"text": "Java", "value": "java", "defaultCode": "public class Solution {     public List<String> letterCombinations(String digits) {              } }"}, {"text": "Python", "value": "python", "defaultCode": "class Solution(object):     def letterCombinations(self, digits):         '''         :type digits: str         :rtype: List[str]         '''         "}, {"text": "C", "value": "c", "defaultCode": "/**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ char** letterCombinations(char* digits, int* returnSize) {      }"}, {"text": "C#", "value": "csharp", "defaultCode": "public class Solution {     public IList<string> LetterCombinations(string digits) {              } }"}, {"text": "JavaScript", "value": "javascript", "defaultCode": "/**  * @param {string} digits  * @return {string[]}  */ var letterCombinations = function(digits) {      };"}, {"text": "Ruby", "value": "ruby", "defaultCode": "# @param {String} digits # @return {String[]} def letter_combinations(digits)      end"}, {"text": "Swift", "value": "swift", "defaultCode": "class Solution {     func letterCombinations(_ digits: String) -> [String] {              } }"}, {"text": "Go", "value": "golang", "defaultCode": "func letterCombinations(digits string) []string {      }"}]
---SCRIPT_END---
