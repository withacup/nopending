---CONTENT_BEGIN---
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.


For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<vector<int>> threeSum(vector<int>& nums) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<List<Integer>> threeSum(int[] nums) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def threeSum(self, nums):         '''         :type nums: List[int]         :rtype: List[List[int]]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Return an array of arrays of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ int** threeSum(int* nums, int numsSize, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<IList<int>> ThreeSum(int[] nums) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {number[][]}  */ var threeSum = function(nums) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Integer[][]} def three_sum(nums)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func threeSum(_ nums: [Int]) -> [[Int]] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func threeSum(nums []int) [][]int {      }", "text": "Go"}]
---SCRIPT_END---
