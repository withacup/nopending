---CONTENT_BEGIN---

Find the contiguous subarray within an array (containing at least one number) which has the largest product.



For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     int maxProduct(vector<int>& nums) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public int maxProduct(int[] nums) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def maxProduct(self, nums):         '''         :type nums: List[int]         :rtype: int         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "int maxProduct(int* nums, int numsSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public int MaxProduct(int[] nums) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[]} nums  * @return {number}  */ var maxProduct = function(nums) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[]} nums # @return {Integer} def max_product(nums)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func maxProduct(_ nums: [Int]) -> Int {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func maxProduct(nums []int) int {      }", "text": "Go"}]
---SCRIPT_END---
