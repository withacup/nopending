---CONTENT_BEGIN---
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.



For example,
Given the following matrix:


[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]


You should return [1,2,3,6,9,8,7,4,5].

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class Solution { public:     vector<int> spiralOrder(vector<vector<int>>& matrix) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "public class Solution {     public List<Integer> spiralOrder(int[][] matrix) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "class Solution(object):     def spiralOrder(self, matrix):         '''         :type matrix: List[List[int]]         :rtype: List[int]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "public class Solution {     public IList<int> SpiralOrder(int[,] matrix) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * @param {number[][]} matrix  * @return {number[]}  */ var spiralOrder = function(matrix) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# @param {Integer[][]} matrix # @return {Integer[]} def spiral_order(matrix)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "class Solution {     func spiralOrder(_ matrix: [[Int]]) -> [Int] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "func spiralOrder(matrix [][]int) []int {      }", "text": "Go"}]
---SCRIPT_END---
