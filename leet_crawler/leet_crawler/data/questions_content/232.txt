---CONTENT_BEGIN---

Implement the following operations of a queue using stacks.


push(x) -- Push element x to the back of queue.


pop() -- Removes the element from in front of queue.


peek() -- Get the front element.


empty() -- Return whether the queue is empty.


Notes:

You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).


---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "class MyQueue { public:     /** Initialize your data structure here. */     MyQueue() {              }          /** Push element x to the back of queue. */     void push(int x) {              }          /** Removes the element from in front of queue and returns that element. */     int pop() {              }          /** Get the front element. */     int peek() {              }          /** Returns whether the queue is empty. */     bool empty() {              } };  /**  * Your MyQueue object will be instantiated and called as such:  * MyQueue obj = new MyQueue();  * obj.push(x);  * int param_2 = obj.pop();  * int param_3 = obj.peek();  * bool param_4 = obj.empty();  */", "text": "C++"}, {"value": "java", "defaultCode": "public class MyQueue {      /** Initialize your data structure here. */     public MyQueue() {              }          /** Push element x to the back of queue. */     public void push(int x) {              }          /** Removes the element from in front of queue and returns that element. */     public int pop() {              }          /** Get the front element. */     public int peek() {              }          /** Returns whether the queue is empty. */     public boolean empty() {              } }  /**  * Your MyQueue object will be instantiated and called as such:  * MyQueue obj = new MyQueue();  * obj.push(x);  * int param_2 = obj.pop();  * int param_3 = obj.peek();  * boolean param_4 = obj.empty();  */", "text": "Java"}, {"value": "python", "defaultCode": "class MyQueue(object):      def __init__(self):         '''         Initialize your data structure here.         '''               def push(self, x):         '''         Push element x to the back of queue.         :type x: int         :rtype: void         '''               def pop(self):         '''         Removes the element from in front of queue and returns that element.         :rtype: int         '''               def peek(self):         '''         Get the front element.         :rtype: int         '''               def empty(self):         '''         Returns whether the queue is empty.         :rtype: bool         '''            # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty()", "text": "Python"}, {"value": "c", "defaultCode": "typedef struct {      } MyQueue;  /** Initialize your data structure here. */ MyQueue* myQueueCreate(int maxSize) {      }  /** Push element x to the back of queue. */ void myQueuePush(MyQueue* obj, int x) {      }  /** Removes the element from in front of queue and returns that element. */ int myQueuePop(MyQueue* obj) {      }  /** Get the front element. */ int myQueuePeek(MyQueue* obj) {      }  /** Returns whether the queue is empty. */ bool myQueueEmpty(MyQueue* obj) {      }  void myQueueFree(MyQueue* obj) {      }  /**  * Your MyQueue struct will be instantiated and called as such:  * struct MyQueue* obj = myQueueCreate(maxSize);  * myQueuePush(obj, x);  * int param_2 = myQueuePop(obj);  * int param_3 = myQueuePeek(obj);  * bool param_4 = myQueueEmpty(obj);  * myQueueFree(obj);  */", "text": "C"}, {"value": "csharp", "defaultCode": "public class MyQueue {      /** Initialize your data structure here. */     public MyQueue() {              }          /** Push element x to the back of queue. */     public void Push(int x) {              }          /** Removes the element from in front of queue and returns that element. */     public int Pop() {              }          /** Get the front element. */     public int Peek() {              }          /** Returns whether the queue is empty. */     public bool Empty() {              } }  /**  * Your MyQueue object will be instantiated and called as such:  * MyQueue obj = new MyQueue();  * obj.Push(x);  * int param_2 = obj.Pop();  * int param_3 = obj.Peek();  * bool param_4 = obj.Empty();  */", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Initialize your data structure here.  */ var MyQueue = function() {      };  /**  * Push element x to the back of queue.   * @param {number} x  * @return {void}  */ MyQueue.prototype.push = function(x) {      };  /**  * Removes the element from in front of queue and returns that element.  * @return {number}  */ MyQueue.prototype.pop = function() {      };  /**  * Get the front element.  * @return {number}  */ MyQueue.prototype.peek = function() {      };  /**  * Returns whether the queue is empty.  * @return {boolean}  */ MyQueue.prototype.empty = function() {      };  /**   * Your MyQueue object will be instantiated and called as such:  * var obj = Object.create(MyQueue).createNew()  * obj.push(x)  * var param_2 = obj.pop()  * var param_3 = obj.peek()  * var param_4 = obj.empty()  */", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "class MyQueue  =begin     Initialize your data structure here. =end     def initialize()              end   =begin     Push element x to the back of queue.     :type x: Integer     :rtype: Void =end     def push(x)              end   =begin     Removes the element from in front of queue and returns that element.     :rtype: Integer =end     def pop()              end   =begin     Get the front element.     :rtype: Integer =end     def peek()              end   =begin     Returns whether the queue is empty.     :rtype: Boolean =end     def empty()              end   end  # Your MyQueue object will be instantiated and called as such: # obj = MyQueue.new() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty()", "text": "Ruby"}, {"value": "golang", "defaultCode": "type MyQueue struct {      }   /** Initialize your data structure here. */ func Constructor() MyQueue {      }   /** Push element x to the back of queue. */ func (this *MyQueue) Push(x int)  {      }   /** Removes the element from in front of queue and returns that element. */ func (this *MyQueue) Pop() int {      }   /** Get the front element. */ func (this *MyQueue) Peek() int {      }   /** Returns whether the queue is empty. */ func (this *MyQueue) Empty() bool {      }   /**  * Your MyQueue object will be instantiated and called as such:  * obj := Constructor();  * obj.Push(x);  * param_2 := obj.Pop();  * param_3 := obj.Peek();  * param_4 := obj.Empty();  */", "text": "Go"}]
---SCRIPT_END---
