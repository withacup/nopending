---CONTENT_BEGIN---
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.


Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].



Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].



This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

---CONTENT_END---
---SCRIPT_BEGIN---
[{"value": "cpp", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  *     Interval() : start(0), end(0) {}  *     Interval(int s, int e) : start(s), end(e) {}  * };  */ class Solution { public:     vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {              } };", "text": "C++"}, {"value": "java", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     int start;  *     int end;  *     Interval() { start = 0; end = 0; }  *     Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public List<Interval> insert(List<Interval> intervals, Interval newInterval) {              } }", "text": "Java"}, {"value": "python", "defaultCode": "# Definition for an interval. # class Interval(object): #     def __init__(self, s=0, e=0): #         self.start = s #         self.end = e  class Solution(object):     def insert(self, intervals, newInterval):         '''         :type intervals: List[Interval]         :type newInterval: Interval         :rtype: List[Interval]         '''         ", "text": "Python"}, {"value": "c", "defaultCode": "/**  * Definition for an interval.  * struct Interval {  *     int start;  *     int end;  * };  */ /**  * Return an array of size *returnSize.  * Note: The returned array must be malloced, assume caller calls free().  */ struct Interval* insert(struct Interval* intervals, int intervalsSize, struct Interval newInterval, int* returnSize) {      }", "text": "C"}, {"value": "csharp", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *     public int start;  *     public int end;  *     public Interval() { start = 0; end = 0; }  *     public Interval(int s, int e) { start = s; end = e; }  * }  */ public class Solution {     public IList<Interval> Insert(IList<Interval> intervals, Interval newInterval) {              } }", "text": "C#"}, {"value": "javascript", "defaultCode": "/**  * Definition for an interval.  * function Interval(start, end) {  *     this.start = start;  *     this.end = end;  * }  */ /**  * @param {Interval[]} intervals  * @param {Interval} newInterval  * @return {Interval[]}  */ var insert = function(intervals, newInterval) {      };", "text": "JavaScript"}, {"value": "ruby", "defaultCode": "# Definition for an interval. # class Interval #     attr_accessor :start, :end #     def initialize(s=0, e=0) #         @start = s #         @end = e #     end # end  # @param {Interval[]} intervals # @param {Interval} new_interval # @return {Interval[]} def insert(intervals, new_interval)      end", "text": "Ruby"}, {"value": "swift", "defaultCode": "/**  * Definition for an interval.  * public class Interval {  *   public var start: Int  *   public var end: Int  *   public init(_ start: Int, _ end: Int) {  *     self.start = start  *     self.end = end  *   }  * }  */ class Solution {     func insert(_ intervals: [Interval], _ newInterval: Interval) -> [Interval] {              } }", "text": "Swift"}, {"value": "golang", "defaultCode": "/**  * Definition for an interval.  * type Interval struct {  *       Start int  *       End   int  * }  */ func insert(intervals []Interval, newInterval Interval) []Interval {      }", "text": "Go"}]
---SCRIPT_END---
