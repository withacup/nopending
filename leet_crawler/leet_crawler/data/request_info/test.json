[
  {
    "defaultCode": "class WordDictionary { public:     /** Initialize your data structure here. */     WordDictionary() {              }          /** Adds a word into the data structure. */     void addWord(string word) {              }          /** Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter. */     bool search(string word) {              } };  /**  * Your WordDictionary object will be instantiated and called as such:  * WordDictionary obj = new WordDictionary();  * obj.addWord(word);  * bool param_2 = obj.search(word);  */",
    "text": "C++",
    "value": "cpp"
  },
  {
    "defaultCode": "public class WordDictionary {      /** Initialize your data structure here. */     public WordDictionary() {              }          /** Adds a word into the data structure. */     public void addWord(String word) {              }          /** Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter. */     public boolean search(String word) {              } }  /**  * Your WordDictionary object will be instantiated and called as such:  * WordDictionary obj = new WordDictionary();  * obj.addWord(word);  * boolean param_2 = obj.search(word);  */",
    "text": "Java",
    "value": "java"
  },
  {
    "defaultCode": "class WordDictionary(object):      def __init__(self):         '''         Initialize your data structure here.         '''               def addWord(self, word):         '''         Adds a word into the data structure.         :type word: str         :rtype: void         '''               def search(self, word):         '''         Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter.         :type word: str         :rtype: bool         '''            # Your WordDictionary object will be instantiated and called as such: # obj = WordDictionary() # obj.addWord(word) # param_2 = obj.search(word)",
    "text": "Python",
    "value": "python"
  },
  {
    "defaultCode": "typedef struct {      } WordDictionary;  /** Initialize your data structure here. */ WordDictionary* wordDictionaryCreate() {      }  /** Adds a word into the data structure. */ void wordDictionaryAddWord(WordDictionary* obj, char* word) {      }  /** Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter. */ bool wordDictionarySearch(WordDictionary* obj, char* word) {      }  void wordDictionaryFree(WordDictionary* obj) {      }  /**  * Your WordDictionary struct will be instantiated and called as such:  * struct WordDictionary* obj = wordDictionaryCreate();  * wordDictionaryAddWord(obj, word);  * bool param_2 = wordDictionarySearch(obj, word);  * wordDictionaryFree(obj);  */",
    "text": "C",
    "value": "c"
  },
  {
    "defaultCode": "public class WordDictionary {      /** Initialize your data structure here. */     public WordDictionary() {              }          /** Adds a word into the data structure. */     public void AddWord(string word) {              }          /** Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter. */     public bool Search(string word) {              } }  /**  * Your WordDictionary object will be instantiated and called as such:  * WordDictionary obj = new WordDictionary();  * obj.AddWord(word);  * bool param_2 = obj.Search(word);  */",
    "text": "C#",
    "value": "csharp"
  },
  {
    "defaultCode": "/**  * Initialize your data structure here.  */ var WordDictionary = function() {      };  /**  * Adds a word into the data structure.   * @param {string} word  * @return {void}  */ WordDictionary.prototype.addWord = function(word) {      };  /**  * Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter.   * @param {string} word  * @return {boolean}  */ WordDictionary.prototype.search = function(word) {      };  /**   * Your WordDictionary object will be instantiated and called as such:  * var obj = Object.create(WordDictionary).createNew()  * obj.addWord(word)  * var param_2 = obj.search(word)  */",
    "text": "JavaScript",
    "value": "javascript"
  },
  {
    "defaultCode": "class WordDictionary  =begin     Initialize your data structure here. =end     def initialize()              end   =begin     Adds a word into the data structure.     :type word: String     :rtype: Void =end     def add_word(word)              end   =begin     Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter.     :type word: String     :rtype: Boolean =end     def search(word)              end   end  # Your WordDictionary object will be instantiated and called as such: # obj = WordDictionary.new() # obj.add_word(word) # param_2 = obj.search(word)",
    "text": "Ruby",
    "value": "ruby"
  },
  {
    "defaultCode": "type WordDictionary struct {      }   /** Initialize your data structure here. */ func Constructor() WordDictionary {      }   /** Adds a word into the data structure. */ func (this *WordDictionary) AddWord(word string)  {      }   /** Returns if the word is in the data structure. A word could contain the dot character . to represent any one letter. */ func (this *WordDictionary) Search(word string) bool {      }   /**  * Your WordDictionary object will be instantiated and called as such:  * obj := Constructor();  * obj.AddWord(word);  * param_2 := obj.Search(word);  */",
    "text": "Go",
    "value": "golang"
  }
]