{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int findKthNumber(int n, int k) {--newline--        int curr = 1;--newline--        k = k - 1;--newline--        while (k > 0) {--newline--            int steps = calSteps(n, curr, curr + 1);--newline--            if (steps <= k) {--newline--                curr += 1;--newline--                k -= steps;--newline--            } else {--newline--                curr *= 10;--newline--                k -= 1;--newline--            }--newline--        }--newline--        return curr;--newline--    }--newline--    //use long in case of overflow--newline--    public int calSteps(int n, long n1, long n2) {--newline--        int steps = 0;--newline--        while (n1 <= n) {--newline--            steps += Math.min(n + 1, n2) - n1;--newline--            n1 *= 10;--newline--            n2 *= 10;--newline--        }--newline--        return steps;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Concise&#x2F;Easy-to-understand Java 5ms solution with Explaination"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findKthNumber(int n, int k)--newline--    {--newline--        int result = 1;--newline--        for(--k; k > 0; )--newline--        {--newline--            // calculate #|{result, result*, result**, result***, ...}|--newline--            int count = 0;--newline--            for (long long first = static_cast<long long>(result), last = first + 1;--newline--                first <= n; // the interval is not empty--newline--                first *= 10, last *= 10) // increase a digit--newline--            {--newline--                // valid interval = [first, last) union [first, n]--newline--                count += static_cast<int>((min(n + 1LL, last) - first)); // add the length of interval--newline--            }--newline--            --newline--            if (k >= count)--newline--            {   // skip {result, result*, result**, result***, ...}--newline--                // increase the current prefix--newline--                ++result;--newline--                k -= count;--newline--            }--newline--            else--newline--            {   // not able to skip all of {result, result*, result**, result***, ...}--newline--                // search more detailedly--newline--                result *= 10;--newline--                --k;--newline--            }--newline--        }--newline--        return result;--newline--    }--newline--};--newline--",
            "python": "class Solution(object):--newline----tab--    def findKthNumber(self, n, k):--newline----tab--        result = 1;--newline----tab--        k -= 1--newline----tab--        while k > 0:--newline----tab--            count = 0--newline----tab--            interval = [result, result+1]--newline----tab--            while interval[0] <= n:--newline----tab--                count += (min(n+1, interval[1]) - interval[0])--newline----tab--                interval = [10*interval[0], 10*interval[1]]--newline----tab--            --newline----tab--            if k >= count:--newline----tab--                result += 1--newline----tab--                k -= count--newline----tab--            else:--newline----tab--                result *= 10--newline----tab--                k -= 1--newline----tab--        return result--newline----tab--",
            "topic_title": "C++&#x2F;Python 0ms O((log n)^2)-time O(1)-space super easy solution with detailed explanations"
        },
        {
            "java": "public class Solution {--newline--    int countNum(int n){--newline--        int i=0;--newline--        while(n>0){--newline--            n/=10;--newline--            i++;--newline--        }--newline--        return i;--newline--    }--newline--    int getFullTreeNum(int depth){--newline--        int sum=0, children=1;--newline--        while(depth>0){--newline--            sum+=children;--newline--            children*=10;--newline--            depth--;--newline--        }--newline--        return sum;--newline--    }--newline--    int getMax(int prefix, int depth){--newline--        while(depth>0){--newline--            prefix*=10;--newline--            prefix+=9;--newline--            depth--;--newline--        }--newline--        return prefix;--newline--    }--newline--    int getMin(int prefix, int depth){--newline--        while(depth>0){--newline--            prefix*=10;--newline--            depth--;--newline--        }--newline--        return prefix;--newline--    }--newline--    int helper(int n, int k, int prefix, int depth){--newline--        int lowNum=getFullTreeNum(depth), highNum=getFullTreeNum(depth-1);--newline--        for(int i=(prefix==0?1:0);i<=9;i++){--newline--            int nodeNum=0;--newline--            if(getMax(prefix*10+i, depth-1)<=n){--newline--                nodeNum=lowNum;--newline--            }--newline--            else if(getMin(prefix*10+i, depth-1)>n){--newline--                nodeNum=highNum;--newline--            }--newline--            else{--newline--                nodeNum=highNum+((n-getMin(prefix*10+i, depth-1))+1);--newline--            }--newline--            k-=nodeNum;--newline--            if(k<=0){--newline--                k+=nodeNum;--newline--                if(k==1){--newline--                    return prefix*10+i;--newline--                }--newline--                else {--newline--                    return helper(n, k-1, prefix*10+i, depth-1);--newline--                }--newline--            }--newline--        }--newline--        return 0;--newline--    }--newline--    --newline--    public int findKthNumber(int n, int k) {--newline--        int depth=countNum(n);--newline--        int index=0;--newline--        return helper(n, k, 0, depth);--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java 7ms denary(trie?) tree solution with detailed explanation"
        },
        {
            "java": "public class Solution {--newline--    int index = 0;--newline--    int ans = 0;--newline--    public int findKthNumber(int n, int k) {--newline--        for(int i=1;i<=9;i++) {--newline--            int c = count(n, i, \"\");--newline--            if(k>c+index) {--newline--                index+=c;--newline--                continue;--newline--            }--newline--            if(helper(n, k, \"\"+i)) break;--newline--        }--newline--        return ans;--newline--    }--newline--    public boolean helper(int n, int k, String cur) {--newline--        index++;--newline--        if(index==k) {--newline--            ans = Integer.valueOf(cur);--newline--            return true;--newline--        }--newline--        for(int i=0; i<=9; i++) {--newline--            int c = count(n, i, cur);--newline--            if(k>c+index) {--newline--                index+=c;--newline--                continue;--newline--            }--newline--            if(Integer.valueOf(cur+i)<=n) if(helper(n, k, cur+i)) return true;--newline--        }--newline--        return false;--newline--    }--newline--    public int count(int n, int i, String prefix) {--newline--        long cur = Long.valueOf(prefix+i);--newline--        int ans = 0;--newline--        int number = 1;--newline--        while(cur<=n) {--newline--            ans += number;--newline--            cur *= 10;--newline--            number *= 10;--newline--        }--newline--        if(n<(cur/10+number/10-1)) ans -= cur/10+number/10-1-n;--newline--        return ans;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "It&#x27;s a denary tree"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    // Calculates the amount of--newline--    // numbers <= n that starts with prefix.--newline--    --newline--    function countForPrefix (n, prefix) {--newline--        let a = parseInt(prefix);--newline--        let b = a + 1;--newline--        if (a > n || a === 0)--newline--            return 0;--newline--    --newline--        let res = 1;--newline--        a *= 10; b *= 10;--newline--        while (a <= n) {--newline--            res += Math.min(n + 1, b) - a;--newline--            a *= 10; b *= 10;--newline--        }--newline--    --newline--        return res;--newline--    }--newline--    --newline--    // Constructs resulting number digit by digit--newline--    // starting with the most significant.--newline--    --newline--    function findKthNumber (n, k) {--newline--        let i, prefix = '';--newline--        while (k !== 0) {--newline--            for (i = 0; i <= 9; i++) {--newline--                const count = countForPrefix(n, prefix + i);--newline--                if (count < k)--newline--                    k -= count;--newline--                else--newline--                    break;--newline--            }--newline--            prefix = prefix + i;--newline--            k--; // number equal to prefix--newline--        }--newline--    --newline--        return parseInt(prefix, 10);--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "Easy to understand JS solution"
        }
    ],
    "qc": "440.json"
}