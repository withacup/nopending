{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Codec:--newline----tab----newline----tab--    alphabet = string.ascii_letters + '0123456789'--newline----tab----newline----tab--    def __init__(self):--newline----tab--        self.url2code = {}--newline----tab--        self.code2url = {}--newline----tab----newline----tab--    def encode(self, longUrl):--newline----tab--        while longUrl not in self.url2code:--newline----tab--            code = ''.join(random.choice(Codec.alphabet) for _ in range(6))--newline----tab--            if code not in self.code2url:--newline----tab--                self.code2url[code] = longUrl--newline----tab--                self.url2code[longUrl] = code--newline----tab--        return 'http://tinyurl.com/' + self.url2code[longUrl]--newline----tab----newline----tab--    def decode(self, shortUrl):--newline----tab--        return self.code2url[shortUrl[-6:]]--newline----tab--",
            "topic_title": "Two solutions and thoughts"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline----newline--    // Encodes a URL to a shortened URL.--newline--    string encode(string longUrl) {--newline--        return longUrl;--newline--    }--newline----newline--    // Decodes a shortened URL to its original URL.--newline--    string decode(string shortUrl) {--newline--        return shortUrl;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "A true stateless one in C++ (joke)"
        },
        {
            "java": "public class Codec {--newline--    List<String> urls = new ArrayList<String>();--newline--    // Encodes a URL to a shortened URL.--newline--    public String encode(String longUrl) {--newline--        urls.add(longUrl);--newline--        return String.valueOf(urls.size()-1);--newline--    }--newline----newline--    // Decodes a shortened URL to its original URL.--newline--    public String decode(String shortUrl) {--newline--        int index = Integer.valueOf(shortUrl);--newline--        return (index<urls.size())?urls.get(index):\"\";--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Easy solution in java, 5 line code."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Codec {--newline--public:--newline--    public:--newline--        string dict = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";--newline--        int id = 0;--newline--        unordered_map<string,string> m;  //key is longURL, value is shortURL--newline--        unordered_map<int, string> idm;  //key is id in DB, value is longURL--newline--        // Encodes a URL to a shortened URL.--newline--        string encode(string longUrl) {--newline--            if(m.find(longUrl) != m.end())return m[longUrl];--newline--            string res = \"\";--newline--            id++;--newline--            int count = id;--newline--            while(count > 0)--newline--            {--newline--                res = dict[count%62] + res;--newline--                count /= 62;--newline--            }--newline--            while(res.size() < 6)--newline--            {--newline--                res = \"0\" + res;--newline--            }--newline--            m[longUrl] = res;--newline--            idm[id] = longUrl;--newline--            return res;--newline--        }--newline--    --newline--        // Decodes a shortened URL to its original URL.--newline--        string decode(string shortUrl) {--newline--            int id = 0;--newline--            for(int i = 0; i < shortUrl.size(); i++)--newline--            {--newline--                id = 62*id + (int)(dict.find(shortUrl[i]));--newline--            }--newline--            if(idm.find(id) != idm.end())return idm[id];--newline--            return \"\";--newline--        }--newline--    };--newline--    --newline--    // Your Solution object will be instantiated and called as such:--newline--    // Solution solution;--newline--    // solution.decode(solution.encode(url));--newline--}",
            "python": null,
            "topic_title": "C++ solution"
        },
        {
            "java": "public class Codec {--newline--    Map<Integer, String> map = new HashMap<>();--newline--    Random r=new Random();--newline--    int key=r.nextInt(10000);--newline--    public String encode(String longUrl) {--newline--        while(map.containsKey(key))--newline--            key= r.nextInt(10000);--newline--        map.put(key,longUrl);--newline--        return \"http://tinyurl.com/\"+key;--newline--    }--newline--    public String decode(String shortUrl) {--newline--        return map.get(Integer.parseInt(shortUrl.replace(\"http://tinyurl.com/\", \"\")));--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Three different approaches in java"
        }
    ],
    "qc": "535.json"
}