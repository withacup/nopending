{
    "posts": [
        {
            "java": "public class Solution {--newline--public ListNode oddEvenList(ListNode head) {--newline--    if (head != null) {--newline--    --newline--        ListNode odd = head, even = head.next, evenHead = even; --newline--    --newline--        while (even != null && even.next != null) {--newline--            odd.next = odd.next.next; --newline--            even.next = even.next.next; --newline--            odd = odd.next;--newline--            even = even.next;--newline--        }--newline--        odd.next = evenHead; --newline--    }--newline--    return head;--newline--}}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Simple O(N) time, O(1), space Java solution."
        },
        {
            "java": "public class Solution {--newline--    public ListNode oddEvenList(ListNode head) {--newline--        if(head==null||head.next==null) return head;--newline--        ListNode odd=head,ehead=head.next,even=ehead;--newline--        while(even!=null&&even.next!=null){--newline--            odd.next=even.next;--newline--            odd=odd.next;--newline--            even.next=odd.next;--newline--            even=even.next;--newline--        }--newline--        odd.next=ehead;--newline--        return head;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Straigntforward Java solution, O(1) space, O(n) time"
        },
        {
            "java": "public class Solution {--newline--    public ListNode oddEvenList(ListNode head) {--newline--        if(head == null || head.next == null)--newline--            return head;--newline--        ListNode odd = head;--newline--        ListNode even = head.next;--newline--        ListNode evenHead = even;--newline--        while(odd.next != null && even.next != null){--newline--            odd.next = even.next;--newline--            odd = odd.next;--newline--            even.next = odd.next;--newline--            even = even.next;--newline--        }--newline--        odd.next = evenHead;--newline--        return head;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "1ms Java Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--        ListNode* oddEvenList(ListNode* head) --newline--        {--newline--            if(!head) return head;--newline--            ListNode *odd=head, *evenhead=head->next, *even = evenhead;--newline--            while(even && even->next)--newline--            {--newline--                odd->next = odd->next->next;--newline--                even->next = even->next->next;--newline--                odd = odd->next;--newline--                even = even->next;--newline--            }--newline--            odd->next = evenhead;--newline--            return head;--newline--        }--newline--}",
            "python": null,
            "topic_title": "Simple C++ solution, O(n) time, O(1) space"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def oddEvenList(self, head):--newline----tab--        dummy1 = odd = ListNode(0)--newline----tab--        dummy2 = even = ListNode(0)--newline----tab--        while head:--newline----tab--            odd.next = head--newline----tab--            even.next = head.next--newline----tab--            odd = odd.next--newline----tab--            even = even.next--newline----tab--            head = head.next.next if even else None--newline----tab--        odd.next = dummy2.next--newline----tab--        return dummy1.next",
            "topic_title": "Clear Python Solution"
        }
    ],
    "qc": "328.json"
}