{
    "posts": [
        {
            "java": "public class Solution {--newline--    public static int hammingWeight(int n) {--newline--    --tab--int ones = 0;--newline--        --tab--while(n!=0) {--newline--        --tab----tab--ones = ones + (n & 1);--newline--        --tab----tab--n = n>>>1;--newline--        --tab--}--newline--        --tab--return ones;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Simple Java Solution, Bit Shifting"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    // This is a naive implementation, shown for comparison, and to help in understanding the better functions. --newline--    // It uses 24 arithmetic operations (shift, add, and).--newline--    int hammingWeight(uint32_t n)--newline--    {--newline--        n = (n & 0x55555555) + (n >>  1 & 0x55555555); // put count of each  2 bits into those  2 bits --newline--        n = (n & 0x33333333) + (n >>  2 & 0x33333333); // put count of each  4 bits into those  4 bits --newline--        n = (n & 0x0F0F0F0F) + (n >>  4 & 0x0F0F0F0F); // put count of each  8 bits into those  8 bits --newline--        n = (n & 0x00FF00FF) + (n >>  8 & 0x00FF00FF); // put count of each 16 bits into those 16 bits --newline--        n = (n & 0x0000FFFF) + (n >> 16 & 0x0000FFFF); // put count of each 32 bits into those 32 bits --newline--        return n;--newline--    }--newline--    --newline--    // This uses fewer arithmetic operations than any other known implementation on machines with slow multiplication.--newline--    // It uses 17 arithmetic operations.--newline--    int hammingWeight(uint32_t n)--newline--    {--newline--        n -= (n >> 1) & 0x55555555; //put count of each 2 bits into those 2 bits--newline--        n = (n & 0x33333333) + (n >> 2 & 0x33333333); //put count of each 4 bits into those 4 bits--newline--        n = (n + (n >> 4)) & 0x0F0F0F0F; //put count of each 8 bits into those 8 bits--newline--        n += n >> 8; // put count of each 16 bits into those 8 bits--newline--        n += n >> 16; // put count of each 32 bits into those 8 bits--newline--        return n & 0xFF;--newline--    }--newline--    --newline--    // This uses fewer arithmetic operations than any other known implementation on machines with fast multiplication.--newline--    // It uses 12 arithmetic operations, one of which is a multiply.--newline--    int hammingWeight(uint32_t n)--newline--    {--newline--        n -= (n >> 1) & 0x55555555; // put count of each 2 bits into those 2 bits--newline--        n = (n & 0x33333333) + (n >> 2 & 0x33333333); // put count of each 4 bits into those 4 bits--newline--        n = (n + (n >> 4)) & 0x0F0F0F0F; // put count of each 8 bits into those 8 bits --newline--        return n * 0x01010101 >> 24; // returns left 8 bits of x + (x<<8) + (x<<16) + (x<<24)--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "Short code of C++, O(m) by time, m is the count of 1&#x27;s,  and another several method of O(1) time"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int hammingWeight(uint32_t n) {--newline--        int count = 0;--newline--        --newline--        while (n) {--newline--            n &= (n - 1);--newline--            count++;--newline--        }--newline--        --newline--        return count;--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "C++ Solution: n &amp; (n - 1)"
        },
        {
            "java": "public class Solution {--newline--     public int hammingWeight(int n) {--newline--            int count = 0;--newline--            for(int i=0; i<32; i++){--newline--                count += (n >> i & 1) == 1 ? 1: 0;--newline--            }--newline--            return count;--newline--        }--newline--    --newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Readable simple JAVA solution O(1)"
        },
        {
            "java": "public class Solution {--newline--    public int hammingWeight(int n) {--newline--        int count = 0;--newline--        for (;n!=0;n = n & (n-1))--newline--            count++;--newline--        return count;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Use n=n&amp;(n-1) trick to clear the least bit"
        }
    ],
    "qc": "191.json"
}