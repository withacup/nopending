{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Why factor 2 or 3? The math behind this problem."
        },
        {
            "java": "public class Solution {--newline--    public int integerBreak(int n) {--newline--        if(n==2) return 1;--newline--        if(n==3) return 2;--newline--        int product = 1;--newline--        while(n>4){--newline--            product*=3;--newline--            n-=3;--newline--        }--newline--        product*=n;--newline--        --newline--        return product;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "A simple explanation of the math part and a O(n) solution"
        },
        {
            "java": "public class Solution {--newline--    public int integerBreak(int n) {--newline--           int[] dp = new int[n + 1];--newline--           dp[1] = 1;--newline--           for(int i = 2; i <= n; i ++) {--newline--               for(int j = 1; j < i; j ++) {--newline--                   dp[i] = Math.max(dp[i], (Math.max(j,dp[j])) * (Math.max(i - j, dp[i - j])));--newline--               }--newline--           }--newline--           return dp[n];--newline--        }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java DP solution"
        },
        {
            "java": "public class Solution {--newline--    public int integerBreak(int n) {--newline--        if(n == 2)--newline--            return 1;--newline--        else if(n == 3)--newline--            return 2;--newline--        else if(n%3 == 0)--newline--            return (int)Math.pow(3, n/3);--newline--        else if(n%3 == 1)--newline--            return 2 * 2 * (int) Math.pow(3, (n - 4) / 3);--newline--        else --newline--            return 2 * (int) Math.pow(3, n/3);--newline--    }--newline--            --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "O(log(n)) Time solution with explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    long long integerBreak(long long n) {--newline--        if(n == 2) return 1;--newline--        if(n == 3) return 2;--newline--        if(n == 4) return 4;--newline--        if(n == 5) return 6;--newline--        if(n == 6) return 9;--newline--        return 3 * integerBreak(n - 3);--newline--    }--newline--};",
            "python": null,
            "topic_title": "Easy to understand C++ with explanation"
        }
    ],
    "qc": "343.json"
}