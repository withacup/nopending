{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findPeakElement(const vector<int> &num) {--newline--        for(int i = 1; i < num.size(); i ++)--newline--        {--newline--            if(num[i] < num[i-1])--newline--            {// <--newline--                return i-1;--newline--            }--newline--        }--newline--        return num.size()-1;--newline--    }--newline--};",
            "python": null,
            "topic_title": "Find the maximum by binary search (recursion and iteration)"
        },
        {
            "java": "public class Solution {--newline--    public int findPeakElement(int[] num) {    --newline--        return helper(num,0,num.length-1);--newline--    }--newline--    --newline--    public int helper(int[] num,int start,int end){--newline--        if(start == end){--newline--            return start;--newline--        }else if(start+1 == end){--newline--            if(num[start] > num[end]) return start;--newline--            return end;--newline--        }else{--newline--            --newline--            int m = (start+end)/2;--newline--            --newline--            if(num[m] > num[m-1] && num[m] > num[m+1]){--newline--    --newline--                return m;--newline--    --newline--            }else if(num[m-1] > num[m] && num[m] > num[m+1]){--newline--    --newline--                return helper(num,start,m-1);--newline--    --newline--            }else{--newline--    --newline--                return helper(num,m+1,end);--newline--    --newline--            }--newline--            --newline--        }--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "O(logN) Solution JavaCode"
        },
        {
            "java": "public class Solution {--newline--    public int findPeakElement(int[] nums) {--newline--        int N = nums.length;--newline--        if (N == 1) {--newline--            return 0;--newline--        }--newline--       --newline--        int left = 0, right = N - 1;--newline--        while (right - left > 1) {--newline--            int mid = left + (right - left) / 2;--newline--            if (nums[mid] < nums[mid + 1]) {--newline--                left = mid + 1;--newline--            } else {--newline--                right = mid;--newline--            }--newline--        }--newline--        --newline--        return (left == N - 1 || nums[left] > nums[left + 1]) ? left : right;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java solution and explanation using invariants"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findPeakElement(const vector<int> &num) {--newline--        if (num.size() <= 1) return 0;--newline--        int mid = 0, l = 0, h = num.size() - 1;--newline--        --newline--        while (l < h) {--newline--            mid = (l + h) / 2;--newline--            if (num[mid] > num[mid + 1])--newline--                h = mid;--newline--            else if (num[mid] < num[mid + 1])--newline--                l = mid + 1;--newline--        }--newline--        --newline--        return l;--newline--    }--newline--}",
            "python": null,
            "topic_title": "A concise standard binary search solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findPeakElement(const vector<int> &num) {--newline--        int low = 0, high = num.size() - 1;--newline--        while (low < high - 1) {--newline--            int mid = (low + high) / 2;--newline--            if (num[mid] > num[mid - 1] && num[mid] > num[mid + 1]) --newline--                return mid;--newline--            else if (num[mid] > num[mid + 1]) --newline--                    high = mid - 1;--newline--                 else --newline--                    low = mid + 1;    --newline--        }--newline--        return num[low] > num[high] ? low : high;--newline--    }--newline--};",
            "python": null,
            "topic_title": "Sharing a more standard Binary Search C++ Solution"
        }
    ],
    "qc": "162.json"
}