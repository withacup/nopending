{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {public:--newline--int maximalRectangle(vector<vector<char> > &matrix) {--newline--    if(matrix.empty()) return 0;--newline--    const int m = matrix.size();--newline--    const int n = matrix[0].size();--newline--    int left[n], right[n], height[n];--newline--    fill_n(left,n,0); fill_n(right,n,n); fill_n(height,n,0);--newline--    int maxA = 0;--newline--    for(int i=0; i<m; i++) {--newline--        int cur_left=0, cur_right=n; --newline--        for(int j=0; j<n; j++) { // compute height (can do this from either side)--newline--            if(matrix[i][j]=='1') height[j]++; --newline--            else height[j]=0;--newline--        }--newline--        for(int j=0; j<n; j++) { // compute left (from left to right)--newline--            if(matrix[i][j]=='1') left[j]=max(left[j],cur_left);--newline--            else {left[j]=0; cur_left=j+1;}--newline--        }--newline--        // compute right (from right to left)--newline--        for(int j=n-1; j>=0; j--) {--newline--            if(matrix[i][j]=='1') right[j]=min(right[j],cur_right);--newline--            else {right[j]=n; cur_right=j;}    --newline--        }--newline--        // compute the area of rectangle (can do this from either side)--newline--        for(int j=0; j<n; j++)--newline--            maxA = max(maxA,(right[j]-left[j])*height[j]);--newline--    }--newline--    return maxA;--newline--}--newline--",
            "python": null,
            "topic_title": "Share my DP solution"
        },
        {
            "java": "public class Solution {--newline--    public int maximalRectangle(char[][] matrix) {--newline--        if (matrix==null||matrix.length==0||matrix[0].length==0)--newline--            return 0;--newline--        int cLen = matrix[0].length;    // column length--newline--        int rLen = matrix.length;       // row length--newline--        // height array --newline--        int[] h = new int[cLen+1];--newline--        h[cLen]=0;--newline--        int max = 0;--newline--        --newline--        --newline--        for (int row=0;row<rLen;row++) {--newline--            Stack<Integer> s = new Stack<Integer>();--newline--            for (int i=0;i<cLen+1;i++) {--newline--                if (i<cLen)--newline--                    if(matrix[row][i]=='1')--newline--                        h[i]+=1;--newline--                    else h[i]=0;--newline--                --newline--                if (s.isEmpty()||h[s.peek()]<=h[i])--newline--                    s.push(i);--newline--                else {--newline--                    while(!s.isEmpty()&&h[i]<h[s.peek()]){--newline--                        int top = s.pop();--newline--                        int area = h[top]*(s.isEmpty()?i:(i-s.peek()-1));--newline--                        if (area>max)--newline--                            max = area;--newline--                    }--newline--                    s.push(i);--newline--                }--newline--            }--newline--        }--newline--        return max;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "A O(n^2) solution based on Largest Rectangle in Histogram"
        },
        {
            "java": "public class Solution {--newline--public int maximalRectangle(char[][] matrix) {--newline--    if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;--newline--    --newline--    int[] height = new int[matrix[0].length];--newline--    for(int i = 0; i < matrix[0].length; i ++){--newline--        if(matrix[0][i] == '1') height[i] = 1;--newline--    }--newline--    int result = largestInLine(height);--newline--    for(int i = 1; i < matrix.length; i ++){--newline--        resetHeight(matrix, height, i);--newline--        result = Math.max(result, largestInLine(height));--newline--    }--newline--    --newline--    return result;--newline--}--newline----newline--private void resetHeight(char[][] matrix, int[] height, int idx){--newline--    for(int i = 0; i < matrix[0].length; i ++){--newline--        if(matrix[idx][i] == '1') height[i] += 1;--newline--        else height[i] = 0;--newline--    }--newline--}    --newline----newline--public int largestInLine(int[] height) {--newline--    if(height == null || height.length == 0) return 0;--newline--    int len = height.length;--newline--    Stack<Integer> s = new Stack<Integer>();--newline--    int maxArea = 0;--newline--    for(int i = 0; i <= len; i++){--newline--        int h = (i == len ? 0 : height[i]);--newline--        if(s.isEmpty() || h >= height[s.peek()]){--newline--            s.push(i);--newline--        }else{--newline--            int tp = s.pop();--newline--            maxArea = Math.max(maxArea, height[tp] * (s.isEmpty() ? i : i - 1 - s.peek()));--newline--            i--;--newline--        }--newline--    }--newline--    return maxArea;--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My java solution based on Maximum Rectangle in Histogram with explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def maximalRectangle(self, matrix):--newline----tab--        if not matrix or not matrix[0]:--newline----tab--            return 0--newline----tab--        n = len(matrix[0])--newline----tab--        height = [0] * (n + 1)--newline----tab--        ans = 0--newline----tab--        for row in matrix:--newline----tab--            for i in xrange(n):--newline----tab--                height[i] = height[i] + 1 if row[i] == '1' else 0--newline----tab--            stack = [-1]--newline----tab--            for i in xrange(n + 1):--newline----tab--                while height[i] < height[stack[-1]]:--newline----tab--                    h = height[stack.pop()]--newline----tab--                    w = i - 1 - stack[-1]--newline----tab--                    ans = max(ans, h * w)--newline----tab--                stack.append(i)--newline----tab--        return ans--newline----tab--    --newline----tab--    # 65 / 65 test cases passed.--newline----tab--    # Status: Accepted--newline----tab--    # Runtime: 120 ms--newline----tab--    # 100%--newline----tab--    ",
            "topic_title": "AC Python DP solutioin 120ms based on largest rectangle in histogram"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int maximalRectangle(vector<vector<char> > &matrix) {--newline--        if(matrix.empty()){--newline--            return 0;--newline--        }--newline--        int maxRec = 0;--newline--        vector<int> height(matrix[0].size(), 0);--newline--        for(int i = 0; i < matrix.size(); i++){--newline--            for(int j = 0; j < matrix[0].size(); j++){--newline--                if(matrix[i][j] == '0'){--newline--                    height[j] = 0;--newline--                }--newline--                else{--newline--                    height[j]++;--newline--                }--newline--            }--newline--            maxRec = max(maxRec, largestRectangleArea(height));--newline--        }--newline--        return maxRec;--newline--    }--newline--    --newline--    int largestRectangleArea(vector<int> &height) {--newline--        stack<int> s;--newline--        height.push_back(0);--newline--        int maxSize = 0;--newline--        for(int i = 0; i < height.size(); i++){--newline--            if(s.empty() || height[i] >= height[s.top()]){--newline--                s.push(i);--newline--            }--newline--            else{--newline--                int temp = height[s.top()];--newline--                s.pop();--newline--                maxSize = max(maxSize, temp * (s.empty() ? i : i - 1 - s.top()));--newline--                i--;--newline--            }--newline--        }--newline--        return maxSize;--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "Sharing my straightforward C++ solution with O(n^2) time with explanation"
        }
    ],
    "qc": "85.json"
}