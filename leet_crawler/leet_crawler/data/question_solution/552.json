{
    "posts": [
        {
            "java": "public class Solution {--newline--    final int MOD = 1000000007;--newline--    final int M = 6;--newline--    --newline--    int[][] mul(int[][] A, int[][] B) {--newline--        int[][] C = new int[M][M];--newline--        for (int i = 0; i < M; i++)--newline--            for (int j = 0; j < M; j++)--newline--                for (int k = 0; k < M; k++)--newline--                    C[i][j] = (int) ((C[i][j] + (long) A[i][k] * B[k][j]) % MOD);--newline--        return C;--newline--    }--newline--    --newline--    --newline--    int[][] pow(int[][] A, int n) {--newline--        int[][] res = new int[M][M];--newline--        for (int i = 0; i < M; i++)--newline--            res[i][i] = 1;--newline--        while (n > 0) {--newline--            if (n % 2 == 1)--newline--                res = mul(res, A);--newline--            A = mul(A, A);--newline--            n /= 2;--newline--        }--newline--        return res;--newline--    }--newline--    --newline--    public int checkRecord(int n) {--newline--        int[][] A = {--newline--                {0, 0, 1, 0, 0, 0},--newline--                {1, 0, 1, 0, 0, 0},--newline--                {0, 1, 1, 0, 0, 0},--newline--                {0, 0, 1, 0, 0, 1},--newline--                {0, 0, 1, 1, 0, 1},--newline--                {0, 0, 1, 0, 1, 1},--newline--        };--newline--        return pow(A, n + 1)[5][2];--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Improving the runtime from O(n) to O(log n)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int checkRecord(int n) {--newline--        int m = 1000000007;--newline--        int *A = new int [n];--newline--        int *P = new int [n];--newline--        int *L = new int [n];--newline--        --newline--        P[0] = 1;--newline--        L[0] = 1;--newline--        L[1] = 3;--newline--        A[0] = 1;--newline--        A[1] = 2;--newline--        A[2] = 4;--newline--        --newline--        if(n == 1) return 3;--newline--        --newline--        for(int i = 1; i < n; i++)--newline--        {--newline--            A[i - 1] %= m;--newline--            P[i - 1] %= m;--newline--            L[i - 1] %= m;--newline--            --newline--            P[i] = ((A[i - 1] + P[i - 1]) % m + L[i - 1]) % m;--newline--            --newline--            if(i > 1) L[i] = ((A[i - 1] + P[i - 1]) % m + (A[i - 2] + P[i - 2]) % m) % m;--newline--            --newline--            if(i > 2) A[i] = ((A[i - 1] + A[i - 2]) % m + A[i - 3]) % m;--newline--        }--newline--        --newline--        return ((A[n - 1] % m + P[n - 1] % m) % m + L[n - 1] % m) % m;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "Share my O(n) C++ DP solution with thinking process and explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution(object):--newline----tab--    def checkRecord(self, n):--newline----tab--        if n == 1:--newline----tab--            return 3--newline----tab--        if n == 0:--newline----tab--            return 0--newline----tab--        nums = [1, 1, 2]--newline----tab--        i = 2--newline----tab--        while i < n:--newline----tab--            nums.append((nums[i] + nums[i-1] + nums[i-2])% 1000000007)--newline----tab--            i += 1--newline----tab--        result = (nums[n] + nums[n-1] + nums[n-2]) % 1000000007--newline----tab--        for i in range(n):--newline----tab--            result += nums[i+1] * nums[n-i] % 1000000007--newline----tab--            result %= 1000000007--newline----tab--        return result--newline----tab--",
            "topic_title": "Python DP with explanation"
        },
        {
            "java": "public class Solution {--newline--    static final int M = 1000000007;--newline--    --newline--    public int checkRecord(int n) {--newline--        long[] PorL = new long[n + 1]; // ending with P or L, no A--newline--        long[] P = new long[n + 1]; // ending with P, no A--newline--        PorL[0] = P[0] = 1; PorL[1] = 2; P[1] = 1;--newline--    --newline--        for (int i = 2; i <= n; i++) {--newline--            P[i] = PorL[i - 1];--newline--            PorL[i] = (P[i] + P[i - 1] + P[i - 2]) % M;--newline--        }--newline--        --newline--        long res = PorL[n];--newline--        for (int i = 0; i < n; i++) { // inserting A into (n-1)-length strings--newline--        --tab--long s = (PorL[i] * PorL[n - i - 1]) % M;--newline--            res = (res + s) % M;--newline--        }--newline--        --newline--        return (int) res;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Simple Java O(n) solution"
        },
        {
            "java": "public class Solution {--newline--    long M = 1000000007;--newline--    public int checkRecord(int n) {--newline--        long a0l0 = 1, a0l1 = 0, a0l2 = 0, a1l0 = 0, a1l1 = 0, a1l2 = 0;--newline--        for (int i = 0; i <= n; i++) {--newline--            long a0l0_ = (a0l0 + a0l1 + a0l2) % M;--newline--            a0l2 = a0l1;--newline--            a0l1 = a0l0;--newline--            a0l0 = a0l0_;--newline--            long a1l0_ = (a0l0 + a1l0 + a1l1 + a1l2) % M;--newline--            a1l2 = a1l1;--newline--            a1l1 = a1l0;--newline--            a1l0 = a1l0_;--newline--        }--newline--        return (int) a1l0;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "O(n) time O(1) space solution"
        }
    ],
    "qc": "552.json"
}