{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int findMinDifference(List<String> timePoints) {--newline--        boolean[] mark = new boolean[24 * 60];--newline--        for (String time : timePoints) {--newline--            String[] t = time.split(\":\");--newline--            int h = Integer.parseInt(t[0]);--newline--            int m = Integer.parseInt(t[1]);--newline--            if (mark[h * 60 + m]) return 0;--newline--            mark[h * 60 + m] = true;--newline--        }--newline--        --newline--        int prev = 0, min = Integer.MAX_VALUE;--newline--        int first = Integer.MAX_VALUE, last = Integer.MIN_VALUE;--newline--        for (int i = 0; i < 24 * 60; i++) {--newline--            if (mark[i]) {--newline--                if (first != Integer.MAX_VALUE) {--newline--                    min = Math.min(min, i - prev);--newline--                }--newline--                first = Math.min(first, i);--newline--                last = Math.max(last, i);--newline--                prev = i;--newline--            }--newline--        }--newline--        --newline--        min = Math.min(min, (24 * 60 - last + first));--newline--        --newline--        return min;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Verbose Java Solution, Bucket"
        },
        {
            "java": "public class Solution {--newline--    public int findMinDifference(List<String> timePoints) {--newline--        int n = timePoints.size();--newline--        List<Time> times = new ArrayList<>();--newline--        for (String tp : timePoints) {--newline--            String[] strs = tp.split(\":\");--newline--            times.add(new Time(Integer.parseInt(strs[0]), Integer.parseInt(strs[1])));--newline--        }--newline--        Collections.sort(times);--newline--        Time earlist = times.get(0);--newline--        times.add(new Time(earlist.h + 24, earlist.m));--newline--        int minDiff = Integer.MAX_VALUE;--newline--        for (int i = 0; i < n; i++) {--newline--            int diff = (int) Math.abs(times.get(i).getDiff(times.get(i + 1)));--newline--            minDiff = Math.min(minDiff, diff);--newline--        }--newline--        return minDiff;--newline--    }--newline--    --newline--}--newline----newline--class Time implements Comparable<Time> {--newline--    int h;--newline--    int m;--newline--    public Time(int h, int m) {--newline--        this.h = h;--newline--        this.m = m;--newline--    }--newline--    --newline--    public int compareTo(Time other) {--newline--        if (this.h == other.h) {--newline--            return this.m - other.m;--newline--        }--newline--        return this.h - other.h;--newline--    }--newline--    --newline--    public int getDiff(Time other) {--newline--        return (this.h - other.h) * 60 + (this.m - other.m);            --newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java sorting with a sentinel node"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findMinDifference(vector<string>& times) {--newline--        int n = times.size();--newline--        sort(times.begin(), times.end());--newline--        int mindiff = INT_MAX;--newline--        for (int i = 0; i < times.size(); i++) {--newline--            int diff = abs(timeDiff(times[(i - 1 + n) % n], times[i]));--newline--            diff = min(diff, 1440 - diff);--newline--            mindiff = min(mindiff, diff);--newline--        }--newline--        return mindiff;--newline--    }--newline----newline--private:--newline--    int timeDiff(string t1, string t2) {--newline--        int h1 = stoi(t1.substr(0, 2));--newline--        int m1 = stoi(t1.substr(3, 2));--newline--        int h2 = stoi(t2.substr(0, 2));--newline--        int m2 = stoi(t2.substr(3, 2));--newline--        return (h2 - h1) * 60 + (m2 - m1);--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "&#91;C++&#93; Clean Code"
        },
        {
            "java": "public class Solution {--newline--    public int findMinDifference(List<String> timePoints) {--newline--        int mm = Integer.MAX_VALUE;--newline--        List<Integer> time = new ArrayList<>();--newline--        --newline--        for(int i = 0; i < timePoints.size(); i++){--newline--            Integer h = Integer.valueOf(timePoints.get(i).substring(0, 2));--newline--            time.add(60 * h + Integer.valueOf(timePoints.get(i).substring(3, 5)));--newline--        }--newline--        --newline--        Collections.sort(time, (Integer a, Integer b) -> a - b);--newline--        --newline--        for(int i = 1; i < time.size(); i++){--newline--            System.out.println(time.get(i));--newline--            mm = Math.min(mm, time.get(i) - time.get(i-1));--newline--        }--newline--        --newline--        int corner = time.get(0) + (1440 - time.get(time.size()-1));--newline--        return Math.min(mm, corner);--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java 10 liner solution. Simplest so far"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def findMinDifference(self, A):--newline----tab--        def convert(time):--newline----tab--            return int(time[:2]) * 60 + int(time[3:])--newline----tab--        minutes = map(convert, A)--newline----tab--        minutes.sort()--newline----tab--        --newline----tab--        return min( (y - x) % (24 * 60) --newline----tab--                    for x, y in zip(minutes, minutes[1:] + minutes[:1]) )--newline----tab--    ",
            "topic_title": "Python, Straightforward with Explanation"
        }
    ],
    "qc": "539.json"
}