{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int minCut(string s) {--newline--        int n = s.size();--newline--        vector<int> cut(n+1, 0);  // number of cuts for the first k characters--newline--        for (int i = 0; i <= n; i++) cut[i] = i-1;--newline--        for (int i = 0; i < n; i++) {--newline--            for (int j = 0; i-j >= 0 && i+j < n && s[i-j]==s[i+j] ; j++) // odd length palindrome--newline--                cut[i+j+1] = min(cut[i+j+1],1+cut[i-j]);--newline----newline--            for (int j = 1; i-j+1 >= 0 && i+j < n && s[i-j+1] == s[i+j]; j++) // even length palindrome--newline--                cut[i+j+1] = min(cut[i+j+1],1+cut[i-j+1]);--newline--        }--newline--        return cut[n];--newline--    }--newline--};",
            "python": null,
            "topic_title": "My solution does not need a table for palindrome, is it right ? It uses only O(n) space."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": " class Solution {--newline--    public:--newline--        int minCut(string s) {--newline--            if(s.empty()) return 0;--newline--            int n = s.size();--newline--            vector<vector<bool>> pal(n,vector<bool>(n,false));--newline--            vector<int> d(n);--newline--            for(int i=n-1;i>=0;i--)--newline--            {--newline--                d[i]=n-i-1;--newline--                for(int j=i;j<n;j++)--newline--                {--newline--                    if(s[i]==s[j] && (j-i<2 || pal[i+1][j-1]))--newline--                    {--newline--                       pal[i][j]=true;--newline--                       if(j==n-1)--newline--                           d[i]=0;--newline--                       else if(d[j+1]+1<d[i])--newline--                           d[i]=d[j+1]+1;--newline--                    }--newline--                }--newline--            }--newline--            return d[0];--newline--        }--newline--    };",
            "python": null,
            "topic_title": "My DP Solution ( explanation and code)"
        },
        {
            "java": "public class Solution {--newline--    public int minCut(String s) {--newline--        char[] c = s.toCharArray();--newline--        int n = c.length;--newline--        int[] cut = new int[n];--newline--        boolean[][] pal = new boolean[n][n];--newline--        --newline--        for(int i = 0; i < n; i++) {--newline--            int min = i;--newline--            for(int j = 0; j <= i; j++) {--newline--                if(c[j] == c[i] && (j + 1 > i - 1 || pal[j + 1][i - 1])) {--newline--                    pal[j][i] = true;  --newline--                    min = j == 0 ? 0 : Math.min(min, cut[j - 1] + 1);--newline--                }--newline--            }--newline--            cut[i] = min;--newline--        }--newline--        return cut[n - 1];--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Easiest Java DP Solution (97.36%)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "//Manancher-like solution--newline--class Solution {--newline--public:--newline--    int minCut(string s) {--newline--        const int N = s.size();--newline--        if(N<=1) return 0;--newline--        --newline--        int i, j, minCUTS[N+1];--newline--        for(i=0; i<=N; ++i) minCUTS[i] = i-1;--newline--        --newline--        for(i=1;i<N;i++)--newline--        {--newline--            for(j=0;(i-j)>=0 && (i+j)<N && s[i-j]== s[i+j]; ++j) // odd-length substrings --newline--                minCUTS[i+j+1] = min(minCUTS[i+j+1], 1 + minCUTS[i-j]);--newline----newline--            for(j=0;(i-j-1)>=0 && (i+j)<N && s[i-j-1]== s[i+j]; ++j) // even-length substrings--newline--                minCUTS[i+j+1] = min(minCUTS[i+j+1], 1 + minCUTS[i-j-1]);--newline--        }--newline--        return minCUTS[N];--newline--    }--newline--};",
            "python": null,
            "topic_title": "Two C++ versions given (one DP 28ms, one Manancher-like algorithm 10 ms)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--         boolean[][] isPalindr = new boolean[n + 1][n + 1]; //isPalindr[i][j] = true means s[i:j) is a valid palindrome--newline--         int[] dp = new int[n + 1]; //dp[i] means the minCut for s[0:i) to be partitioned --newline--    --newline--         for(int i = 0; i <= n; i++) dp[i] = i - 1;//initialize the value for each dp state.--newline--         --newline--         for(int i = 2; i <= n; i++){--newline--             for(int j = i - 1; j >= 0; j--){--newline--                 //if(isPalindr[j][i]){--newline--                 if(s.charAt(i - 1) == s.charAt(j) && (i - 1 - j < 2 || isPalindr[j + 1][i - 1])){--newline--                     isPalindr[j][i] = true;--newline--                     dp[i] = Math.min(dp[i], dp[j] + 1);--newline--                 }--newline--             }--newline--         }--newline--         --newline--         return dp[n];--newline--    --newline--}",
            "python": null,
            "topic_title": "DP solution &amp; some thoughts"
        }
    ],
    "qc": "132.json"
}