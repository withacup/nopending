{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int maxSubArray(int[] A) {--newline--            int n = A.length;--newline--            int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];--newline--            dp[0] = A[0];--newline--            int max = dp[0];--newline--            --newline--            for(int i = 1; i < n; i++){--newline--                dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);--newline--                max = Math.max(max, dp[i]);--newline--            }--newline--            --newline--            return max;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "DP solution &amp; some thoughts"
        },
        {
            "java": "public class Solution {--newline--    public static int maxSubArray(int[] A) {--newline--        int maxSoFar=A[0], maxEndingHere=A[0];--newline--        for (int i=1;i<A.length;++i){--newline--        --tab--maxEndingHere= Math.max(maxEndingHere+A[i],A[i]);--newline--        --tab--maxSoFar=Math.max(maxSoFar, maxEndingHere);--tab----newline--        }--newline--        return maxSoFar;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Accepted O(n) solution in java"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int maxSubArray(int A[], int n) {--newline--        int ans=A[0],i,j,sum=0;--newline--        for(i=0;i<n;i++){--newline--            sum+=A[i];--newline--            ans=max(sum,ans);--newline--            sum=max(sum,0);--newline--        }--newline--        return ans;--newline--    }--newline--};",
            "python": null,
            "topic_title": "Simplest and fastest O(n) C++ solution"
        },
        {
            "java": "public class Solution {--newline--public int maxSubArray(int[] A) {--newline--    int max = Integer.MIN_VALUE, sum = 0;--newline--    for (int i = 0; i < A.length; i++) {--newline--        if (sum < 0) --newline--            sum = A[i];--newline--        else --newline--            sum += A[i];--newline--        if (sum > max)--newline--            max = sum;--newline--    }--newline--    return max;--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "O(n) Java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "struct val {--newline--    int l, m, r, s;--newline--    val(int l, int m, int r, int s):l(l), m(m), r(r), s(s){}--newline--};--newline----newline--class Solution {--newline--public:--newline--    val dac(int A[], int n) {--newline--        if(n == 1) return val(A[0], A[0], A[0], A[0]);--newline--        val v1 = dac(A, n / 2), v2 = dac(A + n / 2, n - n / 2);--newline--        int l, m, r, s;--newline--        l = max(v1.l, v1.s + v2.l);--newline--        m = max(v1.r + v2.l, max(v1.m, v2.m));--newline--        r = max(v2.r, v1.r + v2.s);--newline--        s = v1.s + v2.s;--newline--        return val(l, m, r, s);--newline--    }--newline--    int maxSubArray(int A[], int n) {--newline--        val v = dac(A, n);--newline--        return v.m;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "Share my solutions - both greedy and divide and conquer"
        }
    ],
    "qc": "53.json"
}