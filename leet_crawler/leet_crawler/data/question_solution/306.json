{
    "posts": [
        {
            "java": "public class Solution {--newline--    public boolean isAdditiveNumber(String num) {--newline--        int n = num.length();--newline--        for (int i = 1; i <= n / 2; ++i)--newline--            for (int j = 1; Math.max(j, i) <= n - i - j; ++j)--newline--                if (isValid(i, j, num)) return true;--newline--        return false;--newline--    }--newline--    private boolean isValid(int i, int j, String num) {--newline--        if (num.charAt(0) == '0' && i > 1) return false;--newline--        if (num.charAt(i) == '0' && j > 1) return false;--newline--        String sum;--newline--        Long x1 = Long.parseLong(num.substring(0, i));--newline--        Long x2 = Long.parseLong(num.substring(i, i + j));--newline--        for (int start = i + j; start != num.length(); start += sum.length()) {--newline--            x2 = x2 + x1;--newline--            x1 = x2 - x1;--newline--            sum = x2.toString();--newline--            if (!num.startsWith(sum, start)) return false;--newline--        }--newline--        return true;--newline--    }--newline--}--newline--// Runtime: 3ms",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Recursive and Iterative Solutions"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--        bool isAdditiveNumber(string num) {--newline--            for(int i=1; i<=num.size()/2; i++){--newline--                for(int j=1; j<=(num.size()-i)/2; j++){--newline--                    if(check(num.substr(0,i), num.substr(i,j), num.substr(i+j))) return true;--newline--                }--newline--            }--newline--            return false;--newline--        }--newline--        bool check(string num1, string num2, string num){--newline--            if(num1.size()>1 && num1[0]=='0' || num2.size()>1 && num2[0]=='0') return false;--newline--            string sum=add(num1, num2);--newline--            if(num==sum) return true;--newline--            if(num.size()<=sum.size() || sum.compare(num.substr(0,sum.size()))!=0) return false;--newline--            else return check(num2, sum, num.substr(sum.size()));--newline--        } --newline--        string add(string n, string m){--newline--            string res;--newline--            int i=n.size()-1, j=m.size()-1, carry=0;--newline--            while(i>=0 || j>=0){--newline--                int sum=carry+(i>=0 ? (n[i--]-'0') : 0) + (j>=0?  (m[j--]-'0') : 0);--newline--                res.push_back(sum%10+'0');--newline--                carry=sum/10;--newline--            }--newline--            if(carry) res.push_back(carry+'0');--newline--            reverse(res.begin(), res.end());--newline--            return res;--newline--        }--newline--    };",
            "python": null,
            "topic_title": "0ms concise C++ solution (perfectly handles the follow-up and leading 0s)"
        },
        {
            "java": "public class Solution {--newline--        public boolean isAdditiveNumber(String num) {--newline--            int L = num.length();--newline--    --newline--            // choose the first number A--newline--            for(int i=1; i<=(L-1)/2; i++) {--newline--                // A cannot start with a 0 if its length is more than 1--newline--                if(num.charAt(0) == '0' && i>=2) break; //previous code: continue;--newline--            --newline--                // choose the second number B--newline--                for(int j=i+1; L-j>=j-i && L-j>=i; j++) {--newline--                    // B cannot start with a 0 if its length is more than 1--newline--                    if(num.charAt(i) == '0' && j-i>=2) break; // previous: continue;--newline--                --newline--                    long num1 = Long.parseLong(num.substring(0, i)); // A--newline--                    long num2 = Long.parseLong(num.substring(i, j)); // B--newline--                    String substr = num.substring(j); // remaining string--newline--                --newline--                    if(isAdditive(substr, num1, num2)) return true; // return true if passes isAdditive test--newline--                    // else continue; // continue for loop if does not pass isAdditive test--newline--                }--newline--            }--newline--            return false; // does not pass isAdditive test, thus is not additive--newline--        }--newline--    --newline--        // Recursively checks if a string is additive--newline--        public boolean isAdditive(String str, long num1, long num2) {--newline--            if(str.equals(\"\")) return true; // reaches the end of string means a yes--newline--        --newline--            long sum = num1+num2;--newline--            String s = ((Long)sum).toString();--newline--            if(!str.startsWith(s)) return false; // if string does not start with sum of num1 and num2, returns false--newline--        --newline--            return isAdditive(str.substring(s.length()), num2, sum); // recursively checks the remaining string--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "*Java* very straightforward solution with detailed explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def isAdditiveNumber(self, num):--newline----tab--        n = len(num)--newline----tab--        for i, j in itertools.combinations(range(1, n), 2):--newline----tab--            a, b = num[:i], num[i:j]--newline----tab--            if b != str(int(b)):--newline----tab--                continue--newline----tab--            while j < n:--newline----tab--                c = str(int(a) + int(b))--newline----tab--                if not num.startswith(c, j):--newline----tab--                    break--newline----tab--                j += len(c)--newline----tab--                a, b = b, c--newline----tab--            if j == n:--newline----tab--                return True--newline----tab--        return False",
            "topic_title": "Python solution"
        },
        {
            "java": "public class Solution {--newline--    public boolean isAdditiveNumber(String num) {--newline--        if (num == null || num.length() < 3) return false;--newline--        int n = num.length();--newline--        for (int i = 1; i < n; i++) {--newline--            if (i > 1 && num.charAt(0) == '0') break;--newline--            for (int j = i+1; j < n; j++) {--newline--                int first = 0, second = i, third = j;--newline--                if (num.charAt(second) == '0' && third > second+1) break;--newline--                while (third < n) {--newline--                    Long result = (Long.parseLong(num.substring(first, second)) + --newline--                                   Long.parseLong(num.substring(second, third)) );--newline--                    if (num.substring(third).startsWith(result.toString())) {--newline--                        first = second; second = third; third += result.toString().length();--newline--                    }--newline--                    else {--newline--                        break;--newline--                    }--newline--                }--newline--                if (third == n) return true;--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": "class Solution(object):--newline----tab--    def isAdditiveNumber(self, num):--newline----tab--        \"\"\"--newline----tab--        :type num: str--newline----tab--        :rtype: bool--newline----tab--        \"\"\"--newline----tab--        if num is None or len(num) < 3:--newline----tab--            return False--newline----tab--        n = len(num)--newline----tab--        for i in range(1, n):--newline----tab--            if i > 1 and num[0] == '0':--newline----tab--                break--newline----tab--            for j in range(i+1, n):--newline----tab--                first, second, third = 0, i, j--newline----tab--                if num[second] == '0' and third > second + 1:--newline----tab--                    break--newline----tab--                while third < n:--newline----tab--                    result = str(int(num[first:second]) + int(num[second:third]))--newline----tab--                    if num[third:].startswith(result):--newline----tab--                        first, second, third = second, third, third + len(result)--newline----tab--                    else:--newline----tab--                        break--newline----tab--                if third == n:--newline----tab--                    return True--newline----tab--        return False",
            "topic_title": "Backtracking with Pruning: Java 3 ms Solution and Python 48 ms Solution"
        }
    ],
    "qc": "306.json"
}