{
    "posts": [
        {
            "java": "public class FileSystem {--newline--    class File {--newline--        boolean isFile = false;--newline--        Map<String, File> children = new HashMap<>();--newline--        String content = \"\";--newline--    }--newline--    --newline--    File root = null;--newline--    --newline--    public FileSystem() {--newline--        root = new File();--newline--    }--newline--    --newline--    public List<String> ls(String path) {--newline--        String[] dirs = path.split(\"/\");--newline--        File node = root;--newline--        List<String> result = new ArrayList<>();--newline--        String name = \"\";--newline--        for (String dir : dirs) {--newline--            if (dir.length() == 0) continue;--newline--            if (!node.children.containsKey(dir)) {--newline--                return result;--newline--            }--newline--            node = node.children.get(dir);--newline--            name = dir;--newline--        }--newline--        --newline--        if (node.isFile) {--newline--            result.add(name);--newline--        }--newline--        else {--newline--            for (String key : node.children.keySet()) {--newline--                result.add(key);--newline--            }--newline--        }--newline--        --newline--        Collections.sort(result);--newline--        --newline--        return result;--newline--    }--newline--    --newline--    public void mkdir(String path) {--newline--        String[] dirs = path.split(\"/\");--newline--        File node = root;--newline--        for (String dir : dirs) {--newline--            if (dir.length() == 0) continue;--newline--            if (!node.children.containsKey(dir)) {--newline--                File file = new File();--newline--                node.children.put(dir, file);--newline--            }--newline--            node = node.children.get(dir);--newline--        }--newline--    }--newline--    --newline--    public void addContentToFile(String filePath, String content) {--newline--        String[] dirs = filePath.split(\"/\");--newline--        File node = root;--newline--        for (String dir : dirs) {--newline--            if (dir.length() == 0) continue;--newline--            if (!node.children.containsKey(dir)) {--newline--                File file = new File();--newline--                node.children.put(dir, file);--newline--            }--newline--            node = node.children.get(dir);--newline--        }--newline--        node.isFile = true;--newline--        node.content += content;--newline--    }--newline--    --newline--    public String readContentFromFile(String filePath) {--newline--        String[] dirs = filePath.split(\"/\");--newline--        File node = root;--newline--        for (String dir : dirs) {--newline--            if (dir.length() == 0) continue;--newline--            if (!node.children.containsKey(dir)) {--newline--                File file = new File();--newline--                node.children.put(dir, file);--newline--            }--newline--            node = node.children.get(dir);--newline--        }--newline----newline--        return node.content;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Solution, File class"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class FileSystem {--newline--private:--newline--    struct TrieNode {--newline--        bool isFile;--newline--        string content;--newline--        unordered_map<string, TrieNode *> children;--newline--        TrieNode() : isFile(false) {}--newline--    };--newline----newline--    TrieNode *root;--newline--    --newline--public:--newline--    FileSystem() {--newline--        root = new TrieNode();--newline--    }--newline--    --newline--    vector<string> getStrs(string &path) {--newline--        vector<string> ans;--newline--        int i = 1, j = 1;--newline--        while (j <= path.length()) {--newline--            if (i != j && (j == path.length() || path[j] == '/')) {--newline--                ans.push_back(path.substr(i, j - i));--newline--                i = j + 1;--newline--            }--newline--            ++j;--newline--        }--newline--        return ans;--newline--    }--newline--    --newline--    vector<string> ls(string path) {--newline--        vector<string> strs = getStrs(path);--newline--        TrieNode *curr = root;--newline--        for (string &str : strs)--newline--            curr = curr->children[str];--newline--        --newline--        if (curr->isFile)--newline--            return {strs.back()};--newline--        --newline--        vector<string> ans;--newline--        for (auto &p : curr->children)--newline--            ans.push_back(p.first);--newline--        sort(ans.begin(), ans.end());--newline--        return ans;--newline--    }--newline--    --newline--    void mkdir(string path) {--newline--        vector<string> strs = getStrs(path);--newline--        TrieNode *curr = root;--newline--        for (string &str : strs) {--newline--            if (!curr->children.count(str))--newline--                curr->children[str] = new TrieNode();--newline--            curr = curr->children[str];--newline--        }--newline--    }--newline--    --newline--    void addContentToFile(string filePath, string content) {--newline--        vector<string> strs = getStrs(filePath);--newline--        TrieNode *curr = root;--newline--        for (string &str : strs) {--newline--            if (!curr->children.count(str))--newline--                curr->children[str] = new TrieNode();--newline--            curr = curr->children[str];--newline--        }--newline--        curr->isFile = true;--newline--        curr->content += content;--newline--    }--newline--    --newline--    string readContentFromFile(string filePath) {--newline--        vector<string> strs = getStrs(filePath);--newline--        TrieNode *curr = root;--newline--        for (string &str : strs)--newline--            curr = curr->children[str];--newline--        return curr->content;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "C++ Trie Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "def path_split(path):--newline--    return [frag for frag in path.split('/') if frag.strip() != '']--newline----newline--class FileSystem(object):--newline----tab----newline----tab--    def __init__(self):--newline----tab--        self.fs = {}--newline----tab--    --newline----tab--    def ls(self, path):--newline----tab--        \"\"\"--newline----tab--        :type path: str--newline----tab--        :rtype: List[str]--newline----tab--        \"\"\"--newline----tab--        curr = self.fs--newline----tab--        frags = path_split(path)--newline----tab--        for frag in frags:--newline----tab--            if frag not in curr:--newline----tab--                curr[frag] = {}--newline----tab--            curr = curr[frag]--newline----tab--            if type(curr) == unicode:--newline----tab--                return [frags[-1]]--newline----tab--        return sorted(curr.keys())--newline----tab----newline----tab--    def mkdir(self, path):--newline----tab--        \"\"\"--newline----tab--        :type path: str--newline----tab--        :rtype: void--newline----tab--        \"\"\"--newline----tab--        curr = self.fs--newline----tab--        frags = path_split(path)--newline----tab--        for frag in frags:--newline----tab--            if frag not in curr:--newline----tab--                curr[frag] = {}--newline----tab--            curr = curr[frag]--newline----tab--        --newline----tab----newline----tab--    def addContentToFile(self, filePath, content):--newline----tab--        \"\"\"--newline----tab--        :type filePath: str--newline----tab--        :type content: str--newline----tab--        :rtype: void--newline----tab--        \"\"\"--newline----tab--        curr = self.fs--newline----tab--        frags = path_split(filePath)--newline----tab--        for frag in frags[:-1]:--newline----tab--            if frag not in curr:--newline----tab--                curr[frag] = {}--newline----tab--            curr = curr[frag]--newline----tab--        file_name = frags[-1]--newline----tab--        if file_name not in curr:--newline----tab--            curr[file_name] = ''--newline----tab--        curr[file_name] += content--newline----tab--        --newline----tab----newline----tab--    def readContentFromFile(self, filePath):--newline----tab--        \"\"\"--newline----tab--        :type filePath: str--newline----tab--        :rtype: str--newline----tab--        \"\"\"--newline----tab--        curr = self.fs--newline----tab--        frags = path_split(filePath)--newline----tab--        for frag in frags[:-1]:--newline----tab--            if frag not in curr:--newline----tab--                curr[frag] = {}--newline----tab--            curr = curr[frag]--newline----tab--        file_name = frags[-1]--newline----tab--        return curr[file_name]--newline----tab----newline----tab----newline----tab--# Your FileSystem object will be instantiated and called as such:--newline----tab--# obj = FileSystem()--newline----tab--# param_1 = obj.ls(path)--newline----tab--# obj.mkdir(path)--newline----tab--# obj.addContentToFile(filePath,content)--newline----tab--# param_4 = obj.readContentFromFile(filePath)--newline----tab--",
            "topic_title": "Straightforward Python Solution"
        },
        {
            "java": "public class FileSystem {--newline--    --newline--    private class TreeNode implements Comparable<TreeNode> {--newline--        String label;--newline--        boolean isDir;--newline--        Map<String, TreeNode> dirContents = new TreeMap<>();--newline--        String fileContents;--newline--        --newline--        public int compareTo(TreeNode other) {--newline--            return label.compareTo(other.label);--newline--        }--newline--        --newline--        public int hashCode() {--newline--            return Objects.hash(label);--newline--        }--newline--        --newline--        public boolean equals(Object treeNode) {--newline--            TreeNode other = (TreeNode) treeNode;--newline--            return Objects.equals(label, other.label);--newline--        }--newline--    }    --newline--    --newline--    private TreeNode sentinel = new TreeNode();--newline----newline--    public FileSystem() {--newline--        TreeNode root = new TreeNode();--newline--        root.label = \"\";--newline--        root.isDir = true;--newline--        sentinel.dirContents.put(\"\", root);--newline--    }--newline--    --newline--    public List<String> ls(String path) {--newline--        String[] labels = path.split(\"/\");--newline--        TreeNode curr = (labels.length != 0) ? sentinel : sentinel.dirContents.get(\"\");--newline--        List<String> result = new ArrayList<>();--newline--        for(String label : labels) {--newline--            curr = curr.dirContents.get(label);--newline--            System.out.println(\">>\" + curr);--newline--        }--newline--        if(curr.isDir) {--newline--            for(String label : curr.dirContents.keySet()) {--newline--                result.add(label);--newline--            }--newline--        }--newline--        else {--newline--            result.add(curr.label);--newline--        }--newline--        --newline--        return result;--newline--    }--newline--    --newline--    public void mkdir(String path) {--newline--        String[] labels = path.split(\"/\");--newline--        TreeNode curr = sentinel;--newline--        int currIndex = 0;--newline--        for(String label : labels) {--newline--            TreeNode next = curr.dirContents.get(label);--newline--            if(next == null) {--newline--                break;--newline--            }--newline--            currIndex++;--newline--            curr = next;--newline--        }--newline--        --newline--        for(int i = currIndex; i < labels.length; i++) {--newline--            TreeNode newDir = new TreeNode();--newline--            newDir.isDir = true;--newline--            newDir.label = labels[i];--newline--            curr.dirContents.put(labels[i], newDir);--newline--            --newline--            curr = newDir;--newline--        }--newline--    }--newline--    --newline--    public void addContentToFile(String filePath, String content) {--newline--        String[] labels = filePath.split(\"/\");--newline--        TreeNode curr = sentinel, prev = null;--newline--        --newline--        for(String label : labels) {--newline--            prev = curr;--newline--            if(curr == null) {--newline--                break;--newline--            }--newline--            curr = curr.dirContents.get(label);--newline--        }--newline--        --newline--        if(curr == null) {--newline--            curr = new TreeNode();--newline--            curr.isDir = false;--newline--            curr.label = labels[labels.length - 1];--newline--            curr.fileContents = content;--newline--            prev.dirContents.put(curr.label, curr);--newline--        }--newline--        else {--newline--            curr.fileContents = curr.fileContents == null ? content : curr.fileContents + content;--newline--        }--newline--    }--newline--    --newline--    public String readContentFromFile(String filePath) {--newline--        String[] labels = filePath.split(\"/\");--newline--        TreeNode curr = sentinel;--newline--        --newline--        for(String label : labels) {--newline--            curr = curr.dirContents.get(label);--newline--        }--newline--        --newline--        return (curr.fileContents == null) ? \"\" : curr.fileContents;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "File system as a tree - Java"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "Trie = lambda: collections.defaultdict(Trie)--newline----newline--class FileSystem(object):--newline----tab--    def __init__(self):--newline----tab--        self.fs = Trie()--newline----tab--        self.fileinfo = collections.defaultdict(str)--newline----tab--        --newline----tab--    def ls(self, path):--newline----tab--        if path in self.fileinfo:--newline----tab--            return path.split('/')[-1:]--newline----tab----newline----tab--        cur = self.fs--newline----tab--        for token in path.split('/'):--newline----tab--            if token in cur:--newline----tab--                cur = cur[token]--newline----tab--            elif token:--newline----tab--                return []--newline----tab----newline----tab--        return sorted(cur.keys())--newline----tab----newline----tab--    def mkdir(self, path):--newline----tab--        cur = self.fs--newline----tab--        for token in path.split('/'):--newline----tab--            if token: cur = cur[token]--newline----tab----newline----tab--    def addContentToFile(self, filePath, content):--newline----tab--        self.mkdir(filePath)--newline----tab--        self.fileinfo[filePath] += content--newline----tab----newline----tab--    def readContentFromFile(self, filePath):--newline----tab--        return self.fileinfo[filePath]--newline----tab--",
            "topic_title": "Python, Straightforward with Explanation"
        }
    ],
    "qc": "588.json"
}