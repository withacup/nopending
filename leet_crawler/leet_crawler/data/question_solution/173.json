{
    "posts": [
        {
            "java": "public class BSTIterator {--newline--    private Stack<TreeNode> stack = new Stack<TreeNode>();--newline--    --newline--    public BSTIterator(TreeNode root) {--newline--        pushAll(root);--newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    public boolean hasNext() {--newline--        return !stack.isEmpty();--newline--    }--newline----newline--    /** @return the next smallest number */--newline--    public int next() {--newline--        TreeNode tmpNode = stack.pop();--newline--        pushAll(tmpNode.right);--newline--        return tmpNode.val;--newline--    }--newline--    --newline--    private void pushAll(TreeNode node) {--newline--        for (; node != null; stack.push(node), node = node.left);--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": "class BSTIterator {--newline--    stack<TreeNode *> myStack;--newline--public:--newline--    BSTIterator(TreeNode *root) {--newline--        pushAll(root);--newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    bool hasNext() {--newline--        return !myStack.empty();--newline--    }--newline----newline--    /** @return the next smallest number */--newline--    int next() {--newline--        TreeNode *tmpNode = myStack.top();--newline--        myStack.pop();--newline--        pushAll(tmpNode->right);--newline--        return tmpNode->val;--newline--    }--newline----newline--private:--newline--    void pushAll(TreeNode *node) {--newline--        for (; node != NULL; myStack.push(node), node = node->left);--newline--    }--newline--};--newline--",
            "python": "class BSTIterator:--newline----tab--    # @param root, a binary search tree's root node--newline----tab--    def __init__(self, root):--newline----tab--        self.stack = list()--newline----tab--        self.pushAll(root)--newline----tab----newline----tab--    # @return a boolean, whether we have a next smallest number--newline----tab--    def hasNext(self):--newline----tab--        return self.stack--newline----tab----newline----tab--    # @return an integer, the next smallest number--newline----tab--    def next(self):--newline----tab--        tmpNode = self.stack.pop()--newline----tab--        self.pushAll(tmpNode.right)--newline----tab--        return tmpNode.val--newline----tab--        --newline----tab--    def pushAll(self, node):--newline----tab--        while node is not None:--newline----tab--            self.stack.append(node)--newline----tab--            node = node.left",
            "topic_title": "My solutions in 3 languages with Stack"
        },
        {
            "java": "/**--newline-- * Definition for binary tree--newline-- * public class TreeNode {--newline-- *     int val;--newline-- *     TreeNode left;--newline-- *     TreeNode right;--newline-- *     TreeNode(int x) { val = x; }--newline-- * }--newline-- */--newline----newline--public class BSTIterator {--newline--    --newline--    private Stack<TreeNode> stack;--newline--    public BSTIterator(TreeNode root) {--newline--        stack = new Stack<>();--newline--        TreeNode cur = root;--newline--        while(cur != null){--newline--            stack.push(cur);--newline--            if(cur.left != null)--newline--                cur = cur.left;--newline--            else--newline--                break;--newline--        }--newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    public boolean hasNext() {--newline--        return !stack.isEmpty();--newline--    }--newline----newline--    /** @return the next smallest number */--newline--    public int next() {--newline--        TreeNode node = stack.pop();--newline--        TreeNode cur = node;--newline--        // traversal right branch--newline--        if(cur.right != null){--newline--            cur = cur.right;--newline--            while(cur != null){--newline--                stack.push(cur);--newline--                if(cur.left != null)--newline--                    cur = cur.left;--newline--                else--newline--                    break;--newline--            }--newline--        }--newline--        return node.val;--newline--    }--newline--}--newline----newline--/**--newline-- * Your BSTIterator will be called like this:--newline-- * BSTIterator i = new BSTIterator(root);--newline-- * while (i.hasNext()) v[f()] = i.next();--newline-- */",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Ideal Solution using Stack (Java)"
        },
        {
            "java": "public class BSTIterator {--newline--    --newline--        Stack<TreeNode> stack =  null ;            --newline--        TreeNode current = null ;--newline--    --tab----newline--        public BSTIterator(TreeNode root) {--newline--        --tab--  current = root;--tab--     --newline--        --tab--  stack = new Stack<> ();--newline--    --tab--}--newline--    --newline--    --tab--/** @return whether we have a next smallest number */--newline--    --tab--public boolean hasNext() {--tab----tab--  --newline--    --tab--      return !stack.isEmpty() || current != null;  --newline--    --tab--}--newline--    --newline--    --tab--    /** @return the next smallest number */--newline--    --tab--public int next() {--newline--    --tab----tab--while (current != null) {--newline--    --tab----tab----tab--stack.push(current);--newline--    --tab----tab----tab--current = current.left ;--newline--    --tab----tab--}--tab----tab----newline--    --tab----tab--TreeNode t = stack.pop() ;--tab----tab----newline--    --tab----tab--current = t.right ;--tab----tab----newline--    --tab----tab--return t.val ;--newline--    --tab--}--newline--    }",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My java accepted solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class BSTIterator {--newline--private:--newline--    stack<TreeNode*> st;--newline--public:--newline--    BSTIterator(TreeNode *root) {--newline--        find_left(root);--newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    bool hasNext() {--newline--        if (st.empty())--newline--            return false;--newline--        return true;--newline--    }--newline----newline--    /** @return the next smallest number */--newline--    int next() {--newline--        TreeNode* top = st.top();--newline--        st.pop();--newline--        if (top->right != NULL)--newline--            find_left(top->right);--newline--            --newline--        return top->val;--newline--    }--newline--    --newline--    /** put all the left child() of root */--newline--    void find_left(TreeNode* root)--newline--    {--newline--        TreeNode* p = root;--newline--        while (p != NULL)--newline--        {--newline--            st.push(p);--newline--            p = p->left;--newline--        }--newline--    }--newline--};",
            "python": null,
            "topic_title": "My Solution in C++, in average O(1) time and uses O(h) memory"
        },
        {
            "java": "public class BSTIterator {--newline--    private Stack<TreeNode> stack = new Stack<TreeNode>();--newline--    --newline--    public BSTIterator(TreeNode root) {--newline--        pushAllNodes(root);--newline--    }--newline--    --newline--    /** @return whether we have a next smallest number */--newline--    public boolean hasNext() {--newline--        return !stack.isEmpty();--newline--    }--newline--    --newline--    /** @return the next smallest number */--newline--    public int next() {--newline--        TreeNode minNode = stack.pop();--newline--        pushAllNodes(minNode.right);--newline--        return minNode.val;--newline--    }--newline--    --newline--    private void pushAllNodes(TreeNode node) {--newline--        while(node != null)--newline--        {--newline--            stack.push(node);--newline--            node = node.left;--newline--        }--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My Solution with less than 10 lines of code"
        }
    ],
    "qc": "173.json"
}