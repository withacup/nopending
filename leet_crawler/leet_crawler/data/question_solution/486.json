{
    "posts": [
        {
            "java": "public class Solution {--newline--    public boolean PredictTheWinner(int[] nums) {--newline--        return helper(nums, 0, nums.length-1, new Integer[nums.length][nums.length])>=0;--newline--    }--newline--    private int helper(int[] nums, int s, int e, Integer[][] mem){    --newline--        if(mem[s][e]==null)--newline--            mem[s][e] = s==e ? nums[e] : Math.max(nums[e]-helper(nums,s,e-1,mem),nums[s]-helper(nums,s+1,e,mem));--newline--        return mem[s][e];--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java 1 Line Recursion Solution"
        },
        {
            "java": "public class Solution {--newline--    --newline--    public boolean PredictTheWinner(int[] nums) {--newline--        if (nums == null) { return true; }--newline--        int n = nums.length;--newline--        if ((n & 1) == 0) { return true; } // Improved with hot13399's comment.--newline--        int[] dp = new int[n];--newline--        for (int i = n - 1; i >= 0; i--) {--newline--            for (int j = i; j < n; j++) {--newline--                if (i == j) {--newline--                    dp[i] = nums[i];--newline--                } else {--newline--                    dp[j] = Math.max(nums[i] - dp[j], nums[j] - dp[j - 1]);--newline--                }--newline--            }--newline--        }--newline--        return dp[n - 1] >= 0;--newline--    }--newline--    --newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "JAVA 9 lines DP solution, easy to understand with improvement to O(N) space complexity."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    bool PredictTheWinner(vector<int>& nums) {--newline--        if(nums.size()% 2 == 0) return true;--newline--        --newline--        int n = nums.size();--newline--        vector<vector<int>> dp(n, vector<int>(n, -1));--newline--        --newline--        int myBest = utill(nums, dp, 0, n-1);--newline--        return 2*myBest >= accumulate(nums.begin(), nums.end(), 0);--newline--    }--newline--    --newline--    int utill(vector<int>& v, vector<vector<int>> &dp, int i, int j){--newline--        if(i > j) return 0;--newline--        if(dp[i][j] != -1) return dp[i][j];--newline--        --newline--        int a = v[i] + min(utill(v,dp, i+1, j-1), utill(v, dp, i+2, j));--newline--        int b = v[j] + min(utill(v,dp,i, j-2), utill(v,dp, i+1, j-1));--newline--        dp[i][j] = max(a, b);--newline--                        --newline--        return dp[i][j];--newline--    }--newline--};",
            "python": null,
            "topic_title": "DP O(n^2)  + MIT OCW solution explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    bool PredictTheWinner(vector<int>& nums) {--newline--        int n = nums.size();--newline--        vector<vector<int>> dp(n, vector<int>(n)); // use to keep the score gap between player1 and player2--newline--        for (int i = 0; i < n; i++) dp[i][i] = nums[i];--newline--        for (int i = 1; i < n; i++) {--newline--            for (int j = 0; j+i < n; j++) {--newline--                dp[j][j+i] = max(nums[j+i]-dp[j][j+i-1], nums[j]-dp[j+1][j+i]);--newline--            }--newline--        }--newline--        return dp[0][n-1] >= 0; // player1 get more score points than player2--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "C++ DP solution with explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--        bool PredictTheWinner(vector<int>& nums) {--newline--            vector<vector<int>> score(nums.size(), vector<int>(nums.size()));--newline--            vector<int> prefixSum(nums.size()+1);--newline--            prefixSum[0] = 0;--newline--            for (int i=0; i<nums.size(); i++) {--newline--                prefixSum[i+1] = prefixSum[i] + nums[i];--newline--            }--newline--            --newline--            for (int len=1; len<=nums.size(); len++) {--newline--                for (int lhs=0; lhs+len-1<nums.size(); lhs++) {--newline--                    int rhs = lhs + len - 1;--newline--                    if (lhs == rhs) {--newline--                        score[lhs][rhs] = nums[lhs];--newline--                    } else if (lhs == rhs-1) {--newline--                        score[lhs][rhs] = max(nums[lhs], nums[rhs]);--newline--                    } else {--newline--                        int pickLeft = nums[lhs] + prefixSum[rhs+1] - prefixSum[lhs+1] - score[lhs+1][rhs];--newline--                        int pickRight = nums[rhs] + prefixSum[rhs] - prefixSum[lhs] - score[lhs][rhs-1];--newline--                        score[lhs][rhs] = max(pickLeft, pickRight);--newline--                    }--newline--                }--newline--            }--newline--            --newline--            return score[0][nums.size()-1] >= prefixSum.back()/2 + prefixSum.back()%2;--newline--        }--newline--    --newline--}",
            "python": null,
            "topic_title": "Clean 3ms C++ DP solution with detailed explanation"
        }
    ],
    "qc": "486.json"
}