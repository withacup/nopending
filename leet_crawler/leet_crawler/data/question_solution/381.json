{
    "posts": [
        {
            "java": "public class RandomizedCollection {--newline--    ArrayList<Integer> nums;--newline----tab--HashMap<Integer, Set<Integer>> locs;--newline----tab--java.util.Random rand = new java.util.Random();--newline--    /** Initialize your data structure here. */--newline--    public RandomizedCollection() {--newline--        nums = new ArrayList<Integer>();--newline----tab--    locs = new HashMap<Integer, Set<Integer>>();--newline--    }--newline--    --newline--    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--    public boolean insert(int val) {--newline--        boolean contain = locs.containsKey(val);--newline----tab--    if ( ! contain ) locs.put( val, new LinkedHashSet<Integer>() ); --newline----tab--    locs.get(val).add(nums.size());        --newline----tab--    nums.add(val);--newline----tab--    return ! contain ;--newline--    }--newline--    --newline--    /** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--    public boolean remove(int val) {--newline--        boolean contain = locs.containsKey(val);--newline----tab--    if ( ! contain ) return false;--newline----tab--    int loc = locs.get(val).iterator().next();--newline----tab--    locs.get(val).remove(loc);--newline----tab--    if (loc < nums.size() - 1 ) {--newline----tab--       int lastone = nums.get( nums.size()-1 );--newline----tab--       nums.set( loc , lastone );--newline----tab--       locs.get(lastone).remove( nums.size()-1);--newline----tab--       locs.get(lastone).add(loc);--newline----tab--    }--newline----tab--    nums.remove(nums.size() - 1);--newline----tab--   --newline----tab--    if (locs.get(val).isEmpty()) locs.remove(val);--newline----tab--    return true;--newline--    }--newline--    --newline--    /** Get a random element from the collection. */--newline--    public int getRandom() {--newline--        return nums.get( rand.nextInt(nums.size()) );--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java HaspMap, LinkedHashSet, ArrayList (155 ms)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class RandomizedCollection {--newline--public:--newline--    /** Initialize your data structure here. */--newline--    RandomizedCollection() {--newline--        --newline--    }--newline--    --newline--    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--    bool insert(int val) {--newline--        auto result = m.find(val) == m.end();--newline--        --newline--        m[val].push_back(nums.size());--newline--        nums.push_back(pair<int, int>(val, m[val].size() - 1));--newline--        --newline--        return result;--newline--    }--newline--    --newline--    /** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--    bool remove(int val) {--newline--        auto result = m.find(val) != m.end();--newline--        if(result)--newline--        {--newline--            auto last = nums.back();--newline--            m[last.first][last.second] = m[val].back();--newline--            nums[m[val].back()] = last;--newline--            m[val].pop_back();--newline--            if(m[val].empty()) m.erase(val);--newline--            nums.pop_back();--newline--        }--newline--        return result;--newline--    }--newline--    --newline--    /** Get a random element from the collection. */--newline--    int getRandom() {--newline--        return nums[rand() % nums.size()].first;--newline--    }--newline--private:--newline--    vector<pair<int, int>> nums;--newline--    unordered_map<int, vector<int>> m;--newline--};--newline--",
            "python": null,
            "topic_title": "C++ 128m Solution, Real O(1) Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "import random--newline----newline--class RandomizedCollection(object):--newline----tab----newline----tab--    def __init__(self):--newline----tab--        self.vals, self.idxs = [], collections.defaultdict(set)--newline----tab--        --newline----tab----newline----tab--    def insert(self, val):--newline----tab--        self.vals.append(val)--newline----tab--        self.idxs[val].add(len(self.vals) - 1)--newline----tab--        return len(self.idxs[val]) == 1--newline----tab--        --newline----tab----newline----tab--    def remove(self, val):--newline----tab--        if self.idxs[val]:--newline----tab--            out, ins = self.idxs[val].pop(), self.vals[-1]--newline----tab--            self.vals[out] = ins--newline----tab--            if self.idxs[ins]:--newline----tab--                self.idxs[ins].add(out)--newline----tab--                self.idxs[ins].discard(len(self.vals) - 1)--newline----tab--            self.vals.pop()--newline----tab--            return True--newline----tab--        return False --newline----tab----newline----tab--    def getRandom(self):--newline----tab--        return random.choice(self.vals)",
            "topic_title": "Frugal Python code"
        },
        {
            "java": "public class RandomizedCollection {--newline----newline--    ArrayList<Integer> result;--newline--    HashMap<Integer, LinkedHashSet<Integer>> map;--newline--    --newline--    public RandomizedCollection() {--newline--        result = new ArrayList<Integer>();--newline--        map = new HashMap<Integer, LinkedHashSet<Integer>>();--newline--    }--newline--    --newline--    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */--newline--    public boolean insert(int val) {--newline--        // Add item to map if it doesn't already exist.--newline--        boolean alreadyExists = map.containsKey(val);--newline--        if(!alreadyExists) {--newline--            map.put(val, new LinkedHashSet<Integer>());--newline--        }--newline--        map.get(val).add(result.size());--newline--        result.add(val);--newline--        return !alreadyExists;--newline--    }--newline--    --newline--    /** Removes a value from the collection. Returns true if the collection contained the specified element. */--newline--    public boolean remove(int val) {--newline--        if(!map.containsKey(val)) {--newline--            return false;--newline--        }--newline--        // Get arbitary index of the ArrayList that contains val--newline--        LinkedHashSet<Integer> valSet = map.get(val);--newline--        int indexToReplace = valSet.iterator().next();--newline--        --newline--        // Obtain the set of the number in the last place of the ArrayList--newline--        int numAtLastPlace = result.get(result.size() - 1);--newline--        LinkedHashSet<Integer> replaceWith = map.get(numAtLastPlace);--newline--        --newline--        // Replace val at arbitary index with very last number--newline--        result.set(indexToReplace, numAtLastPlace);--newline--        --newline--        // Remove appropriate index--newline--        valSet.remove(indexToReplace);--newline--        --newline--        // Don't change set if we were replacing the removed item with the same number--newline--        if(indexToReplace != result.size() - 1) {--newline--            replaceWith.remove(result.size() - 1);--newline--            replaceWith.add(indexToReplace);--newline--        }--newline--        result.remove(result.size() - 1);--newline--        --newline--        // Remove map entry if set is now empty, then return--newline--        if(valSet.isEmpty()) {--newline--            map.remove(val);--newline--        }--newline--        return true;--newline--    }--newline--    --newline--    /** Get a random element from the collection. */--newline--    public int getRandom() {--newline--        // Get linearly random item--newline--        return result.get((int)(Math.random() * result.size()));--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Clean O(1) Java Solution with HashMap and Set"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class RandomizedCollection {--newline--private:--newline--    map<int, vector<int>> dic;--newline--    vector<int> arr;--newline--    --newline--public:--newline--    RandomizedCollection() {--newline--    }--newline----newline--    bool insert(int val) {--newline--        arr.push_back(val);//add val in arr--newline--        dic[val].push_back(arr.size() - 1);//add its index in dic[val]--newline--        return dic[val].size() == 1;--newline--    }--newline--    --newline--    bool remove(int val) {--newline--        if(dic[val].size() == 0)--newline--        {--newline--            return false;--newline--        }--newline--        int idx = dic[val].back();//arr[idx] = val--newline--        dic[val].pop_back();--newline--       //swap arr[idx] and arr[arr.size()-1] if idx != arr.size()-1--newline--       //modify the dic at the same time.--newline--        if(arr.size() - 1 != idx);--newline--        {--newline--            int tmp = arr.back();--newline--            arr[idx] = tmp;--newline--     //the new index of tmp is now idx, so modify the dic accordingly.--newline--            dic[tmp].pop_back();--newline--            dic[tmp].push_back(idx);--newline--        }--newline--       //remove the last element in arr--newline--        arr.pop_back();--newline--        return true;--newline--    }--newline----newline--    int getRandom() {--newline--        return arr[rand()%arr.size()];--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "C++ solution using map and vector with detailed explanation"
        }
    ],
    "qc": "381.json"
}