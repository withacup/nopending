{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int sumNumbers(TreeNode root) {--newline--    --tab--return sum(root, 0);--newline--    }--newline--    --newline--    public int sum(TreeNode n, int s){--newline--    --tab--if (n == null) return 0;--newline--    --tab--if (n.right == null && n.left == null) return s*10 + n.val;--newline--    --tab--return sum(n.left, s*10 + n.val) + sum(n.right, s*10 + n.val);--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Short Java solution. Recursion."
        },
        {
            "java": "/**--newline-- * Definition for binary tree--newline-- * public class TreeNode {--newline-- *     int val;--newline-- *     TreeNode left;--newline-- *     TreeNode right;--newline-- *     TreeNode(int x) { val = x; }--newline-- * }--newline-- */--newline--public class Solution {--newline--    public int sumNumbers(TreeNode root) {--newline--        if (root == null)--newline--            return 0;--newline--        return sumR(root, 0);--newline--    }--newline--    public int sumR(TreeNode root, int x) {--newline--        if (root.right == null && root.left == null)--newline--            return 10 * x + root.val;--newline--        int val = 0;--newline--        if (root.left != null)--newline--            val += sumR(root.left, 10 * x + root.val);--newline--        if (root.right != null)--newline--            val += sumR(root.right, 10 * x + root.val);--newline--        return val;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Can you improve this algorithm?"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "/**--newline-- * Definition for binary tree--newline-- * struct TreeNode {--newline-- *     int val;--newline-- *     TreeNode *left;--newline-- *     TreeNode *right;--newline-- *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}--newline-- * };--newline-- */--newline--class Solution {--newline--public:--newline--    int sumNumbers(TreeNode *root) {--newline--       return  sumNumberUtil(root,0);--newline--        --newline--    }--newline--    // preorder--newline--    int sumNumberUtil(struct TreeNode* node, int val)--newline--    {--newline--        if(node==NULL)--newline--        return 0;--newline--        --newline--        val= val*10+node->val;--newline--        if(node->left==NULL && node->right==NULL)--newline--        {--newline--            return val;--newline--        }--newline--        --newline--        return sumNumberUtil(node->left,val)+sumNumberUtil(node->right, val);--newline--    }--newline--};",
            "python": null,
            "topic_title": "One of the easier solution using preorder traversal (recursion)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    # dfs + stack--newline----tab--    def sumNumbers1(self, root):--newline----tab--        if not root:--newline----tab--            return 0--newline----tab--        stack, res = [(root, root.val)], 0--newline----tab--        while stack:--newline----tab--            node, value = stack.pop()--newline----tab--            if node:--newline----tab--                if not node.left and not node.right:--newline----tab--                    res += value--newline----tab--                if node.right:--newline----tab--                    stack.append((node.right, value*10+node.right.val))--newline----tab--                if node.left:--newline----tab--                    stack.append((node.left, value*10+node.left.val))--newline----tab--        return res--newline----tab--        --newline----tab--    # bfs + queue--newline----tab--    def sumNumbers2(self, root):--newline----tab--        if not root:--newline----tab--            return 0--newline----tab--        queue, res = collections.deque([(root, root.val)]), 0--newline----tab--        while queue:--newline----tab--            node, value = queue.popleft()--newline----tab--            if node:--newline----tab--                if not node.left and not node.right:--newline----tab--                    res += value--newline----tab--                if node.left:--newline----tab--                    queue.append((node.left, value*10+node.left.val))--newline----tab--                if node.right:--newline----tab--                    queue.append((node.right, value*10+node.right.val))--newline----tab--        return res--newline----tab--        --newline----tab--    # recursively --newline----tab--    def sumNumbers(self, root):--newline----tab--        self.res = 0--newline----tab--        self.dfs(root, 0)--newline----tab--        return self.res--newline----tab--        --newline----tab--    def dfs(self, root, value):--newline----tab--        if root:--newline----tab--            #if not root.left and not root.right:--newline----tab--            #    self.res += value*10 + root.val--newline----tab--            self.dfs(root.left, value*10+root.val)--newline----tab--            #if not root.left and not root.right:--newline----tab--            #    self.res += value*10 + root.val--newline----tab--            self.dfs(root.right, value*10+root.val)--newline----tab--            if not root.left and not root.right:--newline----tab--                self.res += value*10 + root.val",
            "topic_title": "Python solutions (dfs+stack, bfs+queue, dfs recursively)."
        },
        {
            "java": "public class Solution {--newline--    int total;--newline--    --newline--    public int sumNumbers(TreeNode root) {--newline--        total = 0;--newline--        helper(root, 0);--newline--        return total;--newline--    }--newline--    --newline--    void helper(TreeNode root, int sum) {--newline--        if (root == null) return;--newline--        --newline--        sum = sum * 10 + root.val;--newline--        --newline--        if (root.left == null && root.right == null) {--newline--            total += sum;--newline--            return;--newline--        }--newline--        --newline--        helper(root.left, sum);--newline--        helper(root.right, sum);--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Clean Java DFS solution (preorder traversal)"
        }
    ],
    "qc": "129.json"
}