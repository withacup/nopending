{
    "posts": [
        {
            "java": "public class Solution {--newline--    public String validIPAddress(String IP) {--newline--    --tab--if(isValidIPv4(IP)) return \"IPv4\";--newline--    --tab--else if(isValidIPv6(IP)) return \"IPv6\";--newline--    --tab--else return \"Neither\";--newline--    }--newline--    --newline--    public boolean isValidIPv4(String ip) {--newline--    --tab--if(ip.length()<7) return false;--newline--    --tab--if(ip.charAt(0)=='.') return false;--newline--    --tab--if(ip.charAt(ip.length()-1)=='.') return false;--newline--    --tab--String[] tokens = ip.split(\"\\\\.\");--newline--    --tab--if(tokens.length!=4) return false;--newline--    --tab--for(String token:tokens) {--newline--    --tab----tab--if(!isValidIPv4Token(token)) return false;--newline--    --tab--}--newline--    --tab--return true;--newline--    }--newline--    public boolean isValidIPv4Token(String token) {--newline--    --tab--if(token.startsWith(\"0\") && token.length()>1) return false;--newline--    --tab--try {--newline--    --tab----tab--int parsedInt = Integer.parseInt(token);--newline--    --tab----tab--if(parsedInt<0 || parsedInt>255) return false;--newline--    --tab----tab--if(parsedInt==0 && token.charAt(0)!='0') return false;--newline--    --tab--} catch(NumberFormatException nfe) {--newline--    --tab----tab--return false;--newline--    --tab--}--newline--    --tab--return true;--newline--    }--newline--    --tab----newline--    public boolean isValidIPv6(String ip) {--newline--    --tab--if(ip.length()<15) return false;--newline--    --tab--if(ip.charAt(0)==':') return false;--newline--    --tab--if(ip.charAt(ip.length()-1)==':') return false;--newline--    --tab--String[] tokens = ip.split(\":\");--newline--    --tab--if(tokens.length!=8) return false;--newline--    --tab--for(String token: tokens) {--newline--    --tab----tab--if(!isValidIPv6Token(token)) return false;--newline--    --tab--}--newline--    --tab--return true;--newline--    }--newline--    public boolean isValidIPv6Token(String token) {--newline--    --tab--if(token.length()>4 || token.length()==0) return false;--newline--    --tab--char[] chars = token.toCharArray();--newline--    --tab--for(char c:chars) {--newline--    --tab----tab--boolean isDigit = c>=48 && c<=57;--newline--    --tab----tab--boolean isUppercaseAF = c>=65 && c<=70;--newline--    --tab----tab--boolean isLowerCaseAF = c>=97 && c<=102;--newline--    --tab----tab--if(!(isDigit || isUppercaseAF || isLowerCaseAF)) --newline--    --tab----tab----tab--return false;--newline--    --tab--}--newline--    --tab--return true;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Simple Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    const ip4 = /^([1-9]\\d{0,2}|0)(?:\\.([1-9]\\d{0,2}|0)){3}$/;--newline--    const ip6 = /^([0-9a-fA-F]{1,4})(\\:[0-9a-fA-F]{1,4}){7}$/;--newline--    --newline--    var validIPAddress = function(IP) {--newline--        const isIp4 = ip4.exec(IP);--newline--        if (isIp4 && isIp4.slice(1).every(d => parseInt(d, 10) < 256))--newline--            return 'IPv4';--newline--    --newline--        const isIp6 = ip6.exec(IP);--newline--        if (isIp6)--newline--            return 'IPv6';--newline--        --newline--        return 'Neither';--newline--    };--newline--    --newline--}",
            "python": null,
            "topic_title": "Short RegExp solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--        const string validIPv6Chars = \"0123456789abcdefABCDEF\";--newline--        --newline--        bool isValidIPv4Block(string& block) {--newline--        --tab--int num = 0;--newline--        --tab--if (block.size() > 0 && block.size() <= 3) {--newline--        --tab--    for (int i = 0; i < block.size(); i++) {--newline--        --tab--        char c = block[i];--newline--        --tab--        // special case: if c is a leading zero and there are characters left--newline--        --tab--        if (!isalnum(c) || (i == 0 && c == '0' && block.size() > 1))--newline--        --tab----tab--    return false;--newline--        --tab--        else {--newline--        --tab----tab--    num *= 10;--newline--        --tab----tab--    num += c - '0';--newline--        --tab--        }--newline--        --tab--    }--newline--        --tab--    return num <= 255;--newline--        --tab--}--newline--        --tab--return false;--newline--        }--newline--        --newline--        bool isValidIPv6Block(string& block) {--newline--        --tab--if (block.size() > 0 && block.size() <= 4) {--newline--        --tab--    for (int i = 0; i < block.size(); i++) {--newline--        --tab--        char c = block[i];--newline--        --tab--        if (validIPv6Chars.find(c) == string::npos)--newline--        --tab--    --tab--    return false;--newline--        --tab--    }--newline--        --tab--    return true;--newline--        --tab--}--newline--        --tab--return false;--newline--        }--newline--        --newline--        string validIPAddress(string IP) {--newline--        --tab--string ans[3] = {\"IPv4\", \"IPv6\", \"Neither\"};--newline--        --tab--stringstream ss(IP);--newline--        --tab--string block;--newline--        --tab--// ipv4 candidate--newline--        --tab--if (IP.substr(0, 4).find('.') != string::npos) {--newline--        --tab--    for (int i = 0; i < 4; i++) {--newline--        --tab----tab--if (!getline(ss, block, '.') || !isValidIPv4Block(block))--newline--        --tab--   --tab--    return ans[2];--newline--        --tab--    }--newline--        --tab--    return ss.eof() ? ans[0] : ans[2];--newline--        --tab--}--newline--        --tab--// ipv6 candidate--newline--        --tab--else if (IP.substr(0, 5).find(':') != string::npos) {--newline--        --tab--    for (int i = 0; i < 8; i++) {--newline--        --tab----tab--if (!getline(ss, block, ':') || !isValidIPv6Block(block))--newline--        --tab----tab--    return ans[2];--newline--        --tab--    }--newline--        --tab--    return ss.eof() ? ans[1] : ans[2];--newline--        --tab--}--newline--        --newline--        --tab--return ans[2];--newline--        }--newline--    --newline--}",
            "python": null,
            "topic_title": "C++ solution straightforward string processing"
        },
        {
            "java": "public class Solution {--newline--    public String validIPAddress(String IP) {--newline--        if(IP.matches(\"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\"))return \"IPv4\";--newline--        if(IP.matches(\"(([0-9a-fA-F]{1,4}):){7}([0-9a-fA-F]{1,4})\"))return \"IPv6\";--newline--        return \"Neither\";--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Simple Solution with RegExp"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution(object):--newline----tab--    def validIPAddress(self, IP):--newline----tab--        def is_hex(s):--newline----tab--            hex_digits = set(\"0123456789abcdefABCDEF\")--newline----tab--            for char in s:--newline----tab--                if not (char in hex_digits):--newline----tab--                    return False--newline----tab--            return True--newline----tab--        ary = IP.split('.')--newline----tab--        if len(ary) == 4:--newline----tab--            for i in xrange(len(ary)):--newline----tab--                if not ary[i].isdigit() or not 0 <= int(ary[i]) < 256 or (ary[i][0] == '0' and len(ary[i]) > 1):--newline----tab--                    return \"Neither\"--newline----tab--            return \"IPv4\"--newline----tab--        ary = IP.split(':')--newline----tab--        if len(ary) == 8:--newline----tab--            for i in xrange(len(ary)):--newline----tab--                tmp = ary[i]--newline----tab--                if len(tmp) == 0 or not len(tmp) <= 4 or not is_hex(tmp):    --newline----tab--                    return \"Neither\"--newline----tab--            return \"IPv6\"--newline----tab--        return \"Neither\"--newline----tab--",
            "topic_title": "Python Solution"
        }
    ],
    "qc": "468.json"
}