{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int calculate(String s) {--newline--        Stack<Integer> stack = new Stack<Integer>();--newline--        int result = 0;--newline--        int number = 0;--newline--        int sign = 1;--newline--        for(int i = 0; i < s.length(); i++){--newline--            char c = s.charAt(i);--newline--            if(Character.isDigit(c)){--newline--                number = 10 * number + (int)(c - '0');--newline--            }else if(c == '+'){--newline--                result += sign * number;--newline--                number = 0;--newline--                sign = 1;--newline--            }else if(c == '-'){--newline--                result += sign * number;--newline--                number = 0;--newline--                sign = -1;--newline--            }else if(c == '('){--newline--                //we push the result first, then sign;--newline--                stack.push(result);--newline--                stack.push(sign);--newline--                //reset the sign and result for the value in the parenthesis--newline--                sign = 1;   --newline--                result = 0;--newline--            }else if(c == ')'){--newline--                result += sign * number;  --newline--                number = 0;--newline--                result *= stack.pop();    //stack.pop() is the sign before the parenthesis--newline--                result += stack.pop();   //stack.pop() now is the result calculated before the parenthesis--newline--                --newline--            }--newline--        }--newline--        if(number != 0) result += sign * number;--newline--        return result;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Iterative Java solution with stack"
        },
        {
            "java": "public class Solution {--newline--    public static int calculate(String s) {--newline--    --tab--int len = s.length(), sign = 1, result = 0;--newline--    --tab--Stack<Integer> stack = new Stack<Integer>();--newline--    --tab--for (int i = 0; i < len; i++) {--newline--    --tab----tab--if (Character.isDigit(s.charAt(i))) {--newline--    --tab----tab----tab--int sum = s.charAt(i) - '0';--newline--    --tab----tab----tab--while (i + 1 < len && Character.isDigit(s.charAt(i + 1))) {--newline--    --tab----tab----tab----tab--sum = sum * 10 + s.charAt(i + 1) - '0';--newline--    --tab----tab----tab----tab--i++;--newline--    --tab----tab----tab--}--newline--    --tab----tab----tab--result += sum * sign;--newline--    --tab----tab--} else if (s.charAt(i) == '+')--newline--    --tab----tab----tab--sign = 1;--newline--    --tab----tab--else if (s.charAt(i) == '-')--newline--    --tab----tab----tab--sign = -1;--newline--    --tab----tab--else if (s.charAt(i) == '(') {--newline--    --tab----tab----tab--stack.push(result);--newline--    --tab----tab----tab--stack.push(sign);--newline--    --tab----tab----tab--result = 0;--newline--    --tab----tab----tab--sign = 1;--newline--    --tab----tab--} else if (s.charAt(i) == ')') {--newline--    --tab----tab----tab--result = result * stack.pop() + stack.pop();--newline--    --tab----tab--}--newline--    --newline--    --tab--}--newline--    --tab--return result;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "JAVA-----------Easy Version To Understand!!!!!"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int calculate(string s) {--newline--        stack <int> nums, ops;--newline--        int num = 0;--newline--        int rst = 0;--newline--        int sign = 1;--newline--        for (char c : s) { --newline--            if (isdigit(c)) {--newline--                num = num * 10 + c - '0';--newline--            }--newline--            else {--newline--                rst += sign * num;--newline--                num = 0;--newline--                if (c == '+') sign = 1;--newline--                if (c == '-') sign = -1;--newline--                if (c == '(') {--newline--                    nums.push(rst);--newline--                    ops.push(sign);--newline--                    rst = 0;--newline--                    sign = 1;--newline--                }--newline--                if (c == ')' && ops.size()) {--newline--                    rst = ops.top() * rst + nums.top();--newline--                    ops.pop(); nums.pop();--newline--                }--newline--            }--newline--        }--newline--        rst += sign * num;--newline--        return rst;--newline--    }--newline--};",
            "python": null,
            "topic_title": "16 ms solution in C++ with stacks"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int calculate(string s) {--newline--        int total = 0;--newline--        vector<int> signs(2, 1);--newline--        for (int i=0; i<s.size(); i++) {--newline--            char c = s[i];--newline--            if (c >= '0') {--newline--                int number = 0;--newline--                while (i < s.size()  &&  s[i] >= '0')--newline--                    number = 10 * number + s[i++] - '0';--newline--                total += signs.back() * number;--newline--                signs.pop_back();--newline--                i--;--newline--            }--newline--            else if (c == ')')--newline--                signs.pop_back();--newline--            else if (c != ' ')--newline--                signs.push_back(signs.back() * (c == '-' ? -1 : 1));--newline--        }--newline--        return total;--newline--    }--newline--    --newline--}",
            "python": "class Solution :--newline----tab--    def calculate(self, s):--newline----tab--        total = 0--newline----tab--        i, signs = 0, [1, 1]--newline----tab--        while i < len(s):--newline----tab--            c = s[i]--newline----tab--            if c.isdigit():--newline----tab--                start = i--newline----tab--                while i < len(s) and s[i].isdigit():--newline----tab--                    i += 1--newline----tab--                total += signs.pop() * int(s[start:i])--newline----tab--                continue--newline----tab--            if c in '+-(':--newline----tab--                signs += signs[-1] * (1, -1)[c == '-'],--newline----tab--            elif c == ')':--newline----tab--                signs.pop()--newline----tab--            i += 1--newline----tab--        return total--newline----tab--    ",
            "topic_title": "Easy 18 lines C++, 16 lines Python"
        },
        {
            "java": "public class Solution {--newline--    public int calculate(String s) {--newline--        Deque<Integer> stack = new LinkedList<>();--newline--        int rs = 0;--newline--        int sign = 1;--newline--        stack.push(1);--newline--        for (int i = 0; i < s.length(); i++){--newline--            if (s.charAt(i) == ' ') continue;--newline--            else if (s.charAt(i) == '('){--newline--                stack.push(stack.peekFirst() * sign);--newline--                sign = 1;--newline--            }--newline--            else if (s.charAt(i) == ')') stack.pop();--newline--            else if (s.charAt(i) == '+') sign = 1;--newline--            else if (s.charAt(i) == '-') sign = -1;--newline--            else{--newline--                int temp = s.charAt(i) - '0';--newline--                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1)))--newline--                    temp = temp * 10 + s.charAt(++i) - '0';--newline--                rs += sign * stack.peekFirst() * temp;--newline--            }--newline--        }--newline--        return rs;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java solution&#x2F;Stack"
        }
    ],
    "qc": "224.json"
}