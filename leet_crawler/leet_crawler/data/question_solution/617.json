{
    "qc": "617.json",
    "posts": [
        {
            "python": null,
            "cpp": null,
            "topic_title": "Java Solution, 6 lines, Tree Traversal",
            "is_locked": false,
            "java": "public class Solution {--newline--    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {--newline--        if (t1 == null && t2 == null) return null;--newline--        --newline--        int val = (t1 == null ? 0 : t1.val) + (t2 == null ? 0 : t2.val);--newline--        TreeNode newNode = new TreeNode(val);--newline--        --newline--        newNode.left = mergeTrees(t1 == null ? null : t1.left, t2 == null ? null : t2.left);--newline--        newNode.right = mergeTrees(t1 == null ? null : t1.right, t2 == null ? null : t2.right);--newline--        --newline--        return newNode;--newline--    }--newline--}--newline--"
        },
        {
            "python": null,
            "cpp": "class Solution {--newline--public:--newline--    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {--newline--        if (!t1 && !t2) {--newline--            return nullptr;--newline--        }--newline--        TreeNode* node = new TreeNode((t1 ? t1->val : 0) + (t2 ? t2->val : 0));--newline--        node->left = mergeTrees((t1 ? t1->left : nullptr), (t2 ? t2->left : nullptr));--newline--        node->right = mergeTrees((t1 ? t1->right : nullptr), (t2 ? t2->right : nullptr));--newline--        return node;--newline--    }--newline----newline--};--newline--",
            "topic_title": "C++ Clean Code",
            "is_locked": false,
            "java": null
        },
        {
            "python": "class Solution(object):--newline----tab--    def mergeTrees(self, t1, t2):--newline----tab--        --newline----tab--        if not t1 and not t2:--newline----tab--            return None--newline----tab--        --newline----tab--        elif t1 and not t2:--newline----tab--            return t1--newline----tab--        --newline----tab--        elif t2 and not t1:--newline----tab--            return t2--newline----tab--        --newline----tab--        r = TreeNode(t1.val + t2.val)--newline----tab--        r.left = self.mergeTrees(t1.left, t2.left)--newline----tab--        r.right = self.mergeTrees(t1.right, t2.right)--newline----tab--        return r--newline----tab----newline----tab--# 183 / 183 test cases passed.--newline----tab--# 136 ms--newline----tab--# Percentile (N/A): Leetcode isn't showing percentile graph probably because this problem was just added via a contest.--newline----tab--",
            "cpp": null,
            "topic_title": "Simple Python solution (Recursive)",
            "is_locked": false,
            "java": null
        },
        {},
        {
            "python": null,
            "cpp": null,
            "topic_title": "Simple Java recursive solution - O(n)",
            "is_locked": false,
            "java": null
        }
    ]
}