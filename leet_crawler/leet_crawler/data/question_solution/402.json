{
    "posts": [
        {
            "java": "public class Solution {--newline--    public String removeKdigits(String num, int k) {--newline--        int digits = num.length() - k;--newline--        char[] stk = new char[num.length()];--newline--        int top = 0;--newline--        // k keeps track of how many characters we can remove--newline--        // if the previous character in stk is larger than the current one--newline--        // then removing it will get a smaller number--newline--        // but we can only do so when k is larger than 0--newline--        for (int i = 0; i < num.length(); ++i) {--newline--            char c = num.charAt(i);--newline--            while (top > 0 && stk[top-1] > c && k > 0) {--newline--                top -= 1;--newline--                k -= 1;--newline--            }--newline--            stk[top++] = c;--newline--        }--newline--        // find the index of first non-zero digit--newline--        int idx = 0;--newline--        while (idx < digits && stk[idx] == '0') idx++;--newline--        return idx == digits? \"0\": new String(stk, idx, digits - idx);--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "A greedy method using stack, O(n) time and O(n) space"
        },
        {
            "java": "public class Solution {--newline--    public String removeKdigits(String num, int k) {--newline--        int len = num.length();--newline--        //corner case--newline--        if(k==len)        --newline--            return \"0\";--newline--            --newline--        Stack<Character> stack = new Stack<>();--newline--        int i =0;--newline--        while(i<num.length()){--newline--            //whenever meet a digit which is less than the previous digit, discard the previous one--newline--            while(k>0 && !stack.isEmpty() && stack.peek()>num.charAt(i)){--newline--                stack.pop();--newline--                k--;--newline--            }--newline--            stack.push(num.charAt(i));--newline--            i++;--newline--        }--newline--        --newline--        // corner case like \"1111\"--newline--        while(k>0){--newline--            stack.pop();--newline--            k--;            --newline--        }--newline--        --newline--        //construct the number from the stack--newline--        StringBuilder sb = new StringBuilder();--newline--        while(!stack.isEmpty())--newline--            sb.append(stack.pop());--newline--        sb.reverse();--newline--        --newline--        //remove all the 0 at the head--newline--        while(sb.length()>1 && sb.charAt(0)=='0')--newline--            sb.deleteCharAt(0);--newline--        return sb.toString();--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Straightforward Java Solution Using Stack"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    string removeKdigits(string num, int k) {--newline--            string res;--newline--            int keep = num.size() - k;--newline--            for (int i=0; i<num.size(); i++) {--newline--                while (res.size()>0 && res.back()>num[i] && k>0) {--newline--                    res.pop_back();--newline--                    k--;--newline--                }--newline--                res.push_back(num[i]);--newline--            }--newline--            res.erase(keep, string::npos);--newline--            --newline--            // trim leading zeros--newline--            int s = 0;--newline--            while (s<(int)res.size()-1 && res[s]=='0')  s++;--newline--            res.erase(0, s);--newline--            --newline--            return res==\"\" ? \"0\" : res;--newline--        }--newline--    --newline--}",
            "python": null,
            "topic_title": "Two algorithms with detailed explaination"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def removeKdigits(self, num, k):--newline----tab--        sub = re.compile('1[0]|2[01]|3[0-2]|4[0-3]|5[0-4]|6[0-5]|7[0-6]|8[0-7]|9[0-8]|.$').sub--newline----tab--        for _ in range(k):--newline----tab--            num = sub(lambda m: m.group()[1:], num, 1)--newline----tab--        return num.lstrip('0') or '0'",
            "topic_title": "Short Python, one O(n) and one RegEx"
        },
        {
            "java": "public class Solution {--newline--    public String removeKdigits(String num, int k) {--newline--        int remain = num.length() - k;--newline--        char[] numArray = num.toCharArray(), res = new char[remain];--newline--        int index = 0;--newline--        for(int i = 0; i < numArray.length; i++) {--newline--            // (1)  (n - i > remain - index): have enough remaining digits to be compared--newline--            // (2)  (res[index - 1] > nums[i]): at this time, the (index-1) is the newest added digit,--newline--            //      compare this digit with the current num, if the res is greater and you have enough --newline--            //      remaining digits to be compared, decrease the index(it ensures that the future added digit is --newline--            //      always smaller than before and the size is remain) until get the right and 'safe' position--newline--            while((numArray.length - i > remain - index) && (index > 0 && numArray[i] < res[index - 1])) index--;--newline--            if(index < remain) res[index++] = numArray[i];--newline--        }--newline--        --newline--        // check leading zeroes--newline--        index = -1;--newline--        while(++index < remain) {--newline--            if(res[index] != '0') break;--newline--        }--newline--        String s = new String(res).substring(index);--newline--        --newline--        return s.length() == 0 ? \"0\" : s;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "6ms Java Solution with detailed comment"
        }
    ],
    "qc": "402.json"
}