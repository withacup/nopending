{
    "posts": [
        {
            "java": "public class Solution {--newline--        public int lastRemaining(int n) {--newline--            boolean left = true;--newline--            int remaining = n;--newline--            int step = 1;--newline--            int head = 1;--newline--            while (remaining > 1) {--newline--                if (left || remaining % 2 ==1) {--newline--                    head = head + step;--newline--                }--newline--                remaining = remaining / 2;--newline--                step = step * 2;--newline--                left = !left;--newline--            }--newline--            return head;--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "JAVA: Easiest solution O(logN) with explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int lastRemaining(int n) {--newline--        return n == 1 ? 1 : 2 * (1 + n / 2 - lastRemaining(n / 2));--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "C 1 line solution with explanation"
        },
        {
            "java": "public class Solution {--newline--        public int lastRemaining(int n) {--newline--          return leftToRight(n);--newline--        }--newline--    --newline--        private static int leftToRight(int n) {--newline--          if(n <= 2) return n;--newline--          return 2 * rightToLeft(n / 2);--newline--        }--newline--    --newline--        private static int rightToLeft(int n) {--newline--          if(n <= 2) return 1;--newline--          if(n % 2 == 1) return 2 * leftToRight(n / 2);--newline--          return 2 * leftToRight(n / 2) - 1;--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "O(logN) solution. clear break down"
        },
        {
            "java": "public class Solution {--newline--        public int lastRemaining(int n) {--newline--            Stack<Integer> stack = new Stack<>();--newline--            while (n > 1) {--newline--                n /= 2;--newline--                stack.push(n);--newline--            }--newline--            int result = 1;--newline--            while (!stack.isEmpty()) {--newline--                result = 2 * (1 + stack.pop() - result);--newline--            }--newline--            return result;--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "one line java solution based on Josephus Problem"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int lastRemaining(int n) {--newline--        if (n == 1) return 1;--newline--        if (n <= 4) return 2;--newline--        if (n % 2 != 0) n -= 1;--newline--        if (n % 4 != 0) return 4 * lastRemaining(n/4);--newline--        return 4 * lastRemaining(n/4) - 2;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "C++ 29ms with Complexity of Log4(N) and Explanation"
        }
    ],
    "qc": "390.json"
}