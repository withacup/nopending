{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int romanToInt(String s) {--newline--         int sum=0;--newline--        if(s.indexOf(\"IV\")!=-1){sum-=2;}--newline--        if(s.indexOf(\"IX\")!=-1){sum-=2;}--newline--        if(s.indexOf(\"XL\")!=-1){sum-=20;}--newline--        if(s.indexOf(\"XC\")!=-1){sum-=20;}--newline--        if(s.indexOf(\"CD\")!=-1){sum-=200;}--newline--        if(s.indexOf(\"CM\")!=-1){sum-=200;}--newline--        --newline--        char c[]=s.toCharArray();--newline--        int count=0;--newline--        --newline--       for(;count<=s.length()-1;count++){--newline--           if(c[count]=='M') sum+=1000;--newline--           if(c[count]=='D') sum+=500;--newline--           if(c[count]=='C') sum+=100;--newline--           if(c[count]=='L') sum+=50;--newline--           if(c[count]=='X') sum+=10;--newline--           if(c[count]=='V') sum+=5;--newline--           if(c[count]=='I') sum+=1;--newline--           --newline--       }--newline--       --newline--       return sum;--newline--        --newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My solution for this question but I don&#x27;t know is there any easier way?"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int romanToInt(string s) --newline--    {--newline--        unordered_map<char, int> T = { { 'I' , 1 },--newline--                                       { 'V' , 5 },--newline--                                       { 'X' , 10 },--newline--                                       { 'L' , 50 },--newline--                                       { 'C' , 100 },--newline--                                       { 'D' , 500 },--newline--                                       { 'M' , 1000 } };--newline--                                       --newline--       int sum = T[s.back()];--newline--       for (int i = s.length() - 2; i >= 0; --i) --newline--       {--newline--           if (T[s[i]] < T[s[i + 1]])--newline--           {--newline--               sum -= T[s[i]];--newline--           }--newline--           else--newline--           {--newline--               sum += T[s[i]];--newline--           }--newline--       }--newline--       --newline--       return sum;--newline--    }--newline--}",
            "python": null,
            "topic_title": "Clean O(n) c++ solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution:--newline----tab--# @param {string} s--newline----tab--# @return {integer}--newline----tab--def romanToInt(self, s):--newline----tab--    roman = {'M': 1000,'D': 500 ,'C': 100,'L': 50,'X': 10,'V': 5,'I': 1}--newline----tab--    z = 0--newline----tab--    for i in range(0, len(s) - 1):--newline----tab--        if roman[s[i]] < roman[s[i+1]]:--newline----tab--            z -= roman[s[i]]--newline----tab--        else:--newline----tab--            z += roman[s[i]]--newline----tab--    return z + roman[s[-1]]--newline----tab--",
            "topic_title": "My Straightforward Python Solution"
        },
        {
            "java": "public class Solution {--newline--     public int romanToInt(String s) {--newline--        int nums[]=new int[s.length()];--newline--        for(int i=0;i<s.length();i++){--newline--            switch (s.charAt(i)){--newline--                case 'M':--newline--                    nums[i]=1000;--newline--                    break;--newline--                case 'D':--newline--                    nums[i]=500;--newline--                    break;--newline--                case 'C':--newline--                    nums[i]=100;--newline--                    break;--newline--                case 'L':--newline--                    nums[i]=50;--newline--                    break;--newline--                case 'X' :--newline--                    nums[i]=10;--newline--                    break;--newline--                case 'V':--newline--                    nums[i]=5;--newline--                    break;--newline--                case 'I':--newline--                    nums[i]=1;--newline--                    break;--newline--            }--newline--        }--newline--        int sum=0;--newline--        for(int i=0;i<nums.length-1;i++){--newline--            if(nums[i]<nums[i+1])--newline--                sum-=nums[i];--newline--            else--newline--                sum+=nums[i];--newline--        }--newline--        return sum+nums[nums.length-1];--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "7ms solution in Java. easy to understand"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "I strongly suggest leetcode explains the conversion rule clearer."
        }
    ],
    "qc": "13.json"
}