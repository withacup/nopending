{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int smallestFactorization(int n) {--newline--        // Case 1: If number is smaller than 10--newline--        if (n < 10) return n;--newline--        --newline--        // Case 2: Start with 9 and try every possible digit--newline--        List<Integer> res = new ArrayList<>();--newline--        for (int i = 9; i > 1; i--) {--newline--            // If current digit divides n, then store all--newline--            // occurrences of current digit in res--newline--            while (n % i == 0) {--newline--                n = n / i;--newline--                res.add(i);--newline--            }--newline--        }--newline----newline--        // If n could not be broken in form of digits--newline--        if (n != 1) return 0;--newline----newline--        // Get the result from the array in reverse order--newline--        long result = 0;--newline--        for (int i = res.size() - 1; i >= 0; i--) {--newline--            result = result * 10 + res.get(i);--newline--            if (result > Integer.MAX_VALUE) return 0;--newline--        }--newline--        --newline--        return (int)result;--newline--    }--newline--}--newline--",
            "topic_title": "Java Solution, result array",
            "python": null,
            "is_locked": false,
            "cpp": null
        },
        {
            "java": "public class Solution {--newline--    public int smallestFactorization(int a) {--newline--        int k = 9;--newline--        List<Integer> ans = new ArrayList<>();--newline--        if (a <= 9) return a;--newline--        while (a > 1 && k >= 2) {--newline--            if (a % k == 0){--newline--                ans.add(k);--newline--                a = a / k;--newline--            }--newline--            else{--newline--                k--;--newline--            }--newline--        }--newline--        Collections.sort(ans);--newline--        // Integer.MAX_VALUE = 2147483647  --newline--        // Note: ans starts at least with 2 (guaranteed to have overflow if the size is great or equal 10)--newline--        if (a > 10 || ans.size() >= 10)   return 0;--newline--        int num = 0;--newline--        for (int i: ans){--newline--            num *= 10;--newline--            num += i;--newline--        }--newline--        return num;--newline--    }--newline--}",
            "topic_title": "My java code (Math)?",
            "python": null,
            "is_locked": false,
            "cpp": null
        },
        {
            "java": null,
            "topic_title": "C++ Solution",
            "python": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int smallestFactorization(int a) {--newline--        if (a < 10) return a;--newline--        int j=0;--newline--        int res[40];--newline--        for (int i=9; i>1; i--) {--newline--            while (a%i == 0) {--newline--                a = a/i;--newline--                res[j] = i;--newline--                j++;--newline--            }--newline--        }--newline--        if (a > 10) { // prime factors > 10--newline--            return 0;--newline--        }--newline--        unsigned long long ans = 0;--newline--        for (int i=j-1; i>=0; i--) {--newline--            ans = ans*10 + res[i];--newline--            if (ans > 2147483647) return 0;--newline--        }--newline--        return ans;--newline--    }--newline--};--newline--"
        },
        {
            "java": null,
            "topic_title": "AC solution using dynamic programming (no math), Python",
            "python": "class Solution(object):--newline----tab--    --newline----tab--    def smallestFactorization(self, a):--newline----tab--        \"\"\"--newline----tab--        :type a: int--newline----tab--        :rtype: int--newline----tab--        \"\"\"--newline----tab--        self.memory = {} # memory[k] is the Minimum Factorization of k--newline----tab--        return self.dp(a)--newline----tab--        --newline----tab--    def dp(self, k):--newline----tab--        if k < 10:--newline----tab--            return k--newline----tab--        if k in self.memory:--newline----tab--            return self.memory[k]--newline----tab--        # here we test every possible factorization of k into k = m * n--newline----tab--        # and find the minumum integer composed of m and n if any--newline----tab--        s = int(math.sqrt(k))--newline----tab--        factorizations = []--newline----tab--        for m in range(s, 1, -1):--newline----tab--            if k % m == 0:--newline----tab--                n = k // m--newline----tab--                left = self.dp(m)--newline----tab--                right = self.dp(n)--newline----tab--                if left != 0 and right != 0:    # only m and n both have answers--newline----tab--                    d = 0   # find the number of digits of right--newline----tab--                    t = right--newline----tab--                    while t > 0:--newline----tab--                        d += 1--newline----tab--                        t = t // 10--newline----tab--                    r = left * 10 ** d + right # for example, 123 and 247 => 123247--newline----tab--                    if r <= 2**31 - 1: # fit in 32-bit signed integer--newline----tab--                        factorizations.append(r)--newline----tab--        if factorizations:  # if we have found any legal solution--newline----tab--            self.memory[k] = min(factorizations)--newline----tab--        else:--newline----tab--            self.memory[k] = 0--newline----tab--        return self.memory[k]",
            "is_locked": false,
            "cpp": null
        },
        {
            "java": null,
            "topic_title": "&#91;C++&#93; Clean Code - 7 line - 3 Solutions",
            "python": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int smallestFactorization(int a) {--newline--        if (a < 2) return a;--newline--        string s;--newline--        for (int i = 9; i >= 2; i--) {--newline--            while (a % i == 0) {--newline--                s.insert(s.begin(), ('0' + i));--newline--                a /= i;--newline--            }--newline--        }--newline--        return (a > 1 || s.size() > 10 || stol(s) > INT_MAX) ? 0 : stoi(s);--newline--    }--newline--};--newline--"
        }
    ],
    "qc": "625.json"
}