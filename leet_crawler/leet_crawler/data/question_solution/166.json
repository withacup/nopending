{
    "posts": [
        {
            "java": "public class Solution {--newline--    public String fractionToDecimal(int numerator, int denominator) {--newline--        if (numerator == 0) {--newline--            return \"0\";--newline--        }--newline--        StringBuilder res = new StringBuilder();--newline--        // \"+\" or \"-\"--newline--        res.append(((numerator > 0) ^ (denominator > 0)) ? \"-\" : \"\");--newline--        long num = Math.abs((long)numerator);--newline--        long den = Math.abs((long)denominator);--newline--        --newline--        // integral part--newline--        res.append(num / den);--newline--        num %= den;--newline--        if (num == 0) {--newline--            return res.toString();--newline--        }--newline--        --newline--        // fractional part--newline--        res.append(\".\");--newline--        HashMap<Long, Integer> map = new HashMap<Long, Integer>();--newline--        map.put(num, res.length());--newline--        while (num != 0) {--newline--            num *= 10;--newline--            res.append(num / den);--newline--            num %= den;--newline--            if (map.containsKey(num)) {--newline--                int index = map.get(num);--newline--                res.insert(index, \"(\");--newline--                res.append(\")\");--newline--                break;--newline--            }--newline--            else {--newline--                map.put(num, res.length());--newline--            }--newline--        }--newline--        return res.toString();--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My clean Java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    // upgraded parameter types--newline--    string fractionToDecimal(int64_t n, int64_t d) {--newline--        // zero numerator--newline--        if (n == 0) return \"0\";--newline--    --newline--        string res;--newline--        // determine the sign--newline--        if (n < 0 ^ d < 0) res += '-';--newline--    --newline--        // remove sign of operands--newline--        n = abs(n), d = abs(d);--newline--    --newline--        // append integral part--newline--        res += to_string(n / d);--newline--    --newline--        // in case no fractional part--newline--        if (n % d == 0) return res;--newline--    --newline--        res += '.';--newline--    --newline--        unordered_map<int, int> map;--newline--    --newline--        // simulate the division process--newline--        for (int64_t r = n % d; r; r %= d) {--newline--    --newline--            // meet a known remainder--newline--            // so we reach the end of the repeating part--newline--            if (map.count(r) > 0) {--newline--                res.insert(map[r], 1, '(');--newline--                res += ')';--newline--                break;--newline--            }--newline--    --newline--            // the remainder is first seen--newline--            // remember the current position for it--newline--            map[r] = res.size();--newline--    --newline--            r *= 10;--newline--    --newline--            // append the quotient digit--newline--            res += to_string(r / d);--newline--        }--newline--    --newline--        return res;--newline--    }--newline--}",
            "python": null,
            "topic_title": "Accepted cpp solution, with explainations"
        },
        {
            "java": "public class Solution {--newline--    public String fractionToDecimal(int numerator, int denominator) {--newline--        StringBuilder result = new StringBuilder();--newline--        String sign = (numerator < 0 == denominator < 0 || numerator == 0) ? \"\" : \"-\";--newline--        long num = Math.abs((long) numerator);--newline--        long den = Math.abs((long) denominator);--newline--        result.append(sign);--newline--        result.append(num / den);--newline--        long remainder = num % den;--newline--        if (remainder == 0)--newline--            return result.toString();--newline--        result.append(\".\");--newline--        HashMap<Long, Integer> hashMap = new HashMap<Long, Integer>();--newline--        while (!hashMap.containsKey(remainder)) {--newline--            hashMap.put(remainder, result.length());--newline--            result.append(10 * remainder / den);--newline--            remainder = 10 * remainder % den;--newline--        }--newline--        int index = hashMap.get(remainder);--newline--        result.insert(index, \"(\");--newline--        result.append(\")\");--newline--        return result.toString().replace(\"(0)\", \"\");--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Short Java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    string fractionToDecimal(int numerator, int denominator) {--newline--        if (!numerator) return \"0\";--newline--        string res;--newline--        if (numerator < 0 ^ denominator < 0) res += '-';--newline--        long numer = numerator < 0 ? (long)numerator * (-1) : (long)numerator;--newline--        long denom = denominator < 0 ? (long)denominator * (-1) : (long)denominator;--newline--        long integral = numer / denom;--newline--        res += to_string(integral);--newline--        long rmd = numer % denom;--newline--        if (!rmd) return res;--newline--        res += '.';--newline--        rmd *= 10;--newline--        unordered_map<long, long> mp; --newline--        while (rmd) {--newline--            long quotient = rmd / denom;--newline--            if (mp.find(rmd) != mp.end()) { --newline--                res.insert(mp[rmd], 1, '(');--newline--                res += ')';--newline--                break;--newline--            }--newline--            mp[rmd] = res.size();--newline--            res += to_string(quotient);--newline--            rmd = (rmd % denom) * 10;--newline--        }--newline--        return res;--newline--    }--newline--};",
            "python": null,
            "topic_title": "0ms C++ Solution with Detailed Explanations"
        },
        {
            "java": "public class Solution {--newline--      public String fractionToDecimal(int numerator, int denominator) {--newline--            boolean isNegative = (numerator < 0 && denominator > 0 || numerator > 0 && denominator < 0) ? true : false;--newline--            long numeratorL = Math.abs((long) numerator);--newline--            long denominatorL = Math.abs((long) denominator);--newline--            Map<Long, Integer> previousRemains = new HashMap<Long, Integer>();--newline--            StringBuilder sb = new StringBuilder();--newline--            long quotian = numeratorL / denominatorL;--newline--            sb.append(quotian);--newline--            --newline--            numeratorL %= denominatorL;--newline--        --newline--            if (numeratorL != 0) {--newline--                sb.append(\".\");--newline--            }--newline--            --newline--            int quotianIndex = 0;--newline--            while (numeratorL != 0) {--newline--                numeratorL *= 10;--newline--                quotian = Math.abs(numeratorL / denominatorL);--newline--                if (!previousRemains.containsKey(numeratorL)) {--newline--                    sb.append(quotian);--newline--                    previousRemains.put(numeratorL, quotianIndex++);--newline--                } else {--newline--                    int firstIndex = 1 + previousRemains.get(numeratorL) + sb.indexOf(\".\");--newline--                    sb.insert(firstIndex, '(');--newline--                    sb.append(\")\");--newline--                    break;--newline--                }--newline--                numeratorL %= denominatorL;--newline--            }--newline--            --newline--            if (isNegative) {--newline--                sb.insert(0, \"-\");--newline--            }--newline--            return sb.toString();--newline--        }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Accepted Clean Java Solution"
        }
    ],
    "qc": "166.json"
}