{
    "posts": [
        {
            "java": "public class Solution {--newline--    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {--newline--        Stack<Integer> s1 = new Stack<Integer>();--newline--        Stack<Integer> s2 = new Stack<Integer>();--newline--        --newline--        while(l1 != null) {--newline--            s1.push(l1.val);--newline--            l1 = l1.next;--newline--        };--newline--        while(l2 != null) {--newline--            s2.push(l2.val);--newline--            l2 = l2.next;--newline--        }--newline--        --newline--        int sum = 0;--newline--        ListNode list = new ListNode(0);--newline--        while (!s1.empty() || !s2.empty()) {--newline--            if (!s1.empty()) sum += s1.pop();--newline--            if (!s2.empty()) sum += s2.pop();--newline--            list.val = sum % 10;--newline--            ListNode head = new ListNode(sum / 10);--newline--            head.next = list;--newline--            list = head;--newline--            sum /= 10;--newline--        }--newline--        --newline--        return list.val == 0 ? list.next : list;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Easy O(n) Java Solution using Stack"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--        ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {--newline--            int n1 = 0, n2 = 0, carry = 0;--newline--            ListNode *curr1 = l1, *curr2 = l2, *res = NULL;--newline--            while( curr1 ){ curr1=curr1->next; n1++; }--newline--            while( curr2 ){ curr2=curr2->next; n2++; } --newline--            curr1 = l1; curr2 = l2;--newline--            while( n1 > 0 && n2 > 0){--newline--                int sum = 0;--newline--                if( n1 >= n2 ){ sum += curr1->val; curr1=curr1->next; n1--;}--newline--                if( n2 > n1 ){ sum += curr2->val; curr2=curr2->next; n2--;}--newline--                res = addToFront( sum, res );--newline--            }--newline--            curr1 = res; res = NULL;--newline--            while( curr1 ){--newline--                curr1->val += carry; carry = curr1->val/10;--newline--                res = addToFront( curr1->val%10, res );--newline--                curr2 = curr1; --newline--                curr1 = curr1->next;--newline--                delete curr2;--newline--            }--newline--            if( carry ) res = addToFront( 1, res );--newline--            return res;--newline--        }--newline--        ListNode* addToFront( int val, ListNode* head ){--newline--            ListNode* temp = new ListNode(val);--newline--            temp->next = head;--newline--            return temp;--newline--        }--newline--    --newline--}",
            "python": null,
            "topic_title": "C++ O(1) extra space except for output. Reverse output instead. Is this cheating?"
        },
        {
            "java": "public class Solution {--newline--        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {--newline--            int size1 = getLength(l1);--newline--            int size2 = getLength(l2);--newline--            ListNode head = new ListNode(1);--newline--            // Make sure l1.length >= l2.length--newline--            head.next = size1 < size2 ? helper(l2, l1, size2 - size1) : helper(l1, l2, size1 - size2);--newline--            // Handle the first digit--newline--            if (head.next.val > 9) {--newline--                head.next.val = head.next.val % 10;--newline--                return head;--newline--            }--newline--            return head.next;--newline--        }--newline--        // get length of the list--newline--        public int getLength(ListNode l) {--newline--            int count = 0;--newline--            while(l != null) {--newline--                l = l.next;--newline--                count++;--newline--            }--newline--            return count;--newline--        }--newline--        // offset is the difference of length between l1 and l2--newline--        public ListNode helper(ListNode l1, ListNode l2, int offset) {--newline--            if (l1 == null) return null;--newline--            // check whether l1 becomes the same length as l2--newline--            ListNode result = offset == 0 ? new ListNode(l1.val + l2.val) : new ListNode(l1.val);--newline--            ListNode post = offset == 0 ? helper(l1.next, l2.next, 0) : helper(l1.next, l2, offset - 1);--newline--            // handle carry --newline--            if (post != null && post.val > 9) {--newline--                result.val += 1;--newline--                post.val = post.val % 10;--newline--            }--newline--            // combine nodes--newline--            result.next = post;--newline--            return result;--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java O(n) recursive solution by counting the difference of length"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def addTwoNumbers(self, l1, l2):--newline----tab--    --newline----tab--            x1, x2 = 0, 0--newline----tab--            while l1:--newline----tab--                x1 = x1*10+l1.val--newline----tab--                l1 = l1.next--newline----tab--            while l2:--newline----tab--                x2 = x2*10+l2.val--newline----tab--                l2 = l2.next--newline----tab--            x = x1 + x2--newline----tab--            --newline----tab--            head = ListNode(0)--newline----tab--            if x == 0: return head--newline----tab--            while x:--newline----tab--                v, x = x%10, x//10--newline----tab--                head.next, head.next.next = ListNode(v), head.next--newline----tab--                --newline----tab--            return head.next--newline----tab--    ",
            "topic_title": "There is no maximum of INT in python, so....."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {--newline--        vector<int> nums1, nums2;--newline--        while(l1) {--newline--            nums1.push_back(l1->val);--newline--            l1 = l1->next;--newline--        }--newline--        while(l2) {--newline--            nums2.push_back(l2->val);--newline--            l2 = l2->next;--newline--        }--newline--    --newline--        int m = nums1.size(), n = nums2.size();--newline--        int sum = 0, carry = 0;--newline--    --newline--        ListNode *head = nullptr, *p = nullptr;--newline--    --newline--        for(int i = m - 1, j = n - 1; i >= 0 || j >= 0 || carry > 0; i--, j--) {--newline--            sum = carry;--newline--            if(i >= 0) --newline--                sum += nums1[i];--newline--    --newline--            if(j >= 0)--newline--                sum += nums2[j];--newline--    --newline--            carry = sum / 10;--newline--    --newline--            p = new ListNode(sum%10);--newline--            p->next = head;--newline--            head = p;--newline--        }--newline--    --newline--        return head;--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "Concise C++ Solution without reverse"
        }
    ],
    "qc": "445.json"
}