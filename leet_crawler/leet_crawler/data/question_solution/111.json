{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int minDepth(TreeNode root) {--newline--        if(root == null) return 0;--newline--        int left = minDepth(root.left);--newline--        int right = minDepth(root.right);--newline--        return (left == 0 || right == 0) ? left + right + 1: Math.min(left,right) + 1;--newline--       --newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My 4 Line java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int minDepth(TreeNode *root) {--newline--        if(!root) return 0;--newline--        if(!root->left) return 1 + minDepth(root->right);--newline--        if(!root->right) return 1 + minDepth(root->left);--newline--        return 1+min(minDepth(root->left),minDepth(root->right));--newline--    }--newline--};",
            "python": null,
            "topic_title": "My concise c++ solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Why expected result for input of {1,2}  is 2? Shouldn&#x27;t it be 1?"
        },
        {
            "java": "public class Solution {--newline--public int minDepth(TreeNode root) {--newline----tab--if (root == null)--newline----tab----tab--return 0;--newline----tab--int depth = 1;--newline----tab--Queue<TreeNode> queue = new LinkedList<TreeNode>();--newline----tab--TreeNode temp,magic = new TreeNode(0);--newline----tab--queue.add(root);--newline----tab--queue.add(magic);--newline----tab--while(!queue.isEmpty()){--newline----tab----tab--temp = queue.poll();--newline----tab----tab--if(temp.equals(magic)){--newline----tab----tab--    if(!queue.isEmpty()){--newline----tab----tab--        depth++;--newline----tab----tab----tab--    queue.add(magic);--newline----tab----tab--    }--newline----tab----tab--    continue;--newline----tab----tab--}--newline----tab----tab--if(temp.left == null && temp.right == null)--newline----tab----tab----tab--return depth;--newline----tab----tab--if(temp.left != null)--newline----tab----tab----tab--queue.add(temp.left);--newline----tab----tab--if(temp.right != null)--newline----tab----tab----tab--queue.add(temp.right);--newline----tab--}--newline----tab--return depth;--newline--}--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My solution used level-order traversal"
        },
        {
            "java": "public class Solution {--newline--    public int minDepth(TreeNode root) {--newline--        if (root == null) return 0;--newline--        int L = minDepth(root.left), R = minDepth(root.right);--newline--        return 1 + (Math.min(L, R) > 0 ? Math.min(L, R) : Math.max(L, R));--newline--    }--newline--    --newline--    public int minDepth(TreeNode root) {--newline--        if (root == null) return 0;--newline--        int L = minDepth(root.left), R = minDepth(root.right), m = Math.min(L, R);--newline--        return 1 + (m > 0 ? m : Math.max(L, R));--newline--    }--newline--    --newline--    public int minDepth(TreeNode root) {--newline--        if (root == null) return 0;--newline--        int L = minDepth(root.left), R = minDepth(root.right);--newline--        return L<R && L>0 || R<1 ? 1+L : 1+R;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int minDepth(struct TreeNode* root) {--newline--        if (!root) return 0;--newline--        int L = minDepth(root->left), R = minDepth(root->right);--newline--        return L<R && L || !R ? 1+L : 1+R;--newline--    }--newline--    --newline--}",
            "python": "class Solution :--newline----tab--    def minDepth(self, root):--newline----tab--        if not root: return 0--newline----tab--        d = map(self.minDepth, (root.left, root.right))--newline----tab--        return 1 + (min(d) or max(d))--newline----tab--    --newline----tab--    def minDepth(self, root):--newline----tab--        if not root: return 0--newline----tab--        d, D = sorted(map(self.minDepth, (root.left, root.right)))--newline----tab--        return 1 + (d or D)--newline----tab--    ",
            "topic_title": "3 lines in Every Language"
        }
    ],
    "qc": "111.json"
}