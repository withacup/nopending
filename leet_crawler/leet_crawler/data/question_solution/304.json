{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class NumMatrix {--newline--private:--newline--    int row, col;--newline--    vector<vector<int>> sums;--newline--public:--newline--    NumMatrix(vector<vector<int>> &matrix) {--newline--        row = matrix.size();--newline--        col = row>0 ? matrix[0].size() : 0;--newline--        sums = vector<vector<int>>(row+1, vector<int>(col+1, 0));--newline--        for(int i=1; i<=row; i++) {--newline--            for(int j=1; j<=col; j++) {--newline--                sums[i][j] = matrix[i-1][j-1] + --newline--                             sums[i-1][j] + sums[i][j-1] - sums[i-1][j-1] ;--newline--            }--newline--        }--newline--    }--newline----newline--    int sumRegion(int row1, int col1, int row2, int col2) {--newline--        return sums[row2+1][col2+1] - sums[row2+1][col1] - sums[row1][col2+1] + sums[row1][col1];--newline--    }--newline--};",
            "python": null,
            "topic_title": "Clean C++ Solution and Explaination - O(mn) space with O(1) time"
        },
        {
            "java": "public class NumMatrix {--newline--    private int[][] dp;--newline--    --newline--    public NumMatrix(int[][] matrix) {--newline--        if(   matrix           == null--newline--           || matrix.length    == 0--newline--           || matrix[0].length == 0   ){--newline--            return;   --newline--        }--newline--        --newline--        int m = matrix.length;--newline--        int n = matrix[0].length;--newline--        --newline--        dp = new int[m + 1][n + 1];--newline--        for(int i = 1; i <= m; i++){--newline--            for(int j = 1; j <= n; j++){--newline--                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] -dp[i - 1][j - 1] + matrix[i - 1][j - 1] ;--newline--            }--newline--        }--newline--    }--newline--    --newline--    public int sumRegion(int row1, int col1, int row2, int col2) {--newline--        int iMin = Math.min(row1, row2);--newline--        int iMax = Math.max(row1, row2);--newline--        --newline--        int jMin = Math.min(col1, col2);--newline--        int jMax = Math.max(col1, col2);--newline--        --newline--        return dp[iMax + 1][jMax + 1] - dp[iMax + 1][jMin] - dp[iMin][jMax + 1] + dp[iMin][jMin];    --newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Clean and easy to understand java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class NumMatrix {--newline--public:--newline--    NumMatrix(vector<vector<int>> &matrix) {--newline--        accu = matrix;--newline--        for (int i=0; i<matrix.size(); ++i)--newline--            for (int j=0; j<matrix[0].size(); ++j)--newline--                accu[i][j] += a(i-1, j) + a(i, j-1) - a(i-1, j-1);--newline--    }--newline----newline--    int sumRegion(int row1, int col1, int row2, int col2) {--newline--        return a(row2, col2) - a(row1-1, col2) - a(row2, col1-1) + a(row1-1, col1-1);--newline--    }--newline----newline--private:--newline--    vector<vector<int>> accu;--newline--    int a(int i, int j) {--newline--        return i >= 0 && j >= 0 ? accu[i][j] : 0;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "C++ with helper"
        },
        {
            "java": "public class NumMatrix {--newline--    private int[][] sumRegion;--newline--    --newline--    public NumMatrix(int[][] matrix) {--newline--        if (matrix.length != 0)  sumRegion = new int[matrix.length + 1][matrix[0].length + 1];--newline--        --newline--        for (int i = 0; i < matrix.length; i++) {--newline--            int sum = 0;--newline--            for (int j = 0; j < matrix[0].length; j++) {--newline--                sum += matrix[i][j];--newline--                sumRegion[i + 1][j + 1] = sum + sumRegion[i][j + 1]; --newline--            }--newline--        }--newline--    }--newline--    --newline--    public int sumRegion(int row1, int col1, int row2, int col2) {--newline--        return sumRegion[row2 + 1][col2 + 1] - sumRegion[row1][col2 + 1] - sumRegion[row2 + 1][col1] + sumRegion[row1][col1];--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Very clean and fast java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class NumMatrix(object):--newline----tab--      def __init__(self, matrix):--newline----tab--          if matrix is None or not matrix:--newline----tab--              return--newline----tab--          n, m = len(matrix), len(matrix[0])--newline----tab--          self.sums = [ [0 for j in xrange(m+1)] for i in xrange(n+1) ]--newline----tab--          for i in xrange(1, n+1):--newline----tab--              for j in xrange(1, m+1):--newline----tab--                  self.sums[i][j] = matrix[i-1][j-1] + self.sums[i][j-1] + self.sums[i-1][j] - self.sums[i-1][j-1]--newline----tab--    --newline----tab----newline----tab--      def sumRegion(self, row1, col1, row2, col2):--newline----tab--          row1, col1, row2, col2 = row1+1, col1+1, row2+1, col2+1--newline----tab--          return self.sums[row2][col2] - self.sums[row2][col1-1] - self.sums[row1-1][col2] + self.sums[row1-1][col1-1]",
            "topic_title": "Sharing My Python solution"
        }
    ],
    "qc": "304.json"
}