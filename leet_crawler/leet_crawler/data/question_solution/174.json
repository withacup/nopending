{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int calculateMinimumHP(vector<vector<int> > &dungeon) {--newline--        int M = dungeon.size();--newline--        int N = dungeon[0].size();--newline--        // hp[i][j] represents the min hp needed at position (i, j)--newline--        // Add dummy row and column at bottom and right side--newline--        vector<vector<int> > hp(M + 1, vector<int>(N + 1, INT_MAX));--newline--        hp[M][N - 1] = 1;--newline--        hp[M - 1][N] = 1;--newline--        for (int i = M - 1; i >= 0; i--) {--newline--            for (int j = N - 1; j >= 0; j--) {--newline--                int need = min(hp[i + 1][j], hp[i][j + 1]) - dungeon[i][j];--newline--                hp[i][j] = need <= 0 ? 1 : need;--newline--            }--newline--        }--newline--        return hp[0][0];--newline--    }--newline--};",
            "python": null,
            "topic_title": "C++ DP solution"
        },
        {
            "java": "public class Solution {--newline--    public int calculateMinimumHP(int[][] dungeon) {--newline--        if (dungeon == null || dungeon.length == 0 || dungeon[0].length == 0) return 0;--newline--        --newline--        int m = dungeon.length;--newline--        int n = dungeon[0].length;--newline--        --newline--        int[][] health = new int[m][n];--newline--    --newline--        health[m - 1][n - 1] = Math.max(1 - dungeon[m - 1][n - 1], 1);--newline--    --newline--        for (int i = m - 2; i >= 0; i--) {            --newline--            health[i][n - 1] = Math.max(health[i + 1][n - 1] - dungeon[i][n - 1], 1);--newline--        }--newline--    --newline--        for (int j = n - 2; j >= 0; j--) {--newline--            health[m - 1][j] = Math.max(health[m - 1][j + 1] - dungeon[m - 1][j], 1);--newline--        }--newline--    --newline--        for (int i = m - 2; i >= 0; i--) {--newline--            for (int j = n - 2; j >= 0; j--) {--newline--                int down = Math.max(health[i + 1][j] - dungeon[i][j], 1);--newline--                int right = Math.max(health[i][j + 1] - dungeon[i][j], 1);--newline--                health[i][j] = Math.min(right, down);--newline--            }--newline--        }--newline--    --newline--        return health[0][0];--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My AC Java Version, Suggestions are welcome"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--         int calculateMinimumHP(vector &dungeon) {--newline--        int m = dungeon.size();--newline--        int n = dungeon[0].size();--newline--        vector minInitHealth(m, vector<int>(n,0));--newline--        for(int i=m-1; i>=0; i--)--newline--        {--newline--            for (int j=n-1; j>=0; j--)--newline--            {--newline--                if (i == m-1 && j == n-1)--newline--                {--newline--                    minInitHealth[i][j] = max(1, 1 - dungeon[i][j]);--newline--                }  --newline--                else if (i == m-1)--newline--                {--newline--                    minInitHealth[i][j] = max(1, minInitHealth[i][j+1] - dungeon[i][j]);--newline--                }  --newline--                else if (j == n-1)--newline--                {--newline--                    minInitHealth[i][j] = max(1, minInitHealth[i+1][j] - dungeon[i][j]);--newline--                }  --newline--                else--newline--                {--newline--                    minInitHealth[i][j] = max(1, min(minInitHealth[i+1][j],minInitHealth[i][j+1]) - dungeon[i][j]);--newline--                }  --newline--            }--newline--        }--newline--        --newline--        return  minInitHealth[0][0];--newline--    }--newline--}",
            "python": null,
            "topic_title": "Best solution I have found with explanations"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int calculateMinimumHP(vector<vector<int> > &dungeon) {--newline--        const int m = dungeon.size();--newline--        const int n = dungeon[0].size();--newline--        vector<int> dp(n + 1, INT_MAX);--newline--        dp[n - 1] = 1; --newline--        for(int i = m - 1; i >= 0; --i)--newline--            for(int j = n - 1; j >= 0; --j)--newline--                dp[j] = getMin(min(dp[j], dp[j + 1]) - dungeon[i][j]);--newline--        return dp[0];--newline--    }--newline--    int getMin(int n){--newline--        return n <= 0 ? 1 : n;--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "Sharing my solution with O(n) space, O(mn) runtime"
        },
        {
            "java": "public class Solution {--newline--        public int calculateMinimumHP(int[][] dungeon) {--newline--    --newline--            int row = dungeon.length;--newline--            int column = dungeon[0].length;--newline--    --newline--            int[][] tem = new int[row][];--newline--            for (int i = 0; i < tem.length; i++) {--newline--                tem[i] = new int[column];--newline--            }--newline--    --newline--            if (dungeon[row - 1][column - 1] >= 0) {--newline--                tem[row - 1][column - 1] = 1;--newline--            } else {--newline--                tem[row - 1][column - 1] = 1 - dungeon[row - 1][column - 1];--newline--            }--newline--    --newline--            for (int i = row - 2; i >= 0; i--) {--newline--                tem[i][column - 1] = c(dungeon[i][column - 1],--newline--                        tem[i + 1][column - 1]);--newline--            }--newline--    --newline--            for (int j = column - 2; j >= 0; j--) {--newline--                tem[row - 1][j] = c(dungeon[row - 1][j], tem[row - 1][j + 1]);--newline--            }--newline--    --newline--            for (int i = row - 2; i >= 0; i--) {--newline--                for (int j = column - 2; j >= 0; j--) {--newline--                    tem[i][j] = Math.min(c(dungeon[i][j], tem[i + 1][j]),--newline--                            c(dungeon[i][j], tem[i][j + 1]));--newline--                }--newline--            }--newline--    --newline--            return tem[0][0];--newline--        }--newline--    --newline--        private int c(int value, int preResult) {--newline--            if (value == 0)--newline--                return preResult;--newline--    --newline--            if (value > 0) {--newline--                if (value >= preResult)--newline--                    return 1;--newline--                return preResult - value;--newline--            }--newline--    --newline--            return preResult - value;--newline--        }--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My java solution with explanation in detail"
        }
    ],
    "qc": "174.json"
}