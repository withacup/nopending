{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int findIntegers(int num) {--newline--        StringBuilder sb = new StringBuilder(Integer.toBinaryString(num)).reverse();--newline--        int n = sb.length();--newline--        --newline--        int a[] = new int[n];--newline--        int b[] = new int[n];--newline--        a[0] = b[0] = 1;--newline--        for (int i = 1; i < n; i++) {--newline--            a[i] = a[i - 1] + b[i - 1];--newline--            b[i] = a[i - 1];--newline--        }--newline--        --newline--        int result = a[n - 1] + b[n - 1];--newline--        for (int i = n - 2; i >= 0; i--) {--newline--            if (sb.charAt(i) == '1' && sb.charAt(i + 1) == '1') break;--newline--            if (sb.charAt(i) == '0' && sb.charAt(i + 1) == '0') result -= b[i];--newline--        }--newline--        --newline--        return result;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Solution, DP"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findIntegers(int num) {--newline--        static int fb[31] = { 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,--newline--            17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578 };--newline--        if (num < 3) return num + 1;--newline--        for (int bt = 29; bt >= 0; --bt) // bt should start from 30, but OJ accepts it from 29.--newline--            if (num & (1 << bt)) return num & (1 << (bt - 1)) ? fb[bt] : fb[bt - 1] + findIntegers((num & ~(1 << bt)));--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "C++ 4 lines DP&#x2F;Fibonacci 6 ms"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findIntegers(int num) {--newline--        int f[32];--newline--        f[0] = 1;--newline--        f[1] = 2;--newline--        for (int i = 2; i < 32; ++i)--newline--            f[i] = f[i-1]+f[i-2];--newline--        int ans = 0, k = 30, pre_bit = 0;--newline--        while (k >= 0) {--newline--            if (num&(1<<k)) {--newline--                ans += f[k];--newline--                if (pre_bit) return ans;--newline--                pre_bit = 1;--newline--            }--newline--            else--newline--                pre_bit = 0;--newline--            --k;--newline--        }--newline--        return ans+1;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "C++, Non-DP, O(32) Fibonacci solution"
        },
        {
            "java": "public class Solution {--newline--    public int findIntegers(int num) {--newline--      return findIntegers(num, new HashMap<>());--newline--    }    --newline--    --newline--    public int findIntegers(int num, Map<Integer, Integer> memo) {--newline--        if (num <= 2) return num + 1; // base case--newline--        if (memo.containsKey(num)) return memo.get(num); // check if this result has already been computed   --newline--        --newline--        int msb = 31 - Integer.numberOfLeadingZeros(num); // retrieve index of most significant bit--newline--        int subNum = (1 << msb) - 1, subNum2 = ~(1 << msb) & num;--newline--        if (subNum2 >= 1 << msb - 1) subNum2 = subNum >> 1;--newline--        int result = findIntegers(subNum, memo) + findIntegers(subNum2, memo);--newline--        --newline--        memo.put(num, result); // add result to memo--newline--        return result;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Memoized DP Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def findIntegers(self, X):--newline----tab--        A = map(int, bin(X)[2:])--newline----tab--        N = len(A)--newline----tab--        dp = [[0, 0] for _ in xrange(N+2)]--newline----tab--        dp[N] = dp[N+1] = [1, 1]--newline----tab--        --newline----tab--        for i in xrange(N-1, -1, -1):--newline----tab--            dp[i][0] = dp[i+1][A[i]] + A[i] * dp[i+2][i+1 < N and A[i+1]]--newline----tab--            dp[i][1] = dp[i+1][1] + dp[i+2][1]--newline----tab--    --newline----tab--        return dp[0][0]--newline----tab--    ",
            "topic_title": "Python, Straightforward with Explanation"
        }
    ],
    "qc": "600.json"
}