{
    "posts": [
        {
            "java": "public class Solution {--newline--    public boolean searchMatrix(int[][] matrix, int target) {--newline--        if(matrix == null || matrix.length < 1 || matrix[0].length <1) {--newline--            return false;--newline--        }--newline--        int col = matrix[0].length-1;--newline--        int row = 0;--newline--        while(col >= 0 && row <= matrix.length-1) {--newline--            if(target == matrix[row][col]) {--newline--                return true;--newline--            } else if(target < matrix[row][col]) {--newline--                col--;--newline--            } else if(target > matrix[row][col]) {--newline--                row++;--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My concise O(m+n) Java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    bool searchMatrix(vector<vector<int>>& matrix, int target) {--newline--        int m = matrix.size();--newline--        if (m == 0) return false;--newline--        int n = matrix[0].size();--newline--    --newline--        int i = 0, j = n - 1;--newline--        while (i < m && j >= 0) {--newline--            if (matrix[i][j] == target)--newline--                return true;--newline--            else if (matrix[i][j] > target) {--newline--                j--;--newline--            } else --newline--                i++;--newline--        }--newline--        return false;--newline--    }--newline--}",
            "python": null,
            "topic_title": "C++ with O(m+n) complexity"
        },
        {
            "java": "public class Solution {--newline--     public boolean searchMatrix(int[][] matrix, int target) {--newline--        int m = matrix.length;--newline--        if(m<1) return false;--newline--        int n = matrix[0].length;--newline--        --newline--        return searchMatrix(matrix, new int[]{0,0}, new int[]{m-1, n-1}, target);--newline--    }--newline--    --newline--    private boolean searchMatrix(int[][] matrix, int[] upperLeft, int[] lowerRight, int target) {--newline--    --tab--if(upperLeft[0]>lowerRight[0] || upperLeft[1]>lowerRight[1]--newline--    --tab----tab----tab--|| lowerRight[0]>=matrix.length || lowerRight[1]>=matrix[0].length) --newline--    --tab----tab--return false;--newline--    --tab--if(lowerRight[0]-upperLeft[0]==0 && lowerRight[1]-upperLeft[1]==0)--newline--    --tab----tab--return matrix[upperLeft[0]][upperLeft[1]] == target;--newline--    --tab--int rowMid = (upperLeft[0] + lowerRight[0]) >> 1;--newline--    --tab--int colMid = (upperLeft[1] + lowerRight[1]) >> 1;--newline--    --tab--int diff = matrix[rowMid][colMid] - target;--newline--    --tab--if(diff > 0) {--newline--    --tab----tab--return searchMatrix(matrix, upperLeft, new int[]{rowMid, colMid}, target)--newline--    --tab----tab----tab----tab--|| searchMatrix(matrix, new int[]{upperLeft[0],colMid+1}, new int[]{rowMid, lowerRight[1]}, target)--newline--    --tab----tab----tab----tab--|| searchMatrix(matrix, new int[]{rowMid+1,upperLeft[1]}, new int[]{lowerRight[0], colMid}, target);--newline--    --tab--}--newline--    --tab--else if(diff < 0) {--newline--     --tab----tab--return searchMatrix(matrix, new int[]{upperLeft[0], colMid+1}, new int[]{rowMid, lowerRight[1]}, target)--newline--    --tab----tab----tab----tab--|| searchMatrix(matrix, new int[]{rowMid+1, upperLeft[1]}, new int[]{lowerRight[0], colMid}, target)--newline--    --tab----tab----tab----tab--|| searchMatrix(matrix, new int[]{rowMid+1, colMid+1}, lowerRight, target);--newline--    --tab--}--newline--    --tab--else return true;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "*Java* an easy-to-understand divide and conquer method"
        },
        {
            "java": "public class Solution {--newline--public boolean searchMatrix(int[][] matrix, int target) {--newline--    int m=matrix.length, n=matrix[0].length, i=0, j=n-1;--newline--    while (i<m && j>=0) {--newline--        if (matrix[i][j]==target) return true;--newline--        else if (matrix[i][j]<target) i++;--newline--        else j--;--newline--    }--newline--    return false;--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java short code, O(m+n)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--     bool searchMatrix(vector<vector<int>>& matrix, int target) {--newline--    return searchMatrix(matrix, target, 0, matrix.size() - 1);--newline--     }--newline--    --newline--     bool searchMatrix(vector<vector<int>>& matrix, int target, int top, int bottom) {--newline--    if (top > bottom)--newline--    --tab--return false;--newline--    --newline--    int mid = top + (bottom - top) / 2;--newline--    if (matrix[mid].front() <= target && target <= matrix[mid].back())--newline--    --tab--if (searchVector(matrix[mid], target)) return true;--newline--    --newline--    if (searchMatrix(matrix, target, top, mid - 1)) return true;--newline--    if (searchMatrix(matrix, target, mid + 1, bottom)) return true;--newline--    --newline--    return false;--newline--     }--newline--    --newline--     bool searchVector(vector<int>& v, int target) {--newline--    int left = 0, right = v.size() - 1;--newline--    --newline--    while (left <= right) {--newline--    --tab--int mid = left + (right - left) / 2;--newline--    --tab--if (v[mid] == target)--newline--    --tab----tab--return true;--newline--    --tab--if (v[mid] < target)--newline--    --tab----tab--left = mid + 1;--newline--    --tab--else--newline--    --tab----tab--right = mid - 1;--newline--    }--newline--    --newline--    return false;--newline--     }--newline--}",
            "python": null,
            "topic_title": "C++ two solutions (O(m+n), O(mlogn))"
        }
    ],
    "qc": "240.json"
}