{
    "posts": [
        {
            "java": "public class NestedIterator implements Iterator<Integer> {--newline--    Stack<NestedInteger> stack = new Stack<>();--newline--    public NestedIterator(List<NestedInteger> nestedList) {--newline--        for(int i = nestedList.size() - 1; i >= 0; i--) {--newline--            stack.push(nestedList.get(i));--newline--        }--newline--    }--newline----newline--    @Override--newline--    public Integer next() {--newline--        return stack.pop().getInteger();--newline--    }--newline----newline--    @Override--newline--    public boolean hasNext() {--newline--        while(!stack.isEmpty()) {--newline--            NestedInteger curr = stack.peek();--newline--            if(curr.isInteger()) {--newline--                return true;--newline--            }--newline--            stack.pop();--newline--            for(int i = curr.getList().size() - 1; i >= 0; i--) {--newline--                stack.push(curr.getList().get(i));--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Simple Java solution using a stack with explanation"
        },
        {
            "java": "public class NestedIterator implements Iterator<Integer> {--newline----newline--    public NestedIterator(List<NestedInteger> nestedList) {--newline--        lists = new Stack<>();--newline--        lists.push(nestedList.listIterator());--newline--    }--newline----newline--    public Integer next() {--newline--        hasNext();--newline--        return lists.peek().next().getInteger();--newline--    }--newline----newline--    public boolean hasNext() {--newline--        while (!lists.empty()) {--newline--            if (!lists.peek().hasNext()) {--newline--                lists.pop();--newline--            } else {--newline--                NestedInteger x = lists.peek().next();--newline--                if (x.isInteger())--newline--                    return lists.peek().previous() == x;--newline--                lists.push(x.getList().listIterator());--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--    --newline--    private Stack<ListIterator<NestedInteger>> lists;--newline--}--newline--",
            "is_locked": false,
            "cpp": "class NestedIterator {--newline--public:--newline--    NestedIterator(vector<NestedInteger> &nestedList) {--newline--        begins.push(nestedList.begin());--newline--        ends.push(nestedList.end());--newline--    }--newline----newline--    int next() {--newline--        hasNext();--newline--        return (begins.top()++)->getInteger();--newline--    }--newline----newline--    bool hasNext() {--newline--        while (begins.size()) {--newline--            if (begins.top() == ends.top()) {--newline--                begins.pop();--newline--                ends.pop();--newline--            } else {--newline--                auto x = begins.top();--newline--                if (x->isInteger())--newline--                    return true;--newline--                begins.top()++;--newline--                begins.push(x->getList().begin());--newline--                ends.push(x->getList().end());--newline--            }--newline--        }--newline--        return false;--newline--    }--newline----newline--private:--newline--    stack<vector<NestedInteger>::iterator> begins, ends;--newline--};",
            "python": "class NestedIterator(object):--newline----tab----newline----tab--    def __init__(self, nestedList):--newline----tab--        self.stack = [[nestedList, 0]]--newline----tab----newline----tab--    def next(self):--newline----tab--        self.hasNext()--newline----tab--        nestedList, i = self.stack[-1]--newline----tab--        self.stack[-1][1] += 1--newline----tab--        return nestedList[i].getInteger()--newline----tab--            --newline----tab--    def hasNext(self):--newline----tab--        s = self.stack--newline----tab--        while s:--newline----tab--            nestedList, i = s[-1]--newline----tab--            if i == len(nestedList):--newline----tab--                s.pop()--newline----tab--            else:--newline----tab--                x = nestedList[i]--newline----tab--                if x.isInteger():--newline----tab--                    return True--newline----tab--                s[-1][1] += 1--newline----tab--                s.append([x.getList(), 0])--newline----tab--        return False--newline----tab--",
            "topic_title": "Real iterator in Python, Java, C++"
        },
        {
            "java": "public class NestedIterator implements Iterator<Integer> {--newline--    NestedInteger nextInt;--newline--    Stack<Iterator<NestedInteger>> stack;--newline----newline--    public NestedIterator(List<NestedInteger> nestedList) {--newline--        stack = new Stack<Iterator<NestedInteger>>();--newline--        stack.push(nestedList.iterator());--newline--    }--newline----newline--    @Override--newline--    public Integer next() {--newline--        return nextInt != null ? nextInt.getInteger() : null; //Just in case--newline--    }--newline----newline--    @Override--newline--    public boolean hasNext() {--newline--        while (!stack.isEmpty()) {--newline--            if (!stack.peek().hasNext()) stack.pop();--newline--            else if ((nextInt = stack.peek().next()).isInteger()) return true;--newline--            else stack.push(nextInt.getList().iterator());--newline--        }--newline--        return false;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Share my Java neat solution, 8ms"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class NestedIterator {--newline--private:--newline--    stack<NestedInteger> nodes;--newline--    --newline--public:--newline--    NestedIterator(vector<NestedInteger> &nestedList) {--newline--        int size = nestedList.size();--newline--        for(int i = size - 1; i >= 0; --i) {--newline--            nodes.push(nestedList[i]);--newline--        }--newline--    }--newline----newline--int next() {--newline--    int result = nodes.top().getInteger();--newline--    nodes.pop();--newline--    return result;--newline--}--newline----newline--bool hasNext() {--newline--    while(!nodes.empty()) {--newline--        NestedInteger curr = nodes.top();--newline--        if(curr.isInteger()) {--newline--            return true;--newline--        }--newline--        --newline--        nodes.pop();--newline--        vector<NestedInteger>& adjs = curr.getList();--newline--        int size = adjs.size();--newline--        for(int i = size - 1; i >= 0; --i) {--newline--            nodes.push(adjs[i]);--newline--        }--newline--    }--newline--    --newline--    return false;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "Concise C++ without storing all values at initialization"
        },
        {
            "java": "public class NestedIterator implements Iterator<Integer> {--newline----newline--private List<Integer> flattenedList;--newline--private Iterator<Integer> it;--newline----newline--public NestedIterator(List<NestedInteger> nestedList) {--newline--    flattenedList = new LinkedList<Integer>();--newline--    flatten(nestedList);--newline--    it = flattenedList.iterator();--newline--}--newline----newline--private void flatten(List<NestedInteger> nestedList) {--newline--    for (NestedInteger i : nestedList) {--newline--        if (i.isInteger()) {--newline--            flattenedList.add(i.getInteger());--newline--        } else {--newline--            flatten(i.getList());--newline--        }--newline--    }--newline--}--newline----newline--@Override--newline--public Integer next() {--newline--    return it.next();--newline--}--newline----newline--@Override--newline--public boolean hasNext() {--newline--    return it.hasNext();--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Flatten the list and iterate with plain next() and hasNext() (Java)"
        }
    ],
    "qc": "341.json"
}