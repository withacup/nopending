{
    "posts": [
        {
            "java": "public class Solution {--newline--    public ListNode deleteDuplicates(ListNode head) {--newline--            if(head==null) return null;--newline--            ListNode FakeHead=new ListNode(0);--newline--            FakeHead.next=head;--newline--            ListNode pre=FakeHead;--newline--            ListNode cur=head;--newline--            while(cur!=null){--newline--                while(cur.next!=null&&cur.val==cur.next.val){--newline--                    cur=cur.next;--newline--                }--newline--                if(pre.next==cur){--newline--                    pre=pre.next;--newline--                }--newline--                else{--newline--                    pre.next=cur.next;--newline--                }--newline--                cur=cur.next;--newline--            }--newline--            return FakeHead.next;--newline--        }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My accepted Java code"
        },
        {
            "java": "public class Solution {--newline--    public ListNode deleteDuplicates(ListNode head) {--newline--        if (head == null) return null;--newline--        --newline--        if (head.next != null && head.val == head.next.val) {--newline--            while (head.next != null && head.val == head.next.val) {--newline--                head = head.next;--newline--            }--newline--            return deleteDuplicates(head.next);--newline--        } else {--newline--            head.next = deleteDuplicates(head.next);--newline--        }--newline--        return head;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My Recursive Java Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    ListNode* deleteDuplicates(ListNode* head) {--newline--        if (!head) return 0;--newline--        if (!head->next) return head;--newline--        --newline--        int val = head->val;--newline--        ListNode* p = head->next;--newline--        --newline--        if (p->val != val) {--newline--            head->next = deleteDuplicates(p);--newline--            return head;--newline--        } else {--newline--            while (p && p->val == val) p = p->next;--newline--            return deleteDuplicates(p);--newline--        }--newline--    }--newline--};",
            "python": null,
            "topic_title": "Simple and clear c++ recursive solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    ListNode *deleteDuplicates(ListNode *head) {--newline--        ListNode **runner = &head;--newline--        --newline--        if(!head || !head->next)return head;--newline--        --newline--        while(*runner)--newline--        {--newline--            if((*runner)->next && (*runner)->next->val == (*runner)->val)--newline--            {--newline--                ListNode *temp = *runner;--newline--                while(temp && (*runner)->val == temp->val)--newline--                    temp = temp->next;--newline--                --newline--                *runner = temp;--newline--            }--newline--            else--newline--                runner = &((*runner)->next);--newline--        }--newline--        --newline--        return head;--newline--    }--newline--};",
            "python": null,
            "topic_title": "Is this the best C++ solution?"
        },
        {
            "java": "public class Solution {--newline--public ListNode deleteDuplicates(ListNode head) {--newline----tab--//use two pointers, slow - track the node before the dup nodes, --newline----tab--// fast - to find the last node of dups.--newline--    ListNode dummy = new ListNode(0), fast = head, slow = dummy;--newline--    slow.next = fast;--newline--    while(fast != null) {--newline--    --tab--while (fast.next != null && fast.val == fast.next.val) {--newline--     --tab----tab--fast = fast.next;    //while loop to find the last node of the dups.--newline--    --tab--}--newline--    --tab--if (slow.next != fast) { //duplicates detected.--newline--    --tab----tab--slow.next = fast.next; //remove the dups.--newline--    --tab----tab--fast = slow.next;     //reposition the fast pointer.--newline--    --tab--} else { //no dup, move down both pointer.--newline--    --tab----tab--slow = slow.next;--newline--    --tab----tab--fast = fast.next;--newline--    --tab--}--newline--    --tab----newline--    }--newline--    return dummy.next;--newline--} }",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java simple and clean code with comment"
        }
    ],
    "qc": "82.json"
}