{
    "posts": [
        {
            "java": "public class Solution {--newline--    private final String[] LESS_THAN_20 = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};--newline--    private final String[] TENS = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};--newline--    private final String[] THOUSANDS = {\"\", \"Thousand\", \"Million\", \"Billion\"};--newline--    --newline--    public String numberToWords(int num) {--newline--        if (num == 0) return \"Zero\";--newline--    --newline--        int i = 0;--newline--        String words = \"\";--newline--        --newline--        while (num > 0) {--newline--            if (num % 1000 != 0)--newline--        --tab--    words = helper(num % 1000) +THOUSANDS[i] + \" \" + words;--newline--        --tab--num /= 1000;--newline--        --tab--i++;--newline--        }--newline--        --newline--        return words.trim();--newline--    }--newline--    --newline--    private String helper(int num) {--newline--        if (num == 0)--newline--            return \"\";--newline--        else if (num < 20)--newline--            return LESS_THAN_20[num] + \" \";--newline--        else if (num < 100)--newline--            return TENS[num / 10] + \" \" + helper(num % 10);--newline--        else--newline--            return LESS_THAN_20[num / 100] + \" Hundred \" + helper(num % 100);--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My clean Java solution, very easy to understand"
        },
        {
            "java": "public class Solution {--newline--    private final String[] belowTen = new String[] {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};--newline--    private final String[] belowTwenty = new String[] {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};--newline--    private final String[] belowHundred = new String[] {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};--newline--    --newline--    public String numberToWords(int num) {--newline--        if (num == 0) return \"Zero\";--newline--        return helper(num); --newline--    }--newline--    --newline--    private String helper(int num) {--newline--        String result = new String();--newline--        if (num < 10) result = belowTen[num];--newline--        else if (num < 20) result = belowTwenty[num -10];--newline--        else if (num < 100) result = belowHundred[num/10] + \" \" + helper(num % 10);--newline--        else if (num < 1000) result = helper(num/100) + \" Hundred \" +  helper(num % 100);--newline--        else if (num < 1000000) result = helper(num/1000) + \" Thousand \" +  helper(num % 1000);--newline--        else if (num < 1000000000) result = helper(num/1000000) + \" Million \" +  helper(num % 1000000);--newline--        else result = helper(num/1000000000) + \" Billion \" + helper(num % 1000000000);--newline--        return result.trim();--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Short clean Java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    static string numberToWords(int n) {--newline--        if(n == 0) return \"Zero\";--newline--        else return int_string(n).substr(1);--newline--    }--newline--private:--newline--    static const char * const below_20[];--newline--    static const char * const below_100[];--newline--    static string int_string(int n) {--newline--        if(n >= 1000000000)   return int_string(n / 1000000000) + \" Billion\" + int_string(n - 1000000000 * (n / 1000000000));--newline--        else if(n >= 1000000) return int_string(n / 1000000) + \" Million\" + int_string(n - 1000000 * (n / 1000000));--newline--        else if(n >= 1000)    return int_string(n / 1000) + \" Thousand\" + int_string(n - 1000 * (n / 1000));--newline--        else if(n >= 100)     return int_string(n / 100) + \" Hundred\" + int_string(n - 100 * (n / 100));--newline--        else if(n >= 20)      return string(\" \") + below_100[n / 10 - 2] + int_string(n - 10 * (n / 10));--newline--        else if(n >= 1)       return string(\" \") + below_20[n - 1];--newline--        else return \"\";--newline--        }--newline--    }--newline--};--newline----newline--const char * const Solution::below_20[] =  {\"One\", \"Two\", \"Three\", \"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\",\"Ten\", \"Eleven\",\"Twelve\",\"Thirteen\",\"Fourteen\",\"Fifteen\",\"Sixteen\",\"Seventeen\",\"Eighteen\",\"Nineteen\"};--newline--const char * const Solution::below_100[] = {\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};",
            "python": null,
            "topic_title": "Fairly Clear 4ms C++ solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def numberToWords(self, num):--newline----tab--        to19 = 'One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve ' \\--newline----tab--               'Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen'.split()--newline----tab--        tens = 'Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety'.split()--newline----tab--        def words(n):--newline----tab--            if n < 20:--newline----tab--                return to19[n-1:n]--newline----tab--            if n < 100:--newline----tab--                return [tens[n/10-2]] + words(n%10)--newline----tab--            if n < 1000:--newline----tab--                return [to19[n/100-1]] + ['Hundred'] + words(n%100)--newline----tab--            for p, w in enumerate(('Thousand', 'Million', 'Billion'), 1):--newline----tab--                if n < 1000**(p+1):--newline----tab--                    return words(n/1000**p) + [w] + words(n%1000**p)--newline----tab--        return ' '.join(words(num)) or 'Zero'",
            "topic_title": "Recursive Python"
        },
        {
            "java": "public class Solution {--newline--    public String numberToWords(int num) {--newline--        if(num == 0)--newline--            return \"Zero\";--newline--        String[] bigString = new String[]{\"Thousand\",\"Million\",\"Billion\"};--newline--        String result =  numberToWordsHelper(num%1000);--newline--        num = num/1000;--newline--        if(num > 0 && num%1000>0){--newline--            result = numberToWordsHelper(num%1000) + \"Thousand \" + result;--newline--        }--newline--        num = num/1000;--newline--        if(num > 0 && num%1000>0){--newline--            result = numberToWordsHelper(num%1000) + \"Million \" + result;--newline--        }--newline--        num = num/1000;--newline--        if(num > 0){--newline--            result = numberToWordsHelper(num%1000) + \"Billion \" + result;--newline--        }--newline--        return result.trim();--newline--    }--newline--    --newline--    public String numberToWordsHelper(int num){--newline--        String[] digitString = new String[]{\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};--newline--        String[] teenString = new String[]{\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\",\"Eighteen\", \"Nineteen\"};--newline--        String[] tenString = new String[]{\"\",\"\",\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};--newline--        String result = \"\";--newline--        if(num > 99){--newline--            result += digitString[num/100] + \" Hundred \";--newline--        }--newline--        num = num % 100;--newline--        if(num < 20 && num > 9){--newline--            result += teenString[num%10]+\" \";--newline--        }else{--newline--            if(num > 19){--newline--                result += tenString[num/10]+\" \";--newline--            }--newline--            num = num % 10;--newline--            if(num > 0)--newline--                result += digitString[num]+\" \";--newline--        }--newline--        return result;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My Java Solution"
        }
    ],
    "qc": "273.json"
}