{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int maxProfit(int[] prices) {--newline--        int sell = 0, prev_sell = 0, buy = Integer.MIN_VALUE, prev_buy;--newline--        for (int price : prices) {--newline--            prev_buy = buy;--newline--            buy = Math.max(prev_sell - price, prev_buy);--newline--            prev_sell = sell;--newline--            sell = Math.max(prev_buy + price, prev_sell);--newline--        }--newline--        return sell;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int maxProfit(vector<int> &prices) {--newline--        int buy(INT_MIN), sell(0), prev_sell(0), prev_buy;--newline--        for (int price : prices) {--newline--            prev_buy = buy;--newline--            buy = max(prev_sell - price, buy);--newline--            prev_sell = sell;--newline--            sell = max(prev_buy + price, sell);--newline--        }--newline--        return sell;--newline--    }--newline--    --newline--}",
            "python": "class Solution :--newline----tab--    def maxProfit(self, prices):--newline----tab--        if len(prices) < 2:--newline----tab--            return 0--newline----tab--        sell, buy, prev_sell, prev_buy = 0, -prices[0], 0, 0--newline----tab--        for price in prices:--newline----tab--            prev_buy = buy--newline----tab--            buy = max(prev_sell - price, prev_buy)--newline----tab--            prev_sell = sell--newline----tab--            sell = max(prev_buy + price, prev_sell)--newline----tab--        return sell",
            "topic_title": "Share my thinking process"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline----tab--int maxProfit(vector<int>& prices){--newline----tab----tab--if (prices.size() <= 1) return 0;--newline----tab----tab--vector<int> s0(prices.size(), 0);--newline----tab----tab--vector<int> s1(prices.size(), 0);--newline----tab----tab--vector<int> s2(prices.size(), 0);--newline----tab----tab--s1[0] = -prices[0];--newline----tab----tab--s0[0] = 0;--newline----tab----tab--s2[0] = INT_MIN;--newline----tab----tab--for (int i = 1; i < prices.size(); i++) {--newline----tab----tab----tab--s0[i] = max(s0[i - 1], s2[i - 1]);--newline----tab----tab----tab--s1[i] = max(s1[i - 1], s0[i - 1] - prices[i]);--newline----tab----tab----tab--s2[i] = s1[i - 1] + prices[i];--newline----tab----tab--}--newline----tab----tab--return max(s0[prices.size() - 1], s2[prices.size() - 1]);--newline----tab--}--newline--};",
            "python": null,
            "topic_title": "Share my DP solution (By State Machine Thinking)"
        },
        {
            "java": "public class Solution {--newline--    public int maxProfit(int[] prices) {--newline--        if(prices == null || prices.length <= 1) return 0;--newline--      --newline--        int b0 = -prices[0], b1 = b0;--newline--        int s0 = 0, s1 = 0, s2 = 0;--newline--     --newline--        for(int i = 1; i < prices.length; i++) {--newline--        --tab--b0 = Math.max(b1, s2 - prices[i]);--newline--        --tab--s0 = Math.max(s1, b1 + prices[i]);--newline--        --tab--b1 = b0; s2 = s1; s1 = s0; --newline--        }--newline--        return s0;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Easiest JAVA solution with explanations"
        },
        {
            "java": "public class Solution {--newline--    public int maxProfit(int[] prices) {--newline--        int profit1=0, profit2=0;   --newline--        for(int i=1; i<prices.length; i++){--newline--            int copy=profit1;--newline--            profit1=Math.max(profit1+prices[i]-prices[i-1], profit2);--newline--            profit2=Math.max(copy, profit2);--newline--        }--newline--        return Math.max(profit1, profit2);--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "7-line Java: only consider sell and cooldown"
        },
        {
            "java": "public class Solution {--newline--    public int maxProfit(int[] prices) {--newline--    --tab--int L = prices.length;--newline--    --tab--if(L < 2) return 0;--newline--    --newline--    --tab--int has1_doNothing = -prices[0];--newline--    --tab--int has1_Sell = 0;--newline--    --tab--int has0_doNothing = 0;--newline--    --tab--int has0_Buy = -prices[0];--newline--    --tab--for(int i=1; i<L; i++) {--newline--    --tab----tab--has1_doNothing = has1_doNothing > has0_Buy ? has1_doNothing : has0_Buy;--newline--    --tab----tab--has0_Buy = -prices[i] + has0_doNothing;--newline--    --tab----tab--has0_doNothing = has0_doNothing > has1_Sell ? has0_doNothing : has1_Sell;--newline--    --tab----tab--has1_Sell = prices[i] + has1_doNothing;--newline--    --tab--}--newline--    --tab--return has1_Sell > has0_doNothing ? has1_Sell : has0_doNothing;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Very Easy to Understand One Pass O(n) Solution with No Extra Space"
        }
    ],
    "qc": "309.json"
}