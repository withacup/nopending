{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class TrieNode--newline--{--newline--public:--newline--    TrieNode *next[26];--newline--    bool is_word;--newline--    --newline--    // Initialize your data structure here.--newline--    TrieNode(bool b = false)--newline--    {--newline--        memset(next, 0, sizeof(next));--newline--        is_word = b;--newline--    }--newline--};--newline----newline--class Trie--newline--{--newline--    TrieNode *root;--newline--public:--newline--    Trie()--newline--    {--newline--        root = new TrieNode();--newline--    }--newline----newline--    // Inserts a word into the trie.--newline--    void insert(string s)--newline--    {--newline--        TrieNode *p = root;--newline--        for(int i = 0; i < s.size(); ++ i)--newline--        {--newline--            if(p -> next[s[i] - 'a'] == NULL)--newline--                p -> next[s[i] - 'a'] = new TrieNode();--newline--            p = p -> next[s[i] - 'a'];--newline--        }--newline--        p -> is_word = true;--newline--    }--newline----newline--    // Returns if the word is in the trie.--newline--    bool search(string key)--newline--    {--newline--        TrieNode *p = find(key);--newline--        return p != NULL && p -> is_word;--newline--    }--newline----newline--    // Returns if there is any word in the trie--newline--    // that starts with the given prefix.--newline--    bool startsWith(string prefix)--newline--    {--newline--        return find(prefix) != NULL;--newline--    }--newline----newline--private:--newline--    TrieNode* find(string key)--newline--    {--newline--        TrieNode *p = root;--newline--        for(int i = 0; i < key.size() && p != NULL; ++ i)--newline--            p = p -> next[key[i] - 'a'];--newline--        return p;--newline--    }--newline--};",
            "python": null,
            "topic_title": "Maybe the code is not too much by using &quot;next&#91;26&#93;&quot;, C++"
        },
        {
            "java": "class TrieNode {--newline--    public char val;--newline--    public boolean isWord; --newline--    public TrieNode[] children = new TrieNode[26];--newline--    public TrieNode() {}--newline--    TrieNode(char c){--newline--        TrieNode node = new TrieNode();--newline--        node.val = c;--newline--    }--newline--}--newline----newline--public class Trie {--newline--    private TrieNode root;--newline--    public Trie() {--newline--        root = new TrieNode();--newline--        root.val = ' ';--newline--    }--newline----newline--    public void insert(String word) {--newline--        TrieNode ws = root;--newline--        for(int i = 0; i < word.length(); i++){--newline--            char c = word.charAt(i);--newline--            if(ws.children[c - 'a'] == null){--newline--                ws.children[c - 'a'] = new TrieNode(c);--newline--            }--newline--            ws = ws.children[c - 'a'];--newline--        }--newline--        ws.isWord = true;--newline--    }--newline----newline--    public boolean search(String word) {--newline--        TrieNode ws = root; --newline--        for(int i = 0; i < word.length(); i++){--newline--            char c = word.charAt(i);--newline--            if(ws.children[c - 'a'] == null) return false;--newline--            ws = ws.children[c - 'a'];--newline--        }--newline--        return ws.isWord;--newline--    }--newline----newline--    public boolean startsWith(String prefix) {--newline--        TrieNode ws = root; --newline--        for(int i = 0; i < prefix.length(); i++){--newline--            char c = prefix.charAt(i);--newline--            if(ws.children[c - 'a'] == null) return false;--newline--            ws = ws.children[c - 'a'];--newline--        }--newline--        return true;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "AC JAVA solution simple using single array"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class TrieNode:--newline----tab--# Initialize your data structure here.--newline----tab--def __init__(self):--newline----tab--    self.children = collections.defaultdict(TrieNode)--newline----tab--    self.is_word = False--newline----tab----newline----tab--class Trie:--newline----tab----newline----tab--def __init__(self):--newline----tab--    self.root = TrieNode()--newline----tab----newline----tab--def insert(self, word):--newline----tab--    current = self.root--newline----tab--    for letter in word:--newline----tab--        current = current.children[letter]--newline----tab--    current.is_word = True--newline----tab----newline----tab--def search(self, word):--newline----tab--    current = self.root--newline----tab--    for letter in word:--newline----tab--        current = current.children.get(letter)--newline----tab--        if current is None:--newline----tab--            return False--newline----tab--    return current.is_word--newline----tab----newline----tab--def startsWith(self, prefix):--newline----tab--    current = self.root--newline----tab--    for letter in prefix:--newline----tab--        current = current.children.get(letter)--newline----tab--        if current is None:--newline----tab--            return False--newline----tab--    return True",
            "topic_title": "AC Python Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "    /**--newline--     ** author: cxq--newline--     ** weibo: http://weibo.com/chenxq1992--newline--     **/ --newline----newline--    class TrieNode {--newline--    public:--newline--        char content;   // the character included--newline--        bool isend;     // if the node is the end of a word--newline--        int shared;     // the number of the node shared ,convenient to implement delete(string key), not necessary in this problem--newline--        vector<TrieNode*> children; // the children of the node--newline--        // Initialize your data structure here.--newline--        TrieNode():content(' '), isend(false), shared(0) {}--newline--        TrieNode(char ch):content(ch), isend(false), shared(0) {}--newline--        TrieNode* subNode(char ch) {--newline--            if (!children.empty()) {--newline--                for (auto child : children) {--newline--                    if (child->content == ch)--newline--                        return child;--newline--                }--newline--            }--newline--            return nullptr;--newline--        }--newline--        ~TrieNode() {--newline--            for (auto child : children)--newline--                delete child;--newline--        }--newline--    };--newline--    --newline--    class Trie {--newline--    public:--newline--        Trie() {--newline--            root = new TrieNode();--newline--        }--newline--    --newline--        // Inserts a word into the trie.--newline--        void insert(string s) {--newline--            if (search(s)) return;--newline--            TrieNode* curr = root;--newline--            for (auto ch : s) {--newline--                TrieNode* child = curr->subNode(ch);--newline--                if (child != nullptr) {--newline--                    curr = child;--newline--                } else {--newline--                    TrieNode *newNode = new TrieNode(ch);--newline--                    curr->children.push_back(newNode);--newline--                    curr = newNode;--newline--                }--newline--                ++curr->shared;--newline--            }--newline--            curr->isend = true;--newline--        }--newline--    --newline--        // Returns if the word is in the trie.--newline--        bool search(string key) {--newline--            TrieNode* curr = root;--newline--            for (auto ch : key) {--newline--                curr = curr->subNode(ch);--newline--                if (curr == nullptr)--newline--                    return false;--newline--            }--newline--            return curr->isend == true;--newline--        }--newline--    --newline--        // Returns if there is any word in the trie--newline--        // that starts with the given prefix.--newline--        bool startsWith(string prefix) {--newline--            TrieNode* curr = root;--newline--            for (auto ch : prefix) {--newline--                curr = curr->subNode(ch);--newline--                if (curr == nullptr)--newline--                    return false;--newline--            }--newline--            return true;--newline--        }--newline--        ~Trie() {--newline--            delete root;--newline--        }--newline--    private:--newline--        TrieNode* root;--newline--    };",
            "python": null,
            "topic_title": "C++, My solution,  easy to understand:)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class TrieNode:--newline----tab--        # Initialize your data structure here.--newline----tab--        def __init__(self):--newline----tab--            self.word=False--newline----tab--            self.children={}--newline----tab--    --newline----tab--    class Trie:--newline----tab--    --newline----tab--        def __init__(self):--newline----tab--            self.root = TrieNode()--newline----tab--    --newline----tab--        # @param {string} word--newline----tab--        # @return {void}--newline----tab--        # Inserts a word into the trie.--newline----tab--        def insert(self, word):--newline----tab--            node=self.root--newline----tab--            for i in word:--newline----tab--                if i not in node.children:--newline----tab--                    node.children[i]=TrieNode()--newline----tab--                node=node.children[i]--newline----tab--            node.word=True--newline----tab--    --newline----tab--        # @param {string} word--newline----tab--        # @return {boolean}--newline----tab--        # Returns if the word is in the trie.--newline----tab--        def search(self, word):--newline----tab--            node=self.root--newline----tab--            for i in word:--newline----tab--                if i not in node.children:--newline----tab--                    return False--newline----tab--                node=node.children[i]--newline----tab--            return node.word--newline----tab--    --newline----tab--        # @param {string} prefix--newline----tab--        # @return {boolean}--newline----tab--        # Returns if there is any word in the trie--newline----tab--        # that starts with the given prefix.--newline----tab--        def startsWith(self, prefix):--newline----tab--            node=self.root--newline----tab--            for i in prefix:--newline----tab--                if i not in node.children:--newline----tab--                    return False--newline----tab--                node=node.children[i]--newline----tab--            return True--newline----tab--            --newline----tab--    --newline----tab--    # Your Trie object will be instantiated and called as such:--newline----tab--    # trie = Trie()--newline----tab--    # trie.insert(\"somestring\")--newline----tab--    # trie.search(\"key\")",
            "topic_title": "My python solution"
        }
    ],
    "qc": "208.json"
}