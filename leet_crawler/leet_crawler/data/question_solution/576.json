{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int findPaths(int m, int n, int N, int i, int j) {--newline--        unsigned int g[50][50] = {}, r[50];--newline--        while (N-- > 0)--newline--            for (auto k = 0; k <= m; ++k)--newline--                for (auto l = 0; l < n; ++l) {--newline--                    auto tmp = r[l];--newline--                    r[l] = (k == m ? 0 : ((k == 0 ? 1 : g[k - 1][l]) + (k == m - 1 ? 1 : g[k + 1][l])--newline--                        + (l == 0 ? 1 : g[k][l - 1]) + (l == n - 1 ? 1 : g[k][l + 1])) % 1000000007);--newline--                    if (k > 0) g[k - 1][l] = tmp;--newline--                }--newline--        return g[i][j];--newline--    }--newline--    --newline--}",
            "python": null,
            "topic_title": "C++ 6 lines DP O(N * m * n), 6 ms"
        },
        {
            "java": "public class Solution {--newline--    public int findPaths(int m, int n, int N, int i, int j) {--newline--        if (N <= 0) return 0;--newline--        --newline--        final int MOD = 1000000007;--newline--        int[][] count = new int[m][n];--newline--        count[i][j] = 1;--newline--        int result = 0;--newline--        --newline--        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};--newline--        --newline--        for (int step = 0; step < N; step++) {--newline--            int[][] temp = new int[m][n];--newline--            for (int r = 0; r < m; r++) {--newline--                for (int c = 0; c < n; c++) {--newline--                    for (int[] d : dirs) {--newline--                        int nr = r + d[0];--newline--                        int nc = c + d[1];--newline--                        if (nr < 0 || nr >= m || nc < 0 || nc >= n) {--newline--                            result = (result + count[r][c]) % MOD;--newline--                        }--newline--                        else {--newline--                            temp[nr][nc] = (temp[nr][nc] + count[r][c]) % MOD;--newline--                        }--newline--                    }--newline--                }--newline--            }--newline--            count = temp;--newline--        }--newline--        --newline--        return result;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Solution, DP with space compression"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "import numpy as np--newline----newline--class Solution(object):--newline----tab--    def findPaths(self, m, n, N, i, j):--newline----tab--        paths = np.zeros((m, n), dtype=object)--newline----tab--        paths[i][j] = 1--newline----tab--        out = 0--newline----tab--        for _ in range(N):--newline----tab--            prev = paths--newline----tab--            paths = prev * 0--newline----tab--            paths[1:] += prev[:-1]--newline----tab--            paths[:-1] += prev[1:]--newline----tab--            paths[:,1:] += prev[:,:-1]--newline----tab--            paths[:,:-1] += prev[:,1:]--newline----tab--            out += 4 * prev.sum() - paths.sum()--newline----tab--        return out % (10**9 + 7)--newline----tab--",
            "topic_title": "Fast Python solution using NumPy"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def findPaths(self, R, C, N, sr, sc):--newline----tab--        MOD = 10**9 + 7--newline----tab--        nxt = [[0] * C for _ in xrange(R)]--newline----tab--        nxt[sr][sc] = 1--newline----tab--        --newline----tab--        ans = 0--newline----tab--        for time in xrange(N):--newline----tab--            cur = nxt--newline----tab--            nxt = [[0] * C for _ in xrange(R)]--newline----tab--            for r, row in enumerate(cur):--newline----tab--                for c, val in enumerate(row):--newline----tab--                    for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):--newline----tab--                        if 0 <= nr < R and 0 <= nc < C:--newline----tab--                            nxt[nr][nc] += val--newline----tab--                            nxt[nr][nc] %= MOD--newline----tab--                        else:--newline----tab--                            ans += val--newline----tab--                            ans %= MOD--newline----tab--            --newline----tab--        return ans--newline----tab--    ",
            "topic_title": "Python, Straightforward with Explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--private:--newline--    int m, n, N, dx[4] = {-1, 1, 0, 0}, dy[4] = {0, 0, -1, 1};--newline--    const int mod = 1e9 + 7;--newline--    bool check(int i, int j) {return i >= m || j >= n || i < 0 || j < 0;}--newline--public:--newline--    int findPaths(int m, int n, int N, int i, int j) {--newline--        this->m = m, this->n = n, this->N = N;--newline--        vector<vector<int>> dp(m * n, vector<int>(N, -1));--newline--        return solve(i, j, N, dp, 0);--newline--    }--newline--    int solve(int i, int j, int step, vector<vector<int>>& dp, int ans) {--newline--        if (check(i, j)) return 1; // out of boundary, count as 1 way--newline--        if (step == 0) return 0; // without steps but not out of bounday, don't count as a way--newline--        if (dp[i*n + j][step-1] == -1) {--newline--            // the answer came from 4 paths: top, down, left, right--newline--            for (int k=0; k<4; ++k) --newline--                ans = (ans + solve(i + dx[k], j + dy[k], step-1, dp, 0) % mod) % mod;--newline--            dp[i*n + j][step-1] = ans;--newline--        }--newline--        return dp[i*n + j][step-1];--newline--    }--newline--};--newline--",
            "python": "class Solution(object):--newline----tab--    dx = [-1,1,0,0]--newline----tab--    dy = [0,0,-1,1]--newline----tab--    lc = 1e9 + 7--newline----tab----newline----tab--    def solve(self, i, j, step, dp, ans, m, n, N):--newline----tab--        if i >= m or j >= n or i < 0 or j < 0:--newline----tab--            return 1--newline----tab--        if step == 0:--newline----tab--            return 0--newline----tab--        if dp[i*n +j][step - 1] == -1:--newline----tab--            for k in xrange(4):--newline----tab--                ans = (ans + self.solve(i + self.dx[k], j + self.dy[k], step-1, dp, 0, m, n, N) % self.lc) % self.lc--newline----tab--            dp[i*n + j][step - 1] = ans--newline----tab--        return int(dp[i*n + j][step - 1])--newline----tab--        --newline----tab--    def findPaths(self, m, n, N, i, j):--newline----tab--        dp = [[-1 for t in xrange(N)] for k in xrange(m*n)]--newline----tab--        return self.solve(i, j, N, dp, 0, m, n, N)--newline----tab--",
            "topic_title": "Easy-understanding C++ &amp; Python solution with explanation"
        }
    ],
    "qc": "576.json"
}