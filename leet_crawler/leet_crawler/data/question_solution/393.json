{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    bool validUtf8(vector<int>& data) {--newline--        int count = 0;--newline--        for (auto c : data) {--newline--            if (count == 0) {--newline--                if ((c >> 5) == 0b110) count = 1;--newline--                else if ((c >> 4) == 0b1110) count = 2;--newline--                else if ((c >> 3) == 0b11110) count = 3;--newline--                else if ((c >> 7)) return false;--newline--            } else {--newline--                if ((c >> 6) != 0b10) return false;--newline--                count--;--newline--            }--newline--        }--newline--        return count == 0;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "Concise C++ implementation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Feeling like an English reading comprehension problem"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "one pass simple solution"
        },
        {
            "java": "public class Solution {--newline--    public boolean validUtf8(int[] data) {--newline--    --tab--if(data==null || data.length==0) return false;--newline--    --tab--boolean isValid = true;--newline--    --tab--for(int i=0;i<data.length;i++) {--newline--    --tab----tab--if(data[i]>255) return false; // 1 after 8th digit, 100000000--newline--    --tab----tab--int numberOfBytes = 0;--newline--    --tab----tab--if((data[i] & 128) == 0) { // 0xxxxxxx, 1 byte, 128(10000000)--newline--    --tab----tab----tab--numberOfBytes = 1;--newline--    --tab----tab--} else if((data[i] & 224) == 192) { // 110xxxxx, 2 bytes, 224(11100000), 192(11000000)--newline--    --tab----tab----tab--numberOfBytes = 2;--newline--    --tab----tab--} else if((data[i] & 240) == 224) { // 1110xxxx, 3 bytes, 240(11110000), 224(11100000)--newline--    --tab----tab----tab--numberOfBytes = 3;--newline--    --tab----tab--} else if((data[i] & 248) == 240) { // 11110xxx, 4 bytes, 248(11111000), 240(11110000)--newline--    --tab----tab----tab--numberOfBytes = 4;--newline--    --tab----tab--} else {--newline--    --tab----tab----tab--return false;--newline--    --tab----tab--}--newline--    --tab----tab--for(int j=1;j<numberOfBytes;j++) { // check that the next n bytes start with 10xxxxxx--newline--    --tab----tab----tab--if(i+j>=data.length) return false;--newline--    --tab----tab----tab--if((data[i+j] & 192) != 128) return false; // 192(11000000), 128(10000000)--newline--    --tab----tab--}--newline--    --tab----tab--i=i+numberOfBytes-1;--newline--    --tab--}--newline--    --tab--return isValid;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Bit Manipulation, Java, 6ms"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "def check(nums, start, size):--newline--    for i in range(start + 1, start + size + 1):--newline--        if i >= len(nums) or (nums[i] >> 6) != 0b10: return False--newline--    return True--newline----newline--class Solution(object):--newline----tab--    def validUtf8(self, nums, start=0):--newline----tab--        while start < len(nums):--newline----tab--            first = nums[start]--newline----tab--            if   (first >> 3) == 0b11110 and check(nums, start, 3): start += 4--newline----tab--            elif (first >> 4) == 0b1110  and check(nums, start, 2): start += 3--newline----tab--            elif (first >> 5) == 0b110   and check(nums, start, 1): start += 2--newline----tab--            elif (first >> 7) == 0:                                 start += 1--newline----tab--            else:                                                   return False--newline----tab--        return True--newline----tab----newline----tab--# 45 / 45 test cases passed.--newline----tab--# Status: Accepted--newline----tab--# Runtime: 89 ms--newline----tab--",
            "topic_title": "Short&#x27;n&#x27;Clean 12-lines Python solution"
        }
    ],
    "qc": "393.json"
}