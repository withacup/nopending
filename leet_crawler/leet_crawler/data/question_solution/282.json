{
    "posts": [
        {
            "java": "public class Solution {--newline--    public List<String> addOperators(String num, int target) {--newline--        List<String> rst = new ArrayList<String>();--newline--        if(num == null || num.length() == 0) return rst;--newline--        helper(rst, \"\", num, target, 0, 0, 0);--newline--        return rst;--newline--    }--newline--    public void helper(List<String> rst, String path, String num, int target, int pos, long eval, long multed){--newline--        if(pos == num.length()){--newline--            if(target == eval)--newline--                rst.add(path);--newline--            return;--newline--        }--newline--        for(int i = pos; i < num.length(); i++){--newline--            if(i != pos && num.charAt(pos) == '0') break;--newline--            long cur = Long.parseLong(num.substring(pos, i + 1));--newline--            if(pos == 0){--newline--                helper(rst, path + cur, num, target, i + 1, cur, cur);--newline--            }--newline--            else{--newline--                helper(rst, path + \"+\" + cur, num, target, i + 1, eval + cur , cur);--newline--                --newline--                helper(rst, path + \"-\" + cur, num, target, i + 1, eval -cur, -cur);--newline--                --newline--                helper(rst, path + \"*\" + cur, num, target, i + 1, eval - multed + multed * cur, multed * cur );--newline--            }--newline--        }--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Standard Backtrace AC Solutoin, short and clear"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--private:--newline--    // cur: {string} expression generated so far.--newline--    // pos: {int}    current visiting position of num.--newline--    // cv:  {long}   cumulative value so far.--newline--    // pv:  {long}   previous operand value.--newline--    // op:  {char}   previous operator used.--newline--    void dfs(std::vector<string>& res, const string& num, const int target, string cur, int pos, const long cv, const long pv, const char op) {--newline--        if (pos == num.size() && cv == target) {--newline--            res.push_back(cur);--newline--        } else {--newline--            for (int i=pos+1; i<=num.size(); i++) {--newline--                string t = num.substr(pos, i-pos);--newline--                long now = stol(t);--newline--                if (to_string(now).size() != t.size()) continue;--newline--                dfs(res, num, target, cur+'+'+t, i, cv+now, now, '+');--newline--                dfs(res, num, target, cur+'-'+t, i, cv-now, now, '-');--newline--                dfs(res, num, target, cur+'*'+t, i, (op == '-') ? cv+pv - pv*now : ((op == '+') ? cv-pv + pv*now : pv*now), pv*now, op);--newline--            }--newline--        }--newline--    }--newline----newline--public:--newline--    vector<string> addOperators(string num, int target) {--newline--        vector<string> res;--newline--        if (num.empty()) return res;--newline--        for (int i=1; i<=num.size(); i++) {--newline--            string s = num.substr(0, i);--newline--            long cur = stol(s);--newline--            if (to_string(cur).size() != s.size()) continue;--newline--            dfs(res, num, target, s, i, cur, cur, '#');         // no operator defined.--newline--        }--newline----newline--        return res;--newline--    }--newline--};",
            "python": null,
            "topic_title": "17 lines solution, dfs (C++)"
        },
        {
            "java": "public class Solution {--newline--    void dfs(List<String> ret, char[] path, int len, long left, long cur, char[] digits, int pos, int target) {--newline--        if (pos == digits.length) {--newline--            if (left + cur == target) ret.add(new String(path, 0, len));--newline--            return;--newline--        }--newline--        long n = 0;--newline--        int j = len + 1;--newline--        for (int i = pos; i < digits.length; i++) {--newline--            n = n * 10 + digits[i] - '0';--newline--            path[j++] = digits[i];--newline--            path[len] = '+';--newline--            dfs(ret, path, j, left + cur, n, digits, i + 1, target);--newline--            path[len] = '-';--newline--            dfs(ret, path, j, left + cur, -n, digits, i + 1, target);--newline--            path[len] = '*';--newline--            dfs(ret, path, j, left, cur * n, digits, i + 1, target);--newline--            if (digits[pos] == '0') break; --newline--        }--newline--    }--newline--    public List<String> addOperators(String num, int target) {--newline--        List<String> ret = new LinkedList<>();--newline--        if (num.length() == 0) return ret;--newline--        char[] path = new char[num.length() * 2 - 1];--newline--        char[] digits = num.toCharArray();--newline--        long n = 0;--newline--        for (int i = 0; i < digits.length; i++) {--newline--            n = n * 10 + digits[i] - '0';--newline--            path[i] = digits[i];--newline--            dfs(ret, path, i + 1, 0, n, digits, i + 1, target);--newline--            if (n == 0) break;--newline--        }--newline--        return ret;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java AC solution, 19ms, beat 100.00%."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    void addOperators(vector<string>& result, string nums, string t, long long last, long long curVal, int target) {--newline--    --tab--if (nums.length() == 0) {--newline--    --tab----tab--if (curVal == target)--newline--    --tab----tab----tab--result.push_back(t);--newline--    --tab----tab--return;--newline--    --tab--}--newline--    --newline--    --tab--for (int i = 1; i<=nums.length(); i++) {--newline--    --tab----tab--string num = nums.substr(0, i);--newline--    --tab----tab--if(num.length() > 1 && num[0] == '0')--newline--    --tab----tab--    return;--newline--    --tab----tab----newline--    --tab----tab--string nextNum = nums.substr(i);--newline--    --newline--    --tab----tab--if (t.length() > 0) {--newline--    --tab----tab----tab--addOperators(result, nextNum, t + \"+\" + num, stoll(num), curVal + stoll(num), target);--newline--    --tab----tab----tab--addOperators(result, nextNum, t + \"-\" + num, -stoll(num), curVal - stoll(num), target);--newline--    --tab----tab----tab--addOperators(result, nextNum, t + \"*\" + num, last * stoll(num), (curVal - last) + (last * stoll(num)), target);--newline--    --tab----tab--}--newline--    --tab----tab--else --newline--    --tab----tab----tab--addOperators(result, nextNum, num, stoll(num), stoll(num), target);--newline--    --tab--}--newline--    }--newline--    --newline--    vector<string> addOperators(string num, int target) {--newline--    --tab--vector<string> result;--newline--    --tab--addOperators(result, num, \"\", 0, 0, target);--newline--    --tab--return result;--newline--    }--newline--}",
            "python": null,
            "topic_title": "Accepted C++ Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<string> addOperators(string num, int target) {--newline--        vector<string> result;--newline--        if(num.size()==0)   return result;--newline--        help(result, \"\", num, target, 0, 0, 0);--newline--        return result;--newline--    }--newline--    --newline--    void help(vector<string> &result, string path, string num, int target, int pos, long cur, long prev){--newline--        if(pos==num.size()){--newline--            if(cur==target)   result.push_back(path);--newline--            return;--newline--        }--newline--        for(int i=pos; i<num.size(); i++){--newline--            /*** corner-case-added-code ***/--newline--            if(num[pos]=='0' && i>pos) break;--newline--            string _str=num.substr(pos, i-pos+1);--newline--            long _value=stol(_str);--newline--            if(pos==0)  {--newline--                help(result, path+_str, num, target, i+1, _value, _value);--newline--            }--newline--            else{--newline--                help(result, path+\"+\"+_str, num, target, i+1, cur+_value, _value);--newline--                help(result, path+\"-\"+_str, num, target, i+1, cur-_value, -_value);--newline--                help(result, path+\"*\"+_str, num, target, i+1, cur-prev+prev*_value, prev*_value);--newline--            }--newline--        }--newline--    }--newline--};",
            "python": null,
            "topic_title": "&#91;recommend for beginners&#93;clean C++ implementation with detailed explanation"
        }
    ],
    "qc": "282.json"
}