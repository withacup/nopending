{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int islandPerimeter(int[][] grid) {--newline--        int islands = 0, neighbours = 0;--newline----newline--        for (int i = 0; i < grid.length; i++) {--newline--            for (int j = 0; j < grid[i].length; j++) {--newline--                if (grid[i][j] == 1) {--newline--                    islands++; // count islands--newline--                    if (i < grid.length - 1 && grid[i + 1][j] == 1) neighbours++; // count down neighbours--newline--                    if (j < grid[i].length - 1 && grid[i][j + 1] == 1) neighbours++; // count right neighbours--newline--                }--newline--            }--newline--        }--newline----newline--        return islands * 4 - neighbours * 2;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "clear and easy java solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def islandPerimeter(self, grid):--newline----tab--        return sum(sum(map(operator.ne, [0] + row, row + [0]))--newline----tab--                   for row in grid + map(list, zip(*grid)))",
            "topic_title": "Short Python"
        },
        {
            "java": "public class Solution {--newline--    public static int islandPerimeter(int[][] grid) {--newline--            if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;--newline--            int result = 0;--newline--            for (int i = 0; i < grid.length; i++) {--newline--                for (int j = 0; j < grid[0].length; j++) {--newline--                    if (grid[i][j] == 1) {--newline--                        result += 4;--newline--                        if (i > 0 && grid[i-1][j] == 1) result -= 2;--newline--                        if (j > 0 && grid[i][j-1] == 1) result -= 2;--newline--                    }--newline--                }--newline--            }--newline--            return result;--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java 9 line solution, add 4 for each land and remove 2 for each internal edge"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int islandPerimeter(vector<vector<int>>& grid) {--newline--            int count=0, repeat=0;--newline--            for(int i=0;i<grid.size();i++)--newline--            {--newline--                for(int j=0; j<grid[i].size();j++)--newline--                    {--newline--                        if(grid[i][j]==1)--newline--                        {--newline--                            count ++;--newline--                            if(i!=0 && grid[i-1][j] == 1) repeat++;--newline--                            if(j!=0 && grid[i][j-1] == 1) repeat++;--newline--                        }--newline--                    }--newline--            }--newline--            return 4*count-repeat*2;--newline--        }--newline--    --newline--}",
            "python": null,
            "topic_title": "C++ solution with explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Why the tag is &quot;Hash Table&quot;? Is there a hash table solution?"
        }
    ],
    "qc": "463.json"
}