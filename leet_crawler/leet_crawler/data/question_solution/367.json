{
    "posts": [
        {
            "java": "public class Solution {--newline--    public boolean isPerfectSquare(int num) {--newline--            long x = num;--newline--            while (x * x > num) {--newline--                x = (x + num / x) >> 1;--newline--            }--newline--            return x * x == num;--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "A square number is 1+3+5+7+..., JAVA code"
        },
        {
            "java": "public class Solution {--newline--    --newline--    --newline--        public boolean isPerfectSquare(int num) {--newline--          if (num < 1) return false;--newline--          for (int i = 1; num > 0; i += 2)--newline--            num -= i;--newline--          return num == 0;--newline--        }--newline--        --newline--        public boolean isPerfectSquare(int num) {--newline--          if (num < 1) return false;--newline--          long left = 1, right = num;// long type to avoid 2147483647 case--newline--        --newline--          while (left <= right) {--newline--            long mid = left + (right - left) / 2;--newline--            long t = mid * mid;--newline--            if (t > num) {--newline--              right = mid - 1;--newline--            } else if (t < num) {--newline--              left = mid + 1;--newline--            } else {--newline--              return true;--newline--            }--newline--          }--newline--        --newline--          return false;--newline--        }--newline--        --newline--        boolean isPerfectSquare(int num) {--newline--          if (num < 1) return false;--newline--          long t = num / 2;--newline--          while (t * t > num) {--newline--            t = (t + num / t) / 2;--newline--          }--newline--          return t * t == num;--newline--        }--newline--    --newline--    --newline--    --newline--      [1]: https://en.wikipedia.org/wiki/Newton%27s_method--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java Three Solutions 1,3,5,.. Sequence&#x2F;Binary Search&#x2F;Newton"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "3-4 short lines, Integer Newton, Most Languages"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    bool isPerfectSquare(int num) {--newline--        if (num < 0) return false;--newline--        int root = floorSqrt(num);--newline--        return root * root == num;--newline--    }--newline----newline--    int32_t floorSqrt(int32_t x) {--newline--        double y=x; int64_t i=0x5fe6eb50c7b537a9;--newline--        y = *(double*)&(i = i-(*(int64_t*)&y)/2);--newline--        y = y * (3 - x * y * y) * 0.5;--newline--        y = y * (3 - x * y * y) * 0.5;--newline--        i = x * y + 1; return i - (i * i > x);--newline--    }--newline--};",
            "python": null,
            "topic_title": "O(1) time c++ solution inspired by Q_rsqrt"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    bool isPerfectSquare(int num) {--newline--        long long l = 0, r = num;--newline--        while (l <= r) {--newline--            long long mid = (l + r) >> 1;--newline--            long long sqmid = mid * mid;--newline--            if (sqmid > num) r = mid - 1;--newline--            else if (sqmid < num) l = mid + 1;--newline--            else return true;--newline--        }--newline--        return false;--newline--    }--newline--}",
            "python": null,
            "topic_title": "O(logN) Bisection method"
        }
    ],
    "qc": "367.json"
}