{
    "posts": [
        {
            "java": "public class Solution {--newline--    public NestedInteger deserialize(String s) {--newline--        if (s.isEmpty())--newline--            return null;--newline--        if (s.charAt(0) != '[') // ERROR: special case--newline--            return new NestedInteger(Integer.valueOf(s));--newline--            --newline--        Stack<NestedInteger> stack = new Stack<>();--newline--        NestedInteger curr = null;--newline--        int l = 0; // l shall point to the start of a number substring; --newline--                   // r shall point to the end+1 of a number substring--newline--        for (int r = 0; r < s.length(); r++) {--newline--            char ch = s.charAt(r);--newline--            if (ch == '[') {--newline--                if (curr != null) {--newline--                    stack.push(curr);--newline--                }--newline--                curr = new NestedInteger();--newline--                l = r+1;--newline--            } else if (ch == ']') {--newline--                String num = s.substring(l, r);--newline--                if (!num.isEmpty())--newline--                    curr.add(new NestedInteger(Integer.valueOf(num)));--newline--                if (!stack.isEmpty()) {--newline--                    NestedInteger pop = stack.pop();--newline--                    pop.add(curr);--newline--                    curr = pop;--newline--                }--newline--                l = r+1;--newline--            } else if (ch == ',') {--newline--                if (s.charAt(r-1) != ']') {--newline--                    String num = s.substring(l, r);--newline--                    curr.add(new NestedInteger(Integer.valueOf(num)));--newline--                }--newline--                l = r+1;--newline--            }--newline--        }--newline--        --newline--        return curr;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "An Java Iterative Solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    NestedInteger deserialize(string s) {--newline--        istringstream in(s);--newline--        return deserialize(in);--newline--    }--newline--private:--newline--    NestedInteger deserialize(istringstream &in) {--newline--        int number;--newline--        if (in >> number)--newline--            return NestedInteger(number);--newline--        in.clear();--newline--        in.get();--newline--        NestedInteger list;--newline--        while (in.peek() != ']') {--newline--            list.add(deserialize(in));--newline--            if (in.peek() == ',')--newline--                in.get();--newline--        }--newline--        in.get();--newline--        return list;--newline--    }--newline--};--newline--",
            "python": "class Solution :--newline----tab--    def deserialize(self, s):--newline----tab--        def nestedInteger():--newline----tab--            num = ''--newline----tab--            while s[-1] in '1234567890-':--newline----tab--                num += s.pop()--newline----tab--            if num:--newline----tab--                return NestedInteger(int(num))--newline----tab--            s.pop()--newline----tab--            lst = NestedInteger()--newline----tab--            while s[-1] != ']':--newline----tab--                lst.add(nestedInteger())--newline----tab--                if s[-1] == ',':--newline----tab--                    s.pop()--newline----tab--            s.pop()--newline----tab--            return lst--newline----tab--        s = list(' ' + s[::-1])--newline----tab--        return nestedInteger()--newline----tab--    ",
            "topic_title": "Python &amp; C++ solutions"
        },
        {
            "java": "public class Solution {--newline--    public NestedInteger deserialize(String s) {--newline--            if(s == null || s.isEmpty() || s.length() == 0) return new NestedInteger();--newline--            Stack<NestedInteger> workStack = new Stack<NestedInteger>();--newline--            NestedInteger result = null;--newline--            StringBuilder sb = new StringBuilder();--newline--            int i = 0;--newline--            //if it's just a single number, then we'll just return a nested integer with one integer--newline--            if(s.charAt(i) != '['){--newline--                sb.setLength(0);--newline--                while(i < s.length() && ((Character.getNumericValue(s.charAt(i)) < 10 && Character.getNumericValue(s.charAt(i)) >= 0) || s.charAt(i) == '-')){--newline--                    sb.append(s.charAt(i));--newline--                    i++;--newline--                }--newline--                int num = Integer.parseInt(sb.toString());--newline--                return new NestedInteger(num);--newline--            }//all other cases, we'll return a nested integer with a list--newline--            else{--newline--                while (i < s.length()) {--newline--                    if (s.charAt(i) == '[') {--newline--                        NestedInteger ni = new NestedInteger();--newline--                        // we'll put this one into its last one if there's one on the workStack--newline--                        if (!workStack.isEmpty()) {--newline--                            NestedInteger lastNi = workStack.pop();--newline--                            lastNi.add(ni);--newline--                            workStack.push(lastNi);// then push it back--newline--                        }--newline--                        workStack.push(ni);--newline--                        i++;--newline--                    } else if (s.charAt(i) == ',') {--newline--                        i++;--newline--                    } else if (s.charAt(i) == ']') {--newline--                        NestedInteger completedNi = workStack.pop();--newline--                        result = completedNi;--newline--                        i++;--newline--                    } else {--newline--                        // then it must be a number--newline--                        sb.setLength(0);--newline--                        while (i < s.length()--newline--                                && ((Character.getNumericValue(s.charAt(i)) < 10 && Character--newline--                                        .getNumericValue(s.charAt(i)) >= 0) || s.charAt(i) == '-')) {--newline--                            sb.append(s.charAt(i));--newline--                            i++;--newline--                        }--newline--                        int num = Integer.parseInt(sb.toString());--newline--                        NestedInteger ni = null;--newline--                        if (!workStack.isEmpty())--newline--                            ni = workStack.pop();--newline--                        else--newline--                            ni = new NestedInteger();--newline--                        // case 1: if this one contains one integer--newline--                        if (ni.isInteger()) {--newline--                            // we'll add it to this ni--newline--                            ni.add(new NestedInteger(num));--newline--                        }--newline--                        // case 2: if this one contains a nested integer--newline--                        else if (ni.getList() != null && ni.getList().size() != 0) {--newline--                            // we'll get the last nested integer and add this one to it--newline--                            ni.add(new NestedInteger(num));--newline--                        } else {--newline--                            // case 3: if this is an empty nested integer--newline--                            if(i > 0) ni.add(new NestedInteger(num));--newline--                            else ni.setInteger(num);--newline--                        }--newline--                        workStack.push(ni);--newline--                        if (i == s.length())--newline--                            return ni;// this is for test cases like this: \"324\", there's no '[' or ']'--newline--                    }--newline--                }--newline--            }--newline--            return result;--newline--        }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Straightforward Java solution with explanation and a simple implementation of NestedInteger for your ease of testing"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    NestedInteger deserialize(string s) {--newline--        function<bool(char)> isnumber = [](char c){ return (c == '-') || isdigit(c); };--newline--        --newline--        stack<NestedInteger> stk;--newline--        stk.push(NestedInteger());--newline--        --newline--        for (auto it = s.begin(); it != s.end();) {--newline--            const char & c = (*it);--newline--            if (isnumber(c)) {--newline--                auto it2 = find_if_not(it, s.end(), isnumber);--newline--                int val = stoi(string(it, it2));--newline--                stk.top().add(NestedInteger(val));--newline--                it = it2;--newline--            }--newline--            else {--newline--                if (c == '[') {--newline--                    stk.push(NestedInteger());--newline--                }--newline--                else if (c == ']') {--newline--                    NestedInteger ni = stk.top();--newline--                    stk.pop();--newline--                    stk.top().add(ni);--newline--                }--newline--                ++it;--newline--            }--newline--        }--newline--        --newline--        NestedInteger result = stk.top().getList().front();--newline--        return result;--newline--    }--newline--};",
            "python": null,
            "topic_title": "C++ Non-Recursive One-Pass Solution (using Stack) || A Possible Implementation of NestedInteger"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    NestedInteger deserialize(string s) {--newline--        int index = 0;--newline--        char c = s[index];--newline--        if (c == '[') {--newline--            return parseList(s, index);--newline--        } else {--newline--            // starts with 0-9, '-'--newline--            return parseNumber(s, index);--newline--        }--newline--    }--newline--    --newline--    NestedInteger parseList(string &s, int &index) {--newline--        index++; // eat '['--newline--        NestedInteger root;--newline--        while (index < s.size()) {--newline--            char c = s[index];--newline--            if (c == '[') {--newline--                root.add(parseList(s, index));--newline--            } else if (isNumber(c) || c == '-') {--newline--                root.add(parseNumber(s, index));--newline--            } else if (c == ',') {--newline--                // skip--newline--                index++;--newline--            } else if (c == ']') {--newline--                break;--newline--            }--newline--        }--newline--        index++; // eat ']'--newline--        return root;--newline--    }--newline--    --newline--    NestedInteger parseNumber(string &s, int &index) {--newline--        int n = 0;--newline--        int positive = 1;  // flag for positive number--newline--        if (s[index] == '-') {--newline--            positive = -1;--newline--            index++;--newline--        }--newline--        while (index < s.size()) {--newline--            char c = s[index];--newline--            if (isNumber(c)) {--newline--                n = 10 * n + c - '0';--newline--                index++;--newline--            } else {--newline--                break;--newline--            }--newline--        }--newline--        return NestedInteger(n * positive);--newline--    }--newline--    --newline--    bool isNumber(char c) {--newline--        return '0' <= c && c <= '9';--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "A top down parser using c++"
        }
    ],
    "qc": "385.json"
}