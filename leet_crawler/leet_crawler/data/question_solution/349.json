{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int[] intersection(int[] nums1, int[] nums2) {--newline--        Set<Integer> set = new HashSet<>();--newline--        Arrays.sort(nums2);--newline--        for (Integer num : nums1) {--newline--            if (binarySearch(nums2, num)) {--newline--                set.add(num);--newline--            }--newline--        }--newline--        int i = 0;--newline--        int[] result = new int[set.size()];--newline--        for (Integer num : set) {--newline--            result[i++] = num;--newline--        }--newline--        return result;--newline--    }--newline--    --newline--    public boolean binarySearch(int[] nums, int target) {--newline--        int low = 0;--newline--        int high = nums.length - 1;--newline--        while (low <= high) {--newline--            int mid = low + (high - low) / 2;--newline--            if (nums[mid] == target) {--newline--                return true;--newline--            }--newline--            if (nums[mid] > target) {--newline--                high = mid - 1;--newline--            } else {--newline--                low = mid + 1;--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Three Java Solutions"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {--newline--        unordered_set<int> m(nums1.begin(), nums1.end());--newline--        vector<int> res;--newline--        for (auto a : nums2)--newline--            if (m.count(a)) {--newline--                res.push_back(a);--newline--                m.erase(a);--newline--            }--newline--        return res;--newline--    }--newline--};",
            "python": null,
            "topic_title": "8ms concise C++ using unordered_set"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution(object):--newline----tab--def intersection(self, nums1, nums2):--newline----tab--    \"\"\"--newline----tab--    :type nums1: List[int]--newline----tab--    :type nums2: List[int]--newline----tab--    :rtype: List[int]--newline----tab--    \"\"\"--newline----tab--    nums1=set(nums1)--newline----tab--    nums2=set(nums2)--newline----tab--    return list(nums1&nums2)",
            "topic_title": "Python code, 3 lines using set"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "5ms Java Using 1 hashset and time complexity of O(m+n)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {--newline--        set<int> s(nums1.begin(), nums1.end());--newline--        vector<int> out;--newline--        for (int x : nums2)--newline--            if (s.erase(x))--newline--                out.push_back(x);--newline--        return out;--newline--    }--newline--}",
            "python": null,
            "topic_title": "Small C++ solution"
        }
    ],
    "qc": "349.json"
}