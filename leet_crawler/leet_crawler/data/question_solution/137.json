{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int singleNumber(int[] A) {--newline--        int ones = 0, twos = 0;--newline--        for(int i = 0; i < A.length; i++){--newline--            ones = (ones ^ A[i]) & ~twos;--newline--            twos = (twos ^ A[i]) & ~ones;--newline--        }--newline--        return ones;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Challenge me , thx"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Detailed explanation and generalization of the bitwise operation method for single numbers"
        },
        {
            "java": "public class Solution {--newline--    --newline--    public int singleNumber(int[] nums) {--newline--        //we need to implement a tree-time counter(base 3) that if a bit appears three time ,it will be zero.--newline--        //#curent  income  ouput--newline--        //# ab      c/c       ab/ab--newline--        //# 00      1/0       01/00--newline--        //# 01      1/0       10/01--newline--        //# 10      1/0       00/10--newline--        // a=~abc+a~b~c;--newline--        // b=~a~bc+~ab~c;--newline--        int a=0;--newline--        int b=0;--newline--        for(int c:nums){--newline--            int ta=(~a&b&c)|(a&~b&~c);--newline--            b=(~a&~b&c)|(~a&b&~c);--newline--            a=ta;--newline--        }--newline--        //we need find the number that is 01,10 => 1, 00 => 0.--newline--        return a|b;--newline--        --newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "An General Way to Handle All this sort of questions."
        },
        {
            "java": "public class Solution {--newline--    public int singleNumber(int[] nums) {--newline--        int ans = 0;--newline--        for(int i = 0; i < 32; i++) {--newline--            int sum = 0;--newline--            for(int j = 0; j < nums.length; j++) {--newline--                if(((nums[j] >> i) & 1) == 1) {--newline--                    sum++;--newline--                    sum %= 3;--newline--                }--newline--            }--newline--            if(sum != 0) {--newline--                ans |= sum << i;--newline--            }--newline--        }--newline--        return ans;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java O(n) easy to understand solution, easily extended to any times of occurance"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": " class Solution {--newline--    public:--newline--    // Let us take the example of {3, 3, 2, 3} to understand this--newline--        int singleNumber(int A[], int n) {--newline--            int ones=0, twos =0;--newline--            int common_bit_mask;--newline--            for(int i=0; i<n;i++)--newline--            {--newline--                 /* The expression \"one & arr[i]\" gives the bits that are--newline--               there in both 'ones' and new element from arr[].  We--newline--               add these bits to 'twos' using bitwise OR--newline--     --newline--               Value of 'twos' will be set as 0, 3, 3 and 1 after 1st,--newline--               2nd, 3rd and 4th iterations respectively */--newline--               --newline--                twos= twos|(ones&A[i]);--newline--                /* XOR the new bits with previous 'ones' to get all bits--newline--               appearing odd number of times--newline--     --newline--               Value of 'ones' will be set as 3, 0, 2 and 3 after 1st,--newline--               2nd, 3rd and 4th iterations respectively */--newline--                ones=ones^A[i];--newline--                 /* The common bits are those bits which appear third time--newline--               So these bits should not be there in both 'ones' and 'twos'.--newline--               common_bit_mask contains all these bits as 0, so that the bits can --newline--               be removed from 'ones' and 'twos'   --newline--     --newline--               Value of 'common_bit_mask' will be set as 00, 00, 01 and 10--newline--               after 1st, 2nd, 3rd and 4th iterations respectively */--newline--                common_bit_mask= ~(ones&twos);--newline--                /* Remove common bits (the bits that appear third time) from 'ones'--newline--                 --newline--               Value of 'ones' will be set as 3, 0, 0 and 2 after 1st,--newline--               2nd, 3rd and 4th iterations respectively */--newline--                ones &=common_bit_mask;--newline--                /* Remove common bits (the bits that appear third time) from 'twos'--newline--     --newline--               Value of 'twos' will be set as 0, 3, 1 and 0 after 1st,--newline--               2nd, 3rd and 4th itearations respectively */--newline--                twos &=common_bit_mask;--newline--            }--newline--            return ones;--newline--        }--newline--    };",
            "python": null,
            "topic_title": "Accepted code with proper Explaination. Does anyone have a better idea?"
        }
    ],
    "qc": "137.json"
}