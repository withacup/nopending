{
    "posts": [
        {
            "java": "public class Solution {--newline--    public List<List<Integer>> fourSum(int[] nums, int target) {--newline--    --tab----tab--ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();--newline--    --tab----tab--int len = nums.length;--newline--    --tab----tab--if (nums == null || len < 4)--newline--    --tab----tab----tab--return res;--newline--    --newline--    --tab----tab--Arrays.sort(nums);--newline--    --newline--    --tab----tab--int max = nums[len - 1];--newline--    --tab----tab--if (4 * nums[0] > target || 4 * max < target)--newline--    --tab----tab----tab--return res;--newline--    --newline--    --tab----tab--int i, z;--newline--    --tab----tab--for (i = 0; i < len; i++) {--newline--    --tab----tab----tab--z = nums[i];--newline--    --tab----tab----tab--if (i > 0 && z == nums[i - 1])// avoid duplicate--newline--    --tab----tab----tab----tab--continue;--newline--    --tab----tab----tab--if (z + 3 * max < target) // z is too small--newline--    --tab----tab----tab----tab--continue;--newline--    --tab----tab----tab--if (4 * z > target) // z is too large--newline--    --tab----tab----tab----tab--break;--newline--    --tab----tab----tab--if (4 * z == target) { // z is the boundary--newline--    --tab----tab----tab----tab--if (i + 3 < len && nums[i + 3] == z)--newline--    --tab----tab----tab----tab----tab--res.add(Arrays.asList(z, z, z, z));--newline--    --tab----tab----tab----tab--break;--newline--    --tab----tab----tab--}--newline--    --newline--    --tab----tab----tab--threeSumForFourSum(nums, target - z, i + 1, len - 1, res, z);--newline--    --tab----tab--}--newline--    --newline--    --tab----tab--return res;--newline--    --tab--}--newline--    --newline--    --tab--/*--newline--    --tab-- * Find all possible distinguished three numbers adding up to the target--newline--    --tab-- * in sorted array nums[] between indices low and high. If there are,--newline--    --tab-- * add all of them into the ArrayList fourSumList, using--newline--    --tab-- * fourSumList.add(Arrays.asList(z1, the three numbers))--newline--    --tab-- */--newline--    --tab--public void threeSumForFourSum(int[] nums, int target, int low, int high, ArrayList<List<Integer>> fourSumList,--newline--    --tab----tab----tab--int z1) {--newline--    --tab----tab--if (low + 1 >= high)--newline--    --tab----tab----tab--return;--newline--    --newline--    --tab----tab--int max = nums[high];--newline--    --tab----tab--if (3 * nums[low] > target || 3 * max < target)--newline--    --tab----tab----tab--return;--newline--    --newline--    --tab----tab--int i, z;--newline--    --tab----tab--for (i = low; i < high - 1; i++) {--newline--    --tab----tab----tab--z = nums[i];--newline--    --tab----tab----tab--if (i > low && z == nums[i - 1]) // avoid duplicate--newline--    --tab----tab----tab----tab--continue;--newline--    --tab----tab----tab--if (z + 2 * max < target) // z is too small--newline--    --tab----tab----tab----tab--continue;--newline--    --newline--    --tab----tab----tab--if (3 * z > target) // z is too large--newline--    --tab----tab----tab----tab--break;--newline--    --newline--    --tab----tab----tab--if (3 * z == target) { // z is the boundary--newline--    --tab----tab----tab----tab--if (i + 1 < high && nums[i + 2] == z)--newline--    --tab----tab----tab----tab----tab--fourSumList.add(Arrays.asList(z1, z, z, z));--newline--    --tab----tab----tab----tab--break;--newline--    --tab----tab----tab--}--newline--    --newline--    --tab----tab----tab--twoSumForFourSum(nums, target - z, i + 1, high, fourSumList, z1, z);--newline--    --tab----tab--}--newline--    --newline--    --tab--}--newline--    --newline--    --tab--/*--newline--    --tab-- * Find all possible distinguished two numbers adding up to the target--newline--    --tab-- * in sorted array nums[] between indices low and high. If there are,--newline--    --tab-- * add all of them into the ArrayList fourSumList, using--newline--    --tab-- * fourSumList.add(Arrays.asList(z1, z2, the two numbers))--newline--    --tab-- */--newline--    --tab--public void twoSumForFourSum(int[] nums, int target, int low, int high, ArrayList<List<Integer>> fourSumList,--newline--    --tab----tab----tab--int z1, int z2) {--newline--    --newline--    --tab----tab--if (low >= high)--newline--    --tab----tab----tab--return;--newline--    --newline--    --tab----tab--if (2 * nums[low] > target || 2 * nums[high] < target)--newline--    --tab----tab----tab--return;--newline--    --newline--    --tab----tab--int i = low, j = high, sum, x;--newline--    --tab----tab--while (i < j) {--newline--    --tab----tab----tab--sum = nums[i] + nums[j];--newline--    --tab----tab----tab--if (sum == target) {--newline--    --tab----tab----tab----tab--fourSumList.add(Arrays.asList(z1, z2, nums[i], nums[j]));--newline--    --newline--    --tab----tab----tab----tab--x = nums[i];--newline--    --tab----tab----tab----tab--while (++i < j && x == nums[i]) // avoid duplicate--newline--    --tab----tab----tab----tab----tab--;--newline--    --tab----tab----tab----tab--x = nums[j];--newline--    --tab----tab----tab----tab--while (i < --j && x == nums[j]) // avoid duplicate--newline--    --tab----tab----tab----tab----tab--;--newline--    --tab----tab----tab--}--newline--    --tab----tab----tab--if (sum < target)--newline--    --tab----tab----tab----tab--i++;--newline--    --tab----tab----tab--if (sum > target)--newline--    --tab----tab----tab----tab--j--;--newline--    --tab----tab--}--newline--    --tab----tab--return;--newline--    --tab--}--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "7ms java code win over 100%"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<vector<int>> fourSum(vector<int>& nums, int target) {--newline--        vector<vector<int>> total;--newline--        int n = nums.size();--newline--        if(n<4)  return total;--newline--        sort(nums.begin(),nums.end());--newline--        for(int i=0;i<n-3;i++)--newline--        {--newline--            if(i>0&&nums[i]==nums[i-1]) continue;--newline--            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target) break;--newline--            if(nums[i]+nums[n-3]+nums[n-2]+nums[n-1]<target) continue;--newline--            for(int j=i+1;j<n-2;j++)--newline--            {--newline--                if(j>i+1&&nums[j]==nums[j-1]) continue;--newline--                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;--newline--                if(nums[i]+nums[j]+nums[n-2]+nums[n-1]<target) continue;--newline--                int left=j+1,right=n-1;--newline--                while(left<right){--newline--                    int sum=nums[left]+nums[right]+nums[i]+nums[j];--newline--                    if(sum<target) left++;--newline--                    else if(sum>target) right--;--newline--                    else{--newline--                        total.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]});--newline--                        do{left++;}while(nums[left]==nums[left-1]&&left<right);--newline--                        do{right--;}while(nums[right]==nums[right+1]&&left<right);--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        return total;--newline--    }--newline--};",
            "python": null,
            "topic_title": "My 16ms c++ code"
        },
        {
            "java": "public class Solution {--newline--public List<List<Integer>> fourSum(int[] num, int target) {--newline--    ArrayList<List<Integer>> ans = new ArrayList<>();--newline--    if(num.length<4)return ans;--newline--    Arrays.sort(num);--newline--    for(int i=0; i<num.length-3; i++){--newline--        if(num[i]+num[i+1]+num[i+2]+num[i+3]>target)break; //first candidate too large, search finished--newline--        if(num[i]+num[num.length-1]+num[num.length-2]+num[num.length-3]<target)continue; //first candidate too small--newline--        if(i>0&&num[i]==num[i-1])continue; //prevents duplicate result in ans list--newline--        for(int j=i+1; j<num.length-2; j++){--newline--            if(num[i]+num[j]+num[j+1]+num[j+2]>target)break; //second candidate too large--newline--            if(num[i]+num[j]+num[num.length-1]+num[num.length-2]<target)continue; //second candidate too small--newline--            if(j>i+1&&num[j]==num[j-1])continue; //prevents duplicate results in ans list--newline--            int low=j+1, high=num.length-1;--newline--            while(low<high){--newline--                int sum=num[i]+num[j]+num[low]+num[high];--newline--                if(sum==target){--newline--                    ans.add(Arrays.asList(num[i], num[j], num[low], num[high]));--newline--                    while(low<high&&num[low]==num[low+1])low++; //skipping over duplicate on low--newline--                    while(low<high&&num[high]==num[high-1])high--; //skipping over duplicate on high--newline--                    low++; --newline--                    high--;--newline--                }--newline--                //move window--newline--                else if(sum<target)low++; --newline--                else high--;--newline--            }--newline--        }--newline--    }--newline--    return ans;--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Clean accepted java O(n^3) solution based on 3sum"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<vector<int> > fourSum(vector<int> &num, int target) {--newline--    --newline--        vector<vector<int> > res;--newline--    --newline--        if (num.empty())--newline--            return res;--newline--    --newline--        std::sort(num.begin(),num.end());--newline--    --newline--        for (int i = 0; i < num.size(); i++) {--newline--        --newline--            int target_3 = target - num[i];--newline--        --newline--            for (int j = i + 1; j < num.size(); j++) {--newline--            --newline--                int target_2 = target_3 - num[j];--newline--            --newline--                int front = j + 1;--newline--                int back = num.size() - 1;--newline--            --newline--                while(front < back) {--newline--                --newline--                    int two_sum = num[front] + num[back];--newline--                --newline--                    if (two_sum < target_2) front++;--newline--                --newline--                    else if (two_sum > target_2) back--;--newline--                --newline--                    else {--newline--                    --newline--                        vector<int> quadruplet(4, 0);--newline--                        quadruplet[0] = num[i];--newline--                        quadruplet[1] = num[j];--newline--                        quadruplet[2] = num[front];--newline--                        quadruplet[3] = num[back];--newline--                        res.push_back(quadruplet);--newline--                    --newline--                        // Processing the duplicates of number 3--newline--                        while (front < back && num[front] == quadruplet[2]) ++front;--newline--                    --newline--                        // Processing the duplicates of number 4--newline--                        while (front < back && num[back] == quadruplet[3]) --back;--newline--                --newline--                    }--newline--                }--newline--                --newline--                // Processing the duplicates of number 2--newline--                while(j + 1 < num.size() && num[j + 1] == num[j]) ++j;--newline--            }--newline--        --newline--            // Processing the duplicates of number 1--newline--            while (i + 1 < num.size() && num[i + 1] == num[i]) ++i;--newline--        --newline--        }--newline--    --newline--        return res;--newline--    --newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "4Sum C++ solution with explanation and comparison with 3Sum problem. Easy to understand."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def fourSum(self, nums, target):--newline----tab--        def findNsum(nums, target, N, result, results):--newline----tab--            if len(nums) < N or N < 2 or target < nums[0]*N or target > nums[-1]*N:  # early termination--newline----tab--                return--newline----tab--            if N == 2: # two pointers solve sorted 2-sum problem--newline----tab--                l,r = 0,len(nums)-1--newline----tab--                while l < r:--newline----tab--                    s = nums[l] + nums[r]--newline----tab--                    if s == target:--newline----tab--                        results.append(result + [nums[l], nums[r]])--newline----tab--                        l += 1--newline----tab--                        while l < r and nums[l] == nums[l-1]:--newline----tab--                            l += 1--newline----tab--                    elif s < target:--newline----tab--                        l += 1--newline----tab--                    else:--newline----tab--                        r -= 1--newline----tab--            else: # recursively reduce N--newline----tab--                for i in range(len(nums)-N+1):--newline----tab--                    if i == 0 or (i > 0 and nums[i-1] != nums[i]):--newline----tab--                        findNsum(nums[i+1:], target-nums[i], N-1, result+[nums[i]], results)--newline----tab--    --newline----tab--        results = []--newline----tab--        findNsum(sorted(nums), target, 4, [], results)--newline----tab--        return results",
            "topic_title": "Python 140ms beats 100%, and works for N-sum (N&gt;=2)"
        }
    ],
    "qc": "18.json"
}