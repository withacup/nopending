{
    "posts": [
        {
            "java": "public class Solution {--newline--    public List<Integer> diffWaysToCompute(String input) {--newline--        List<Integer> ret = new LinkedList<Integer>();--newline--        for (int i=0; i<input.length(); i++) {--newline--            if (input.charAt(i) == '-' ||--newline--                input.charAt(i) == '*' ||--newline--                input.charAt(i) == '+' ) {--newline--                String part1 = input.substring(0, i);--newline--                String part2 = input.substring(i+1);--newline--                List<Integer> part1Ret = diffWaysToCompute(part1);--newline--                List<Integer> part2Ret = diffWaysToCompute(part2);--newline--                for (Integer p1 :   part1Ret) {--newline--                    for (Integer p2 :   part2Ret) {--newline--                        int c = 0;--newline--                        switch (input.charAt(i)) {--newline--                            case '+': c = p1+p2;--newline--                                break;--newline--                            case '-': c = p1-p2;--newline--                                break;--newline--                            case '*': c = p1*p2;--newline--                                break;--newline--                        }--newline--                        ret.add(c);--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        if (ret.size() == 0) {--newline--            ret.add(Integer.valueOf(input));--newline--        }--newline--        return ret;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "A recursive Java solution (284 ms)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline----tab--vector<int> diffWaysToCompute(string input) {--newline----tab----tab--unordered_map<string, vector<int>> dpMap;--newline----tab----tab--return computeWithDP(input, dpMap);--newline----tab--}--newline----newline----tab--vector<int> computeWithDP(string input, unordered_map<string, vector<int>> &dpMap) {--newline----tab----tab--vector<int> result;--newline----tab----tab--int size = input.size();--newline----tab----tab--for (int i = 0; i < size; i++) {--newline----tab----tab----tab--char cur = input[i];--newline----tab----tab----tab--if (cur == '+' || cur == '-' || cur == '*') {--newline----tab----tab----tab----tab--// Split input string into two parts and solve them recursively--newline----tab----tab----tab----tab--vector<int> result1, result2;--newline----tab----tab----tab----tab--string substr = input.substr(0, i);--newline----tab----tab----tab----tab--// check if dpMap has the result for substr--newline----tab----tab----tab----tab--if (dpMap.find(substr) != dpMap.end())--newline----tab----tab----tab----tab----tab--result1 = dpMap[substr];--newline----tab----tab----tab----tab--else--newline----tab----tab----tab----tab----tab--result1 = computeWithDP(substr, dpMap);--newline----newline----tab----tab----tab----tab--substr = input.substr(i + 1);--newline----tab----tab----tab----tab--if (dpMap.find(substr) != dpMap.end())--newline----tab----tab----tab----tab----tab--result2 = dpMap[substr];--newline----tab----tab----tab----tab--else--newline----tab----tab----tab----tab----tab--result2 = computeWithDP(substr, dpMap);--newline----tab----tab----tab----tab----newline----tab----tab----tab----tab--for (auto n1 : result1) {--newline----tab----tab----tab----tab----tab--for (auto n2 : result2) {--newline----tab----tab----tab----tab----tab----tab--if (cur == '+')--newline----tab----tab----tab----tab----tab----tab----tab--result.push_back(n1 + n2);--newline----tab----tab----tab----tab----tab----tab--else if (cur == '-')--newline----tab----tab----tab----tab----tab----tab----tab--result.push_back(n1 - n2);--newline----tab----tab----tab----tab----tab----tab--else--newline----tab----tab----tab----tab----tab----tab----tab--result.push_back(n1 * n2);--newline----tab----tab----tab----tab----tab--}--newline----tab----tab----tab----tab--}--newline----tab----tab----tab--}--newline----tab----tab--}--newline----tab----tab--// if the input string contains only number--newline----tab----tab--if (result.empty())--newline----tab----tab----tab--result.push_back(atoi(input.c_str()));--newline----tab----tab--// save to dpMap--newline----tab----tab--dpMap[input] = result;--newline----tab----tab--return result;--newline----tab--}--newline--};",
            "python": null,
            "topic_title": "C++ 4ms Recursive &amp; DP solution with brief explanation"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<int> diffWaysToCompute(string input) {--newline--        vector<int> output;--newline--        for (int i=0; i<input.size(); i++) {--newline--            char c = input[i];--newline--            if (ispunct(c))--newline--                for (int a : diffWaysToCompute(input.substr(0, i)))--newline--                    for (int b : diffWaysToCompute(input.substr(i+1)))--newline--                        output.push_back(c=='+' ? a+b : c=='-' ? a-b : a*b);--newline--        }--newline--        return output.size() ? output : vector<int>{stoi(input)};--newline--    }--newline--}",
            "python": "class Solution :--newline----tab--    def diffWaysToCompute(self, input):--newline----tab--        return [a+b if c == '+' else a-b if c == '-' else a*b--newline----tab--                for i, c in enumerate(input) if c in '+-*'--newline----tab--                for a in self.diffWaysToCompute(input[:i])--newline----tab--                for b in self.diffWaysToCompute(input[i+1:])] or [int(input)]--newline----tab--    ",
            "topic_title": "1-11 lines Python, 9 lines C++"
        },
        {
            "java": "public class Solution {--newline--    public List<Integer> diffWaysToCompute(String input) {--newline--        List<Integer> res = new ArrayList<Integer>();--newline--        for (int i = 0; i < input.length(); i++) {--newline--            char c = input.charAt(i);--newline--            if (c == '-' || c == '+' || c == '*') {--newline--                String a = input.substring(0, i);--newline--                String b = input.substring(i + 1);--newline--                List<Integer> al = diffWaysToCompute(a);--newline--                List<Integer> bl = diffWaysToCompute(b);--newline--                for (int x : al) {--newline--                    for (int y : bl) {--newline--                        if (c == '-') {--newline--                            res.add(x - y);--newline--                        } else if (c == '+') {--newline--                            res.add(x + y);--newline--                        } else if (c == '*') {--newline--                            res.add(x * y);--newline--                        }--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        if (res.size() == 0) res.add(Integer.valueOf(input));--newline--        return res;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Share a clean and short JAVA solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def diffWaysToCompute(self, input):--newline----tab--        if input.isdigit():--newline----tab--            return [int(input)]--newline----tab--        res = []--newline----tab--        for i in xrange(len(input)):--newline----tab--            if input[i] in \"-+*\":--newline----tab--                res1 = self.diffWaysToCompute(input[:i])--newline----tab--                res2 = self.diffWaysToCompute(input[i+1:])--newline----tab--                for j in res1:--newline----tab--                    for k in res2:--newline----tab--                        res.append(self.helper(j, k, input[i]))--newline----tab--        return res--newline----tab--        --newline----tab--    def helper(self, m, n, op):--newline----tab--        if op == \"+\":--newline----tab--            return m+n--newline----tab--        elif op == \"-\":--newline----tab--            return m-n--newline----tab--        else:--newline----tab--            return m*n",
            "topic_title": "Python easy to understand solution (divide and conquer)."
        }
    ],
    "qc": "241.json"
}