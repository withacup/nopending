{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution--newline--{--newline--public:--newline--    bool isValidSudoku(vector<vector<char> > &board)--newline--    {--newline--        int used1[9][9] = {0}, used2[9][9] = {0}, used3[9][9] = {0};--newline--        --newline--        for(int i = 0; i < board.size(); ++ i)--newline--            for(int j = 0; j < board[i].size(); ++ j)--newline--                if(board[i][j] != '.')--newline--                {--newline--                    int num = board[i][j] - '0' - 1, k = i / 3 * 3 + j / 3;--newline--                    if(used1[i][num] || used2[j][num] || used3[k][num])--newline--                        return false;--newline--                    used1[i][num] = used2[j][num] = used3[k][num] = 1;--newline--                }--newline--        --newline--        return true;--newline--    }--newline--};",
            "python": null,
            "topic_title": "My short solution by C++. O(n2)"
        },
        {
            "java": "public class Solution {--newline--    public boolean isValidSudoku(char[][] board) {--newline--        for(int i = 0; i<9; i++){--newline--            HashSet<Character> rows = new HashSet<Character>();--newline--            HashSet<Character> columns = new HashSet<Character>();--newline--            HashSet<Character> cube = new HashSet<Character>();--newline--            for (int j = 0; j < 9;j++){--newline--                if(board[i][j]!='.' && !rows.add(board[i][j]))--newline--                    return false;--newline--                if(board[j][i]!='.' && !columns.add(board[j][i]))--newline--                    return false;--newline--                int RowIndex = 3*(i/3);--newline--                int ColIndex = 3*(i%3);--newline--                if(board[RowIndex + j/3][ColIndex + j%3]!='.' && !cube.add(board[RowIndex + j/3][ColIndex + j%3]))--newline--                    return false;--newline--            }--newline--        }--newline--        return true;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Shared my concise Java code"
        },
        {
            "java": "public class Solution {--newline--    public boolean isValidSudoku(char[][] board) {--newline--        Set seen = new HashSet();--newline--        for (int i=0; i<9; ++i) {--newline--            for (int j=0; j<9; ++j) {--newline--                char number = board[i][j];--newline--                if (number != '.')--newline--                    if (!seen.add(number + \" in row \" + i) ||--newline--                        !seen.add(number + \" in column \" + j) ||--newline--                        !seen.add(number + \" in block \" + i/3 + \"-\" + j/3))--newline--                        return false;--newline--            }--newline--        }--newline--        return true;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Short+Simple Java using Strings"
        },
        {
            "java": "public class Solution {--newline--public boolean isValidSudoku(char[][] board) {--newline--    for (int i=0; i<9; i++) {--newline--        if (!isParticallyValid(board,i,0,i,8)) return false;--newline--        if (!isParticallyValid(board,0,i,8,i)) return false;--newline--    }--newline--    for (int i=0;i<3;i++){--newline--        for(int j=0;j<3;j++){--newline--            if (!isParticallyValid(board,i*3,j*3,i*3+2,j*3+2)) return false;--newline--        }--newline--    }--newline--    return true;--newline--}--newline--private boolean isParticallyValid(char[][] board, int x1, int y1,int x2,int y2){--newline--    Set singleSet = new HashSet();--newline--    for (int i= x1; i<=x2; i++){--newline--        for (int j=y1;j<=y2; j++){--newline--            if (board[i][j]!='.') if(!singleSet.add(board[i][j])) return false;--newline--        }--newline--    }--newline--    return true;--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Sharing my easy-understand java solution using set"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--       bool isValidSudoku(vector<vector<char>>& board) {--newline--        vector<short> col(9, 0);--newline--        vector<short> block(9, 0);--newline--        vector<short> row(9, 0);--newline--        for (int i = 0; i < 9; i++)--newline--         for (int j = 0; j < 9; j++) {--newline--             if (board[i][j] != '.') {--newline--                 int idx = 1 << (board[i][j] - '0');--newline--                 if (row[i] & idx || col[j] & idx || block[i/3 * 3 + j / 3] & idx)--newline--                    return false;--newline--                row[i] |= idx;--newline--                col[j] |= idx;--newline--                block[i/3 * 3 + j/3] |= idx;--newline--             }--newline--         }--newline--         return true;--newline--      }--newline--}",
            "python": null,
            "topic_title": "C++ very simple and easy understand. using bit operation"
        }
    ],
    "qc": "36.json"
}