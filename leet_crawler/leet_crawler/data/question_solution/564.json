{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def nearestPalindromic(self, S):--newline----tab--        K = len(S)--newline----tab--        candidates = [str(10**k + d) for k in (K-1, K) for d in (-1, 1)]--newline----tab--        prefix = S[:(K+1)/2]--newline----tab--        P = int(prefix)--newline----tab--        for start in map(str, (P-1, P, P+1)):--newline----tab--            candidates.append(start + (start[:-1] if K%2 else start)[::-1])--newline----tab--        --newline----tab--        def delta(x):--newline----tab--            return abs(int(S) - int(x))--newline----tab--        --newline----tab--        ans = None--newline----tab--        for cand in candidates:--newline----tab--            if cand != S and not cand.startswith('00'):--newline----tab--                if (ans is None or delta(cand) < delta(ans) or--newline----tab--                        delta(cand) == delta(ans) and int(cand) < int(ans)):--newline----tab--                    ans = cand--newline----tab--        return ans--newline----tab--    ",
            "topic_title": "Python, Simple with Explanation"
        },
        {
            "java": "public class Solution {--newline--    public String nearestPalindromic(String n) {--newline--        Long number = Long.parseLong(n);--newline--        Long big = findHigherPalindrome(number + 1);--newline--        Long small = findLowerPalindrome(number - 1);--newline--        return Math.abs(number - small) > Math.abs(big - number) ? String.valueOf(big) : String.valueOf(small);--newline--    }--newline--    public Long findHigherPalindrome(Long limit) {--newline--        String n = Long.toString(limit);--newline--        char[] s = n.toCharArray(); // limit--newline--        int m = s.length;--newline--        char[] t = Arrays.copyOf(s, m); // target--newline--        for (int i = 0; i < m / 2; i++) {--newline--            t[m - 1 - i] = t[i];--newline--        }--newline--        for (int i = 0; i < m; i++) {--newline--            if (s[i] < t[i]) {--newline--                return Long.parseLong(String.valueOf(t)); --newline--            } else if (s[i] > t[i]) { --newline--                for (int j = (m - 1) / 2; j >= 0; j--) {--newline--                    if (++t[j] > '9') {--newline--                        t[j] = '0';--newline--                    } else {--newline--                        break;--newline--                    }--newline--                }--newline--                // make it palindrome again--newline--                for (int k = 0; k < m / 2; k++) {--newline--                    t[m - 1 - k] = t[k];--newline--                }--newline--                return Long.parseLong(String.valueOf(t)); --newline--            }--newline--        }--newline--        return Long.parseLong(String.valueOf(t));    --newline--    }--newline--    public Long findLowerPalindrome(Long limit) {--newline--        String n = Long.toString(limit);--newline--        char[] s = n.toCharArray();--newline--        int m = s.length;--newline--        char[] t = Arrays.copyOf(s, m);--newline--        for (int i = 0; i < m / 2; i++) {--newline--            t[m - 1 - i] = t[i];--newline--        }--newline--        for (int i = 0; i < m; i++) {--newline--            if (s[i] > t[i]) {--newline--                return Long.parseLong(String.valueOf(t)); --newline--            } else if (s[i] < t[i]) {--newline--                for (int j = (m - 1) / 2; j >= 0; j--) {--newline--                    if (--t[j] < '0') {--newline--                        t[j] = '9';--newline--                    } else {--newline--                        break;--newline--                    }--newline--                }--newline--                if (t[0] == '0') {--newline--                    char[] a = new char[m - 1];--newline--                    Arrays.fill(a, '9');--newline--                    return Long.parseLong(String.valueOf(a)); --newline--                }--newline--                // make it palindrome again--newline--                for (int k = 0; k < m / 2; k++) {--newline--                    t[m - 1 - k] = t[k];--newline--                }--newline--                return Long.parseLong(String.valueOf(t)); --newline--            }--newline--        }--newline--         return Long.parseLong(String.valueOf(t));  --newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java solution with full explaination"
        },
        {
            "java": "public class Solution {--newline--    public String nearestPalindromic(String n) {--newline--        if (n.length() >= 2 && allNine(n)) {--newline--            String s = \"1\";--newline--            for (int i = 0; i < n.length() - 1; i++) {--newline--                s += \"0\";--newline--            }--newline--            s += \"1\";--newline--            return s;--newline--        }--newline--        boolean isOdd = (n.length() % 2 != 0);--newline--        String left = n.substring(0, (n.length() + 1) / 2);--newline--        long[] increment = {-1, 0, +1};--newline--        String ret = n;--newline--        long minDiff = Long.MAX_VALUE;--newline--        for (long i : increment) {--newline--            String s = getPalindrom(Long.toString(Long.parseLong(left) + i), isOdd);--newline--            if (n.length() >= 2 && (s.length() != n.length() || Long.parseLong(s) == 0)) {--newline--                s = \"\";--newline--                for (int j = 0; j < n.length() - 1; j++) {--newline--                    s += \"9\";--newline--                }--newline--            }--newline--            long diff = s.equals(n) ? Long.MAX_VALUE : Math.abs(Long.parseLong(s) - Long.parseLong(n));--newline--            if (diff < minDiff) {--newline--                minDiff = diff;--newline--                ret = s;--newline--            }--newline--        }--newline--        return ret;--newline--    }--newline--    private String getPalindrom(String s, boolean isOdd) {--newline--        String right = new StringBuilder(s).reverse().toString();--newline--        return isOdd ? s.substring(0, s.length() - 1) + right : s + right;--newline--    }--newline--    private boolean allNine(String s) {--newline--        for (int i = 0; i < s.length(); i++) {--newline--            if (s.charAt(i) != '9') {--newline--                return false;--newline--            }--newline--        }--newline--        return true;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "java solution"
        },
        {
            "java": "public class Solution {--newline--    public String nearestPalindromic(String n) {--newline--        char[] arr = n.toCharArray();--newline--        for (int i = 0, j = arr.length - 1; i < j; i++, j--) arr[j] = arr[i];--newline--            --newline--        String curP = String.valueOf(arr);--newline--        String preP = nearestPalindrom(curP, false);--newline--        String nextP = nearestPalindrom(curP, true);--newline--            --newline--        long num = Long.valueOf(n);--newline--        long cur = Long.valueOf(curP);--newline--        long pre = Long.valueOf(preP);--newline--        long next = Long.valueOf(nextP);--newline--            --newline--        long d1 = Math.abs(num - pre);--newline--        long d2 = Math.abs(num - cur);--newline--        long d3 = Math.abs(num - next);--newline--            --newline--        if (num == cur) {--newline--            return d1 <= d3 ? preP : nextP;--newline--        } else if (num > cur) {--newline--            return d2 <= d3 ? curP : nextP;--newline--        } else {--newline--            return d1 <= d2 ? preP : curP;--newline--        }--newline--    }--newline--        --newline--    private String nearestPalindrom(String curP, boolean dir) {--newline--        int k = curP.length() >> 1, p = curP.length() - k;--newline--        int l = Integer.valueOf(curP.substring(0, p));--newline--        l += (dir ? 1 : -1);--newline--        --tab----newline--        if (l == 0) return k == 0 ? \"0\" : \"9\";--newline--        --tab----newline--        String left = String.valueOf(l);--newline--        StringBuilder right = new StringBuilder(left).reverse();--newline--        if (k > left.length()) right.append(\"9\");--newline--        --tab----newline--        return left + right.substring(right.length() - k);--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java solution with detailed proof"
        },
        {
            "java": "public class Solution {--newline--    long ans = 0, diff = Long.MAX_VALUE, n = 0;--newline--    --newline--    private void update(String val) {--newline--        try {--newline--            long tmp = Long.parseLong(val);--newline--            if (tmp == n) return;--newline--            if (Math.abs(tmp - n) < diff || (Math.abs(tmp - n) == diff && tmp < ans)) {--newline--                ans = tmp;--newline--                diff = Math.abs(tmp - n);--newline--            }--newline--        } catch (Exception e) { }--newline--    }--newline--    --newline--    private void concat(long leftHalf) {--newline--        String s = \"\" + leftHalf, rs = new StringBuilder(s).reverse().toString();--newline--        update(s + rs); // abc -> abccba--newline--        update(s + rs.substring(1)); // abc -> abcba--newline--    }--newline--    --newline--    public String nearestPalindromic(String n) {--newline--        this.n = Long.parseLong(n);--newline--        diff = Long.MAX_VALUE;--newline--        long leftHalf = Long.parseLong(n.substring(0, (n.length() + 1) / 2));--newline--        concat(leftHalf - 1);--newline--        concat((leftHalf - 1) * 10 + 9); // Handle 1, 1000, 100000, etc.--newline--        concat(leftHalf);--newline--        concat(leftHalf + 1);--newline--        concat((leftHalf + 1) / 10); // Handle 9, 999, 99999, etc.--newline--        return \"\" + ans;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Concise Java Solution"
        }
    ],
    "qc": "564.json"
}