{
    "posts": [
        {
            "java": "public class WordDictionary {--newline--    public class TrieNode {--newline--        public TrieNode[] children = new TrieNode[26];--newline--        public String item = \"\";--newline--    }--newline--    --newline--    private TrieNode root = new TrieNode();--newline----newline--    public void addWord(String word) {--newline--        TrieNode node = root;--newline--        for (char c : word.toCharArray()) {--newline--            if (node.children[c - 'a'] == null) {--newline--                node.children[c - 'a'] = new TrieNode();--newline--            }--newline--            node = node.children[c - 'a'];--newline--        }--newline--        node.item = word;--newline--    }--newline----newline--    public boolean search(String word) {--newline--        return match(word.toCharArray(), 0, root);--newline--    }--newline--    --newline--    private boolean match(char[] chs, int k, TrieNode node) {--newline--        if (k == chs.length) return !node.item.equals(\"\");   --newline--        if (chs[k] != '.') {--newline--            return node.children[chs[k] - 'a'] != null && match(chs, k + 1, node.children[chs[k] - 'a']);--newline--        } else {--newline--            for (int i = 0; i < node.children.length; i++) {--newline--                if (node.children[i] != null) {--newline--                    if (match(chs, k + 1, node.children[i])) {--newline--                        return true;--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My simple and clean Java code"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class TrieNode {--newline--public:--newline--    bool isKey;--newline--    TrieNode* children[26];--newline--    TrieNode(): isKey(false) {--newline--        memset(children, NULL, sizeof(TrieNode*) * 26);--newline--    }--newline--};--newline----newline--class WordDictionary {--newline--public:--newline--    WordDictionary() {--newline--        root = new TrieNode();--newline--    }--newline----newline--    // Adds a word into the data structure.--newline--    void addWord(string word) {--newline--        TrieNode* run = root;--newline--        for (char c : word) {--newline--            if (!(run -> children[c - 'a'])) --newline--                run -> children[c - 'a'] = new TrieNode();--newline--            run = run -> children[c - 'a'];--newline--        }--newline--        run -> isKey = true;--newline--    }--newline----newline--    // Returns if the word is in the data structure. A word could--newline--    // contain the dot character '.' to represent any one letter.--newline--    bool search(string word) {--newline--        return query(word.c_str(), root);--newline--    }--newline----newline--private:--newline--    TrieNode* root;--newline----newline--    bool query(const char* word, TrieNode* node) {--newline--        TrieNode* run = node;--newline--        for (int i = 0; word[i]; i++) {--newline--            if (run && word[i] != '.')--newline--                run = run -> children[word[i] - 'a'];--newline--            else if (run && word[i] == '.') { --newline--                TrieNode* tmp = run;--newline--                for (int j = 0; j < 26; j++) {--newline--                    run = tmp -> children[j];--newline--                    if (query(word + i + 1, run))--newline--                        return true;--newline--                }--newline--            }--newline--            else break;--newline--        }--newline--        return run && run -> isKey; --newline--    }--newline--};--newline----newline--// Your WordDictionary object will be instantiated and called as such:--newline--// WordDictionary wordDictionary;--newline--// wordDictionary.addWord(\"word\");--newline--// wordDictionary.search(\"pattern\");  --newline--",
            "python": null,
            "topic_title": "80ms Clear C++ Code with Detailed Explanations"
        },
        {
            "java": "public class WordDictionary {--newline--    WordNode root = new WordNode();--newline----tab--public void addWord(String word) {--newline----tab----tab--char chars[] = word.toCharArray();--newline--        addWord(chars, 0, root);--newline--    }--newline----tab----newline----tab--private void addWord(char[] chars, int index, WordNode parent) {--newline----tab----tab--char c = chars[index];--newline----tab----tab--int idx = c-'a';--newline--        WordNode node = parent.children[idx];--newline--        if (node == null){--newline--        --tab--node = new WordNode();--newline--        --tab--parent.children[idx]=node;--newline--        }--newline--        if (chars.length == index+1){--newline--        --tab--node.isLeaf=true;--newline--        --tab--return;--newline--        }--newline--        addWord(chars, ++index, node);--newline--    }--newline----newline----newline--    public boolean search(String word) {--newline--    --tab--return search(word.toCharArray(), 0, root);--tab----tab----tab----tab--     --newline--    }--newline--    --newline--    private boolean search(char[] chars, int index, WordNode parent){--newline--    --tab--if (index == chars.length){--newline--    --tab----tab--if (parent.isLeaf){--newline--    --tab----tab----tab--return true;--newline--    --tab----tab--}--newline--    --tab----tab--return false;--newline--    --tab--}--newline--    --tab--WordNode[] childNodes = parent.children;--newline--    --tab--char c = chars[index];--newline--    --tab--if (c == '.'){--newline----tab--    --tab--for (int i=0;i<childNodes.length;i++){--newline----tab--    --tab----tab--WordNode n = childNodes[i];--newline----tab--    --tab----tab--if (n !=null){--newline----tab--    --tab----tab----tab--boolean b = search(chars, index+1, n);--newline----tab--    --tab----tab----tab--if (b){--newline----tab--    --tab----tab----tab----tab--return true;--newline----tab--    --tab----tab----tab--}--newline----tab--    --tab----tab--}--newline----tab--    --tab--}--newline----tab--    --tab--return false;--newline--    --tab--}--newline--    --tab--WordNode node = childNodes[c-'a'];--newline--    --tab--if (node == null){--newline--    --tab----tab--return false;--newline--    --tab--}--newline--    --tab--return search(chars, ++index, node);--newline--    }--newline--    --newline----newline--    --newline--    private class WordNode{--newline--    --tab--boolean isLeaf;--newline--    --tab--WordNode[] children = new WordNode[26];--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My JAVA Trie based solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class WordDictionary(object):--newline----tab--    def __init__(self):--newline----tab--        self.word_dict = collections.defaultdict(list)--newline----tab--        --newline----tab----newline----tab--    def addWord(self, word):--newline----tab--        if word:--newline----tab--            self.word_dict[len(word)].append(word)--newline----tab----newline----tab--    def search(self, word):--newline----tab--        if not word:--newline----tab--            return False--newline----tab--        if '.' not in word:--newline----tab--            return word in self.word_dict[len(word)]--newline----tab--        for v in self.word_dict[len(word)]:--newline----tab--            # match xx.xx.x with yyyyyyy--newline----tab--            for i, ch in enumerate(word):--newline----tab--                if ch != v[i] and ch != '.':--newline----tab--                    break--newline----tab--            else:--newline----tab--                return True--newline----tab--        return False--newline----tab--",
            "topic_title": "Python 168ms-beat-100% solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class WordDictionary:--newline----tab----newline----tab--    def __init__(self):--newline----tab--        self.root = {}--newline----tab--    --newline----tab--    def addWord(self, word):--newline----tab--        node = self.root--newline----tab--        for char in word:--newline----tab--            node = node.setdefault(char, {})--newline----tab--        node['$'] = None--newline----tab----newline----tab--    def search(self, word):--newline----tab--        nodes = [self.root]--newline----tab--        for char in word + '$':--newline----tab--            nodes = [kid for node in nodes for kid in--newline----tab--                     ([node[char]] if char in node else--newline----tab--                      filter(None, node.values()) if char == '.' else [])]--newline----tab--        return bool(nodes)",
            "topic_title": "Tree solutions, 18-20 lines"
        }
    ],
    "qc": "211.json"
}