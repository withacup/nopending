{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    void setZeroes(vector<vector<int> > &matrix) {--newline--        int col0 = 1, rows = matrix.size(), cols = matrix[0].size();--newline--    --newline--        for (int i = 0; i < rows; i++) {--newline--            if (matrix[i][0] == 0) col0 = 0;--newline--            for (int j = 1; j < cols; j++)--newline--                if (matrix[i][j] == 0)--newline--                    matrix[i][0] = matrix[0][j] = 0;--newline--        }--newline--    --newline--        for (int i = rows - 1; i >= 0; i--) {--newline--            for (int j = cols - 1; j >= 1; j--)--newline--                if (matrix[i][0] == 0 || matrix[0][j] == 0)--newline--                    matrix[i][j] = 0;--newline--            if (col0 == 0) matrix[i][0] = 0;--newline--        }--newline--    }--newline--}",
            "python": null,
            "topic_title": "Any shorter O(1) space solution?"
        },
        {
            "java": "public class Solution {--newline--public void setZeroes(int[][] matrix) {--newline--    boolean fr = false,fc = false;--newline--    for(int i = 0; i < matrix.length; i++) {--newline--        for(int j = 0; j < matrix[0].length; j++) {--newline--            if(matrix[i][j] == 0) {--newline--                if(i == 0) fr = true;--newline--                if(j == 0) fc = true;--newline--                matrix[0][j] = 0;--newline--                matrix[i][0] = 0;--newline--            }--newline--        }--newline--    }--newline--    for(int i = 1; i < matrix.length; i++) {--newline--        for(int j = 1; j < matrix[0].length; j++) {--newline--            if(matrix[i][0] == 0 || matrix[0][j] == 0) {--newline--                matrix[i][j] = 0;--newline--            }--newline--        }--newline--    }--newline--    if(fr) {--newline--        for(int j = 0; j < matrix[0].length; j++) {--newline--            matrix[0][j] = 0;--newline--        }--newline--    }--newline--    if(fc) {--newline--        for(int i = 0; i < matrix.length; i++) {--newline--            matrix[i][0] = 0;--newline--        }--newline--    }--newline--    --newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My AC java O(1) solution (easy to read)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    void setZeroes(vector<vector<int> > &matrix) {--newline--        --newline--        int H = matrix.size();--newline--        int W = matrix[0].size();--newline--        --newline--        // find the last 0 row--newline--        int last_0_row = -1;--newline--        for (int y = H - 1; y >= 0 && last_0_row == -1; y--)--newline--            for (int x = 0; x < W; x++)--newline--                if (matrix[y][x] == 0)--newline--                {--newline--                    last_0_row = y;--newline--                    break;--newline--                }--newline--        if (last_0_row == -1)--newline--            return;--newline--        --newline--        // go row by row--newline--        for (int y = 0; y < last_0_row; y++)--newline--        {--newline--            bool this_is_a_0_row = false;--newline--            --newline--            for (int x = 0; x < W; x++)--newline--            {--newline--                if (matrix[y][x] == 0)--newline--                {--newline--                    this_is_a_0_row = true;--newline--                    matrix[last_0_row][x] = 0;--newline--                }--newline--            }--newline--            --newline--            if (this_is_a_0_row)--newline--            for (int x = 0; x < W; x++)--newline--            {--newline--                matrix[y][x] = 0;--newline--            }--newline--        }--newline--        --newline--        // set collums to 0--newline--        for (int y = 0; y < H; y++)--newline--        for (int x = 0; x < W; x++)--newline--        {--newline--            if (matrix[last_0_row][x] == 0)--newline--                matrix[y][x] = 0;--newline--        }--newline--        --newline--        // set the last 0 row --newline--        for (int x = 0; x < W; x++)--newline--        {--newline--            matrix[last_0_row][x] = 0;--newline--        }--newline--    }--newline--};",
            "python": null,
            "topic_title": "My C++ O(1) yoooooo"
        },
        {
            "java": "public class Solution {--newline--    public void setZeroes(int[][] matrix) {--newline--        if(matrix==null){--newline--            return;--newline--        }--newline--        --newline--        int m = matrix.length;--newline--        int n = matrix[0].length;--newline--        --newline--        boolean rowHasZero = false;--newline--        boolean colHasZero = false;--newline--        --newline--        for(int i=0; i<n; i++){--newline--            if(matrix[0][i]==0){--newline--                rowHasZero = true;--newline--                break;--newline--            }--newline--        }--newline--        --newline--        for(int i=0; i<m; i++){--newline--            if(matrix[i][0]==0){--newline--                colHasZero = true;--newline--                break;--newline--            }--newline--        }--newline--        --newline--        for(int i=1; i<m; i++){--newline--            for(int j=1; j<n; j++){--newline--                if(matrix[i][j]==0){--newline--                    matrix[i][0] = 0;--newline--                    matrix[0][j] = 0;--newline--                }--newline--            }--newline--        }--newline--        --newline----newline--        --newline--        for(int j=1;j<n; j++){--newline--            if(matrix[0][j]==0){--newline--                nullifyCol(matrix, j, m, n);--newline--            }--newline--        }--newline--        --newline--        for(int i=1; i<m; i++){--newline--            if(matrix[i][0]==0){--newline--                nullifyRow(matrix, i, m, n);--newline--            }--newline--        }--newline--        --newline--        if(rowHasZero){--newline--            nullifyRow(matrix, 0, m, n);--newline--        }--newline--        if(colHasZero){--newline--            nullifyCol(matrix, 0, m, n);--newline--        }--newline--        --newline--    }--newline--    --newline--    public void nullifyRow(int[][] matrix, int i, int m, int n){--newline--        for(int col=0; col<n; col++){--newline--            matrix[i][col] = 0;--newline--        }--newline--    }--newline--    --newline--    public void nullifyCol(int[][] matrix, int j, int m, int n){--newline--        for(int row=0; row<m; row++){--newline--            matrix[row][j] = 0;--newline--        }--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "My java O(1) solution (easy to understand)"
        },
        {
            "java": " public class Solution {--newline-- public void setZeroes(int[][] matrix) {--newline--     if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return;--newline--     int m = matrix.length, n = matrix[0].length;--newline--     boolean row = false, col = false;--newline--     for (int i = 0; i < m; i++)--newline--         for (int j = 0; j < n; j++){--newline--             if (matrix[i][j] == 0) {--newline--                 matrix[0][j] = 0;--newline--                 matrix[i][0] = 0;--newline--                 if (i == 0) row = true;--newline--                 if (j == 0) col = true;--newline--             }--newline--         }--newline--     for (int i = 1; i < m; i++){--newline--         if (matrix[i][0] == 0){--newline--             for (int j = 1; j < n;j++)--newline--                 matrix[i][j] = 0;--newline--         }--newline--     }--newline--     for (int j = 1; j < n; j++){--newline--         if (matrix[0][j] == 0){--newline--             for (int i = 1; i < m; i++)--newline--                 matrix[i][j] = 0;--newline--         }--newline--     }--newline--     if (row){--newline--         for (int j = 0; j < n; j++)--newline--             matrix[0][j] = 0;--newline--     }--newline--     if (col){--newline--         for(int i = 0; i < m; i++)--newline--             matrix[i][0] = 0;--newline--     }--newline-- }--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "O(1) JAVA, straightforward idea"
        }
    ],
    "qc": "73.json"
}