{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--    int uniquePaths(int m, int n) {--newline--        if (m > n) return uniquePaths(n, m);--newline--        vector<int> cur(m, 1);--newline--        for (int j = 1; j < n; j++)--newline--            for (int i = 1; i < m; i++)--newline--                cur[i] += cur[i - 1]; --newline--        return cur[m - 1];--newline--    }--newline--}; --newline--",
            "python": null,
            "topic_title": "0ms, 5-lines DP Solution in C++ with Explanations"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--    public:--newline--        int uniquePaths(int m, int n) {--newline--            int N = n + m - 2;// how much steps we need to do--newline--            int k = m - 1; // number of steps that need to go down--newline--            double res = 1;--newline--            // here we calculate the total possible path number --newline--            // Combination(N, k) = n! / (k!(n - k)!)--newline--            // reduce the numerator and denominator and get--newline--            // C = ( (n - k + 1) * (n - k + 2) * ... * n ) / k!--newline--            for (int i = 1; i <= k; i++)--newline--                res = res * (N - k + i) / i;--newline--            return (int)res;--newline--        }--newline--    };--newline--",
            "python": null,
            "topic_title": "My AC solution using formula"
        },
        {
            "java": " public class Solution {--newline--    public int uniquePaths(int m, int n) {--newline--        Integer[][] map = new Integer[m][n];--newline--        for(int i = 0; i<m;i++){--newline--            map[i][0] = 1;--newline--        }--newline--        for(int j= 0;j<n;j++){--newline--            map[0][j]=1;--newline--        }--newline--        for(int i = 1;i<m;i++){--newline--            for(int j = 1;j<n;j++){--newline--                map[i][j] = map[i-1][j]+map[i][j-1];--newline--            }--newline--        }--newline--        return map[m-1][n-1];--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java DP solution with complexity O(n*m)"
        },
        {
            "java": "public class Solution {--newline--    public int uniquePaths(int m, int n) {--newline--        if(m == 1 || n == 1)--newline--            return 1;--newline--        m--;--newline--        n--;--newline--        if(m < n) {              // Swap, so that m is the bigger number--newline--            m = m + n;--newline--            n = m - n;--newline--            m = m - n;--newline--        }--newline--        long res = 1;--newline--        int j = 1;--newline--        for(int i = m+1; i <= m+n; i++, j++){       // Instead of taking factorial, keep on multiply & divide--newline--            res *= i;--newline--            res /= j;--newline--        }--newline--            --newline--        return (int)res;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Math solution, O(1) space"
        },
        {
            "java": "public class Solution {--newline--public int uniquePaths(int m, int n) {--newline--    int[][] grid = new int[m][n];--newline--    for(int i = 0; i<m; i++){--newline--        for(int j = 0; j<n; j++){--newline--            if(i==0||j==0)--newline--                grid[i][j] = 1;--newline--            else--newline--                grid[i][j] = grid[i][j-1] + grid[i-1][j];--newline--        }--newline--    }--newline--    return grid[m-1][n-1];--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Clean and simple DP java"
        }
    ],
    "qc": "62.json"
}