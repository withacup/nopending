{
    "posts": [
        {
            "java": "public class Solution {--newline--    public int minMoves2(int[] nums) {--newline--        Arrays.sort(nums);--newline--        int i = 0, j = nums.length-1;--newline--        int count = 0;--newline--        while(i < j){--newline--            count += nums[j]-nums[i];--newline--            i++;--newline--            j--;--newline--        }--newline--        return count;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java(just like meeting point problem)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def minMoves2(self, nums):--newline----tab--        median = sorted(nums)[len(nums) / 2]--newline----tab--        return sum(abs(num - median) for num in nums)--newline----tab--    --newline----tab--    def minMoves2(self, nums):--newline----tab--        nums.sort()--newline----tab--        return sum(nums[~i] - nums[i] for i in range(len(nums) / 2))",
            "topic_title": "2 lines Python, 2 ways"
        },
        {
            "java": "public class Solution {--newline--    public int minMoves2(int[] A) {--newline--        int sum = 0, median = quickselect(A, A.length/2+1, 0, A.length-1);--newline--        for (int i=0;i<A.length;i++) sum += Math.abs(A[i] - median);--newline--        return sum;--newline--    }--newline--    --newline--    public int quickselect(int[] A, int k, int start, int end) {--newline--        int l = start, r = end, pivot = A[(l+r)/2];--newline--        while (l<=r) {--newline--            while (A[l] < pivot) l++;--newline--            while (A[r] > pivot) r--;--newline--            if (l>=r) break;--newline--            swap(A, l++, r--);--newline--        }--newline--        if (l-start+1 > k) return quickselect(A, k, start, l-1);--newline--        if (l-start+1 == k && l==r) return A[l];--newline--        return quickselect(A, k-r+start-1, r+1, end);--newline--    }--newline--    --newline--    public void swap(int[] A, int i, int j) {--newline--        int temp = A[i];--newline--        A[i] = A[j];--newline--        A[j] = temp;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java O(n) Time using QuickSelect"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "// O(n).--newline--// Imagine the nums are sorted, and the final value is k, we start find k from the first element.--newline--// If we increase k, the elements <= k will need move one step more, and the elements > k will need to move one step less.--newline--// If there are more elements > k than elements <= k, we should increase k to minimize the moves.--newline--// So we just increase k, until k reach the median of of the nums array. By then, the number of elements <= k equals to that of elements > k.--newline--// (There is a slight different when the number of array is odd, but it's similar).--newline--// If we keep increasing k after k reach the median of the array, more numbers >k than <= k, and more moves needed, so we should stop.--newline--//--newline--// The sort is not needed since we find the k is the median of the array, there is an average O(n) algorithm to find such k.--newline--class Solution {--newline--public:--newline--    int minMoves2(vector<int>& nums) {--newline--        int n = nums.size();--newline--        auto it = nums.begin() + n/2;--newline--        nth_element(nums.begin(), it, nums.end());--newline--        int median = *it;--newline--        int total = 0;--newline--        for (auto &i : nums)--newline--            total += abs(i-median);--newline--        return total;--newline--    }--newline--};--newline----newline--",
            "python": null,
            "topic_title": "O(n) solution with detailed explanation."
        },
        {
            "java": "public class Solution {--newline--    public int minMoves2(int[] nums) {--newline--        if(nums==null||  nums.length==0) return 0;--newline--        long moves = Integer.MAX_VALUE;--newline--        Arrays.sort(nums);--newline--        long totalSum = 0L;--newline--        long sum = 0L;--newline--        for(int i =0;i<nums.length;i++){--newline--            totalSum += (long)nums[i];--newline--           if(i<nums.length/2) sum+=(long)nums[i];--newline--        }--newline--       --newline--        int k = nums.length/2;--newline--        moves = (long)(k-(nums.length-k-1)-1)*(long)nums[k]-sum+(totalSum-sum);--newline--           --newline--        return (int)moves;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java solution with thinking process"
        }
    ],
    "qc": "462.json"
}