{
    "posts": [
        {
            "java": "public class Solution {--newline--    public List<Integer> grayCode(int n) {--newline--        List<Integer> result = new LinkedList<>();--newline--        for (int i = 0; i < 1<<n; i++) result.add(i ^ i>>1);--newline--        return result;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "An accepted three line solution in JAVA"
        },
        {
            "java": "public class Solution {--newline--    public List<Integer> grayCode(int n) {--newline--        List<Integer> rs=new ArrayList<Integer>();--newline--        rs.add(0);--newline--        for(int i=0;i<n;i++){--newline--            int size=rs.size();--newline--            for(int k=size-1;k>=0;k--)--newline--                rs.add(rs.get(k) | 1<<i);--newline--        }--newline--        return rs;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Share my solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<int> grayCode(int n) --newline--    {         --newline--        vector<int> result(1, 0);        --newline--        for (int i = 0; i < n; i++) {--newline--            int curCount = result.size();--newline--            // push back all element in result in reverse order--newline--            while (curCount) {--newline--                curCount--;--newline--                int curNum = result[curCount];--newline--                curNum += (1<<i);--newline--                result.push_back(curNum);--newline--            } --newline--        }--newline--        return result;--newline--    }--newline--}",
            "python": null,
            "topic_title": "What is the best solution for Gray Code problem? No extra space used and no recursion?"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution:--newline----tab--    # @return a list of integers--newline----tab--    '''--newline----tab--    from up to down, then left to right--newline----tab--    --newline----tab--    0   1   11  110--newline----tab--            10  111--newline----tab--                101--newline----tab--                100--newline----tab--                --newline----tab--    start:      [0]--newline----tab--    i = 0:      [0, 1]--newline----tab--    i = 1:      [0, 1, 3, 2]--newline----tab--    i = 2:      [0, 1, 3, 2, 6, 7, 5, 4]--newline----tab--    '''--newline----tab--    def grayCode(self, n):--newline----tab--        results = [0]--newline----tab--        for i in range(n):--newline----tab--            results += [x + pow(2, i) for x in reversed(results)]--newline----tab--        return results",
            "topic_title": "One-liner Python solution (with demo in comments)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    vector<int> grayCode(int n) {--newline--        int N(1 << n), tmp;--newline--        vector<int> result;--newline--        for(int i(0); i < N; i++)--newline--        {--newline--            tmp = i << 1;--newline--            result.push_back((tmp^i) >> 1);--newline--        }--newline--        return result;--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "Share my simple way of this problem^_^"
        }
    ],
    "qc": "89.json"
}