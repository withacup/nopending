{
    "posts": [
        {
            "java": "public class Solution {--newline--    public List<List<Integer>> combinationSum2(int[] nums, int target) {--newline--        List<List<Integer>> list = new ArrayList<>();--newline--        Arrays.sort(nums);--newline--        backtrack(list, new ArrayList<>(), nums, target, 0);--newline--        return list;--newline--        --newline--    }--newline--    --newline--    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int remain, int start){--newline--        if(remain < 0) return;--newline--        else if(remain == 0) list.add(new ArrayList<>(tempList));--newline--        else{--newline--            for(int i = start; i < nums.length; i++){--newline--                if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates--newline--                tempList.add(nums[i]);--newline--                backtrack(list, tempList, nums, remain - nums[i], i + 1);--newline--                tempList.remove(tempList.size() - 1); --newline--            }--newline--        }--newline--    } --newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "A general approach to backtracking questions in Java (Subsets, Permutations, Combination Sum, Palindrome Partitioning)"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    std::vector<std::vector<int> > combinationSum3(int k, int n) {--newline--        std::vector<std::vector<int> > res;--newline--        std::vector<int> combination;--newline--        combinationSum3(n, res, combination, 1, k);--newline--        return res;--newline--    }--newline--private:--newline--    void combinationSum3(int target, std::vector<std::vector<int> > &res, std::vector<int> &combination, int begin, int need) {--newline--        if (!target) {--newline--            res.push_back(combination);--newline--            return;--newline--        }--newline--        else if (!need)--newline--            return;--newline--        for (int i = begin; i != 10 && target >= i * need + need * (need - 1) / 2; ++i) {--newline--            combination.push_back(i);--newline--            combinationSum3(target - i, res, combination, i + 1, need - 1);--newline--            combination.pop_back();--newline--        }--newline--    }--newline--};--newline--",
            "python": null,
            "topic_title": "Accepted 16ms c++ solution use backtracking, easy understand."
        },
        {
            "java": "public class Solution {--newline--    public List<List<Integer>> combinationSum(int[] candidates, int target) {--newline--    --tab--Arrays.sort(candidates);--newline--        List<List<Integer>> result = new ArrayList<List<Integer>>();--newline--        getResult(result, new ArrayList<Integer>(), candidates, target, 0);--newline--        --newline--        return result;--newline--    }--newline--    --newline--    private void getResult(List<List<Integer>> result, List<Integer> cur, int candidates[], int target, int start){--newline--    --tab--if(target > 0){--newline--    --tab----tab--for(int i = start; i < candidates.length && target >= candidates[i]; i++){--newline--    --tab----tab----tab--cur.add(candidates[i]);--newline--    --tab----tab----tab--getResult(result, cur, candidates, target - candidates[i], i);--newline--    --tab----tab----tab--cur.remove(cur.size() - 1);--newline--    --tab----tab--}//for--newline--    --tab--}//if--newline--    --tab--else if(target == 0 ){--newline--    --tab----tab--result.add(new ArrayList<Integer>(cur));--newline--    --tab--}//else if--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java solution using recursive"
        },
        {
            "java": "public class Solution {--newline--    public List<List<Integer>> combinationSum(int[] cands, int t) {--newline--        Arrays.sort(cands); // sort candidates to try them in asc order--newline--        List<List<List<Integer>>> dp = new ArrayList<>();--newline--        for (int i = 1; i <= t; i++) { // run through all targets from 1 to t--newline--            List<List<Integer>> newList = new ArrayList(); // combs for curr i--newline--            // run through all candidates <= i--newline--            for (int j = 0; j < cands.length && cands[j] <= i; j++) {--newline--                // special case when curr target is equal to curr candidate--newline--                if (i == cands[j]) newList.add(Arrays.asList(cands[j]));--newline--                // if current candidate is less than the target use prev results--newline--                else for (List<Integer> l : dp.get(i-cands[j]-1)) {--newline--                    if (cands[j] <= l.get(0)) {--newline--                        List cl = new ArrayList<>();--newline--                        cl.add(cands[j]); cl.addAll(l);--newline--                        newList.add(cl);--newline--                    }--newline--                }--newline--            }--newline--            dp.add(newList);--newline--        }--newline--        return dp.get(t-1);--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Iterative Java DP solution"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def combinationSum(self, candidates, target):--newline----tab--        res = []--newline----tab--        candidates.sort()--newline----tab--        self.dfs(candidates, target, 0, [], res)--newline----tab--        return res--newline----tab--        --newline----tab--    def dfs(self, nums, target, index, path, res):--newline----tab--        if target < 0:--newline----tab--            return  # backtracking--newline----tab--        if target == 0:--newline----tab--            res.append(path)--newline----tab--            return --newline----tab--        for i in xrange(index, len(nums)):--newline----tab--            self.dfs(nums, target-nums[i], i, path+[nums[i]], res)",
            "topic_title": "Python dfs solution."
        }
    ],
    "qc": "39.json"
}