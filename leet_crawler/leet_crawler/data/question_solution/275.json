{
    "posts": [
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int hIndex(vector<int>& citations) {--newline--        int left=0, len = citations.size(), right= len-1,  mid;--newline--        while(left<=right)--newline--        {--newline--            mid=left+ (right-left)/2;--newline--            if(citations[mid] >= (len-mid)) right = mid - 1;--newline--            else left = mid + 1;--newline--        }--newline--        return len - left;--newline--    }--newline--};",
            "python": null,
            "topic_title": "Standard binary search"
        },
        {
            "java": "public class Solution {--newline--    public int hIndex(int[] citations) {--newline--        int len = citations.length;--newline----newline--        int first = 0;--newline--        int mid;--newline--        int count = len;--newline--        int step;--newline--        --newline--        while (count > 0) {--newline--            step = count / 2;--newline--            mid = first + step;--newline--            if (citations[mid] < len - mid) {--newline--                first = mid + 1;--newline--                count -= (step + 1);--newline--            }--newline--            else {--newline--                count = step;--newline--            }--newline--        }--newline--        --newline--        return len - first;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int hIndex(vector<int>& citations) {--newline--        int size = citations.size();--newline----newline--        int first = 0;--newline--        int mid;--newline--        int count = size;--newline--        int step;--newline--        --newline--        while (count > 0) {--newline--            step = count / 2;--newline--            mid = first + step;--newline--            if (citations[mid] < size - mid) {--newline--                first = mid + 1;--newline--                count -= (step + 1);--newline--            }--newline--            else {--newline--                count = step;--newline--            }--newline--        }--newline--        --newline--        return size - first;--newline--    }--newline--};--newline--",
            "python": "class Solution(object):--newline----tab--    def hIndex(self, citations):--newline----tab--        \"\"\"--newline----tab--        :type citations: List[int]--newline----tab--        :rtype: int--newline----tab--        \"\"\"--newline----tab--        --newline----tab--        length = len(citations)--newline----tab--        --newline----tab--        first = 0--newline----tab--        count = length--newline----tab--        --newline----tab--        while count > 0:--newline----tab--            step = count / 2--newline----tab--            mid = first + step--newline----tab--            if citations[mid] < length - mid:--newline----tab--                first = mid + 1--newline----tab--                count -= (step + 1)--newline----tab--            else:--newline----tab--                count = step--newline----tab--        --newline----tab--        return length - first--newline----tab--",
            "topic_title": "O(logN)-time O(1)-space Easy Solution with Detailed Explanations (C++&#x2F;Java&#x2F;Python)"
        },
        {
            "java": "public class Solution {--newline--    public int hIndex(int[] citations) {--newline--    --tab--int len = citations.length;--newline--    --tab--int lo = 0, hi = len - 1;--newline--    --tab--while (lo <= hi) {--newline--    --tab----tab--int med = (hi + lo) / 2;--newline--    --tab----tab--if (citations[med] == len - med) {--newline--    --tab----tab----tab--return len - med;--newline--    --tab----tab--} else if (citations[med] < len - med) {--newline--    --tab----tab----tab--lo = med + 1;--newline--    --tab----tab--} else { --newline--    --tab----tab----tab--//(citations[med] > len-med), med qualified as a hIndex,--newline--    --tab----tab--    // but we have to continue to search for a higher one.--newline--    --tab----tab----tab--hi = med - 1;--newline--    --tab----tab--}--newline--    --tab--}--newline--    --tab--return len - lo;--newline--    }--newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java binary search, simple and clean"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    int hIndex(int* citations, int citationsSize) {--newline--        int lo = 0, hi = citationsSize, mid, index = 0;--newline--        while (lo <= hi) {--newline--            mid = lo + ((hi - lo) >> 1);--newline--            if (citations[citationsSize - mid - 1] > mid) {--newline--                lo = mid + 1;--newline--                index = lo;--newline--            } else {--newline--                hi = mid - 1;--newline--            }--newline--        }--newline--        return index;--newline--    }--newline--}",
            "python": null,
            "topic_title": "Share my C O(logN) solution with explanation."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution :--newline----tab--    def hIndex(self, citations):--newline----tab--        n = len(citations)--newline----tab--        l, r = 0, n-1--newline----tab--        while l <= r:--newline----tab--            mid = (l+r)/2--newline----tab--            if citations[mid] >= n-mid:--newline----tab--                r = mid - 1--newline----tab--            else:--newline----tab--                l = mid + 1--newline----tab--        return n-l",
            "topic_title": "Short Python O(log n) Solution"
        }
    ],
    "qc": "275.json"
}