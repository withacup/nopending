{
    "posts": [
        {
            "java": "public class Solution {--newline--    public boolean checkSubarraySum(int[] nums, int k) {--newline--        Map<Integer, Integer> map = new HashMap<Integer, Integer>(){{put(0,-1);}};;--newline--        int runningSum = 0;--newline--        for (int i=0;i<nums.length;i++) {--newline--            runningSum += nums[i];--newline--            if (k != 0) runningSum %= k; --newline--            Integer prev = map.get(runningSum);--newline--            if (prev != null) {--newline--                if (i - prev > 1) return true;--newline--            }--newline--            else map.put(runningSum, i);--newline--        }--newline--        return false;--newline--    }--newline--    --newline--}",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Java O(n) time O(k) space"
        },
        {
            "java": "public class Solution {--newline--    public boolean checkSubarraySum(int[] nums, int k) {--newline--        // Since the size of subarray is at least 2.--newline--        if (nums.length <= 1) return false;--newline--        // Two continuous \"0\" will form a subarray which has sum = 0. 0 * k == 0 will always be true. --newline--        for (int i = 0; i < nums.length - 1; i++) {--newline--            if (nums[i] == 0 && nums[i + 1] == 0) return true;--newline--        }--newline--        --newline--        // At this point, k can't be \"0\" any longer.--newline--        if (k == 0) return false;--newline--        // Let's only check positive k. Because if there is a n makes n * k = sum, it is always true -n * -k = sum.--newline--        if (k < 0) k = -k;--newline--        --newline--        Set<Integer> sums = new HashSet<>();--newline--        int sum = 0;--newline--        sums.add(0);--newline--        --newline--        for (int i = 0; i < nums.length; i++) {--newline--            sum += nums[i];--newline--            --newline--            if (i > 0) {--newline--                // Validate from the biggest possible n * k to k--newline--                for (int j = (sum / k) * k; j >= k; j -= k) {--newline--                    if (sums.contains(sum - j)) return true;--newline--                }--newline--            }--newline--            --newline--            sums.add(sum);--newline--        }--newline--        --newline--        return false;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Need to pay attention to a lot of corner cases..."
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": "class Solution {--newline--public:--newline--    bool checkSubarraySum(vector<int>& nums, int k) {--newline--        int n = nums.size(), sum = 0, pre = 0;--newline--        unordered_set<int> modk;--newline--        for (int i = 0; i < n; ++i) {--newline--            sum += nums[i];--newline--            int mod = k == 0 ? sum : sum % k;--newline--            if (modk.count(mod)) return true;--newline--            modk.insert(pre);--newline--            pre = mod;--newline--        }--newline--        return false;--newline--    }--newline--};",
            "python": null,
            "topic_title": "Concise C++ solution, use set instead of map"
        },
        {
            "java": null,
            "is_locked": false,
            "cpp": null,
            "python": "class Solution(object):--newline----tab--    def checkSubarraySum(self, nums, k):--newline----tab----newline----tab--        --newline----tab--        if k == 0:--newline----tab--            # if two continuous zeros in nums, return True--newline----tab--            # time O(n)--newline----tab--            for i in range(0, len(nums) - 1):--newline----tab--                if nums[i] == 0 and nums[i+1] == 0:--newline----tab--                    return True--newline----tab--            return False--newline----tab--        --newline----tab--        k = abs(k)--newline----tab--        if len(nums) >= k * 2:--newline----tab--            return True--newline----tab--        --newline----tab--        #if n >= 2k: return True--newline----tab--        #if n < 2k:  time O(n) is O(k)  --newline----tab----newline----tab--        sum = [0]--newline----tab--        for x in nums:--newline----tab--            sum.append((sum[-1] + x) % k)--newline----tab--        --newline----tab--        Dict = {}--newline----tab--        for i in range(0, len(sum)):--newline----tab--            if Dict.has_key(sum[i]):--newline----tab--                if i - Dict[sum[i]] > 1:--newline----tab--                    return True--newline----tab--            else:--newline----tab--                Dict[sum[i]] = i--newline----tab--        --newline----tab--        return False--newline----tab--",
            "topic_title": "Python with explanation.  62ms  Time O(min(n, k)) mostly"
        },
        {
            "java": "public class Solution {--newline--    public boolean checkSubarraySum(int[] nums, int k) {--newline--        if (nums == null || nums.length == 0)   return false;--newline--        --newline--        int[] preSum = new int[nums.length+1];--newline--        --newline--        for (int i = 1; i <= nums.length; i++) {--newline--            preSum[i] = preSum[i-1] + nums[i-1];--newline--        }--newline--        --newline--        for (int i = 0; i < nums.length; i++) {--newline--            for (int j = i+2; j <= nums.length; j++) {--newline--                if (k == 0) {--newline--                    if (preSum[j] - preSum[i] == 0) {--newline--                        return true;--newline--                    }--newline--                } else if ((preSum[j] - preSum[i]) % k == 0) {--newline--                    return true;--newline--                }--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--}--newline--",
            "is_locked": false,
            "cpp": null,
            "python": null,
            "topic_title": "Not smart solution, but easy to understand"
        }
    ],
    "qc": "523.json"
}