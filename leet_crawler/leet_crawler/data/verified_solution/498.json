{"solution_code": "public class Solution {--newline--    public int[] findDiagonalOrder(int[][] matrix) {--newline--        if (matrix == null || matrix.length == 0) return new int[0];--newline--        int m = matrix.length, n = matrix[0].length;--newline--        --newline--        int[] result = new int[m * n];--newline--        int row = 0, col = 0, d = 0;--newline--        int[][] dirs = {{-1, 1}, {1, -1}};--newline--        --newline--        for (int i = 0; i < m * n; i++) {--newline--            result[i] = matrix[row][col];--newline--            row += dirs[d][0];--newline--            col += dirs[d][1];--newline--            --newline--            if (row >= m) { row = m - 1; col += 2; d = 1 - d;}--newline--            if (col >= n) { col = n - 1; row += 2; d = 1 - d;}--newline--            if (row < 0)  { row = 0; d = 1 - d;}--newline--            if (col < 0)  { col = 0; d = 1 - d;}--newline--        }--newline--        --newline--        return result;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 32, "l_type": "java"}