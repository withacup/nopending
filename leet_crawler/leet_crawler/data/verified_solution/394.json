{"solution_code": "public class Solution {--newline--    public String decodeString(String s) {--newline--        String res = \"\";--newline--        Stack<Integer> countStack = new Stack<>();--newline--        Stack<String> resStack = new Stack<>();--newline--        int idx = 0;--newline--        while (idx < s.length()) {--newline--            if (Character.isDigit(s.charAt(idx))) {--newline--                int count = 0;--newline--                while (Character.isDigit(s.charAt(idx))) {--newline--                    count = 10 * count + (s.charAt(idx) - '0');--newline--                    idx++;--newline--                }--newline--                countStack.push(count);--newline--            }--newline--            else if (s.charAt(idx) == '[') {--newline--                resStack.push(res);--newline--                res = \"\";--newline--                idx++;--newline--            }--newline--            else if (s.charAt(idx) == ']') {--newline--                StringBuilder temp = new StringBuilder (resStack.pop());--newline--                int repeatTimes = countStack.pop();--newline--                for (int i = 0; i < repeatTimes; i++) {--newline--                    temp.append(res);--newline--                }--newline--                res = temp.toString();--newline--                idx++;--newline--            }--newline--            else {--newline--                res += s.charAt(idx++);--newline--            }--newline--        }--newline--        return res;--newline--    }--newline--}", "modified_code": null, "total_cases": 27, "l_type": "java"}