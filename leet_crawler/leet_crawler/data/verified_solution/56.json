{"solution_code": "public class Solution {--newline--    public List<Interval> merge(List<Interval> intervals) {--newline--        if (intervals.size() <= 1)--newline--            return intervals;--newline--        --newline--        // Sort by ascending starting point using an anonymous Comparator--newline--        intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));--newline--        --newline--        List<Interval> result = new LinkedList<Interval>();--newline--        int start = intervals.get(0).start;--newline--        int end = intervals.get(0).end;--newline--        --newline--        for (Interval interval : intervals) {--newline--            if (interval.start <= end) // Overlapping intervals, move the end if needed--newline--                end = Math.max(end, interval.end);--newline--            else {                     // Disjoint intervals, add the previous one and reset bounds--newline--                result.add(new Interval(start, end));--newline--                start = interval.start;--newline--                end = interval.end;--newline--            }--newline--        }--newline--        --newline--        // Add the last interval--newline--        result.add(new Interval(start, end));--newline--        return result;--newline--    }--newline--    --newline--}", "modified_code": null, "l_type": "java", "total_cases": 169}