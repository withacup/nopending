{"solution_code": "public class Solution {--newline--    public List<String> removeInvalidParentheses(String s) {--newline--        List<String> ans = new ArrayList<>();--newline--        remove(s, ans, 0, 0, new char[]{'(', ')'});--newline--        return ans;--newline--    }--newline--    --newline--    public void remove(String s, List<String> ans, int last_i, int last_j,  char[] par) {--newline--        for (int stack = 0, i = last_i; i < s.length(); ++i) {--newline--            if (s.charAt(i) == par[0]) stack++;--newline--            if (s.charAt(i) == par[1]) stack--;--newline--            if (stack >= 0) continue;--newline--            for (int j = last_j; j <= i; ++j)--newline--                if (s.charAt(j) == par[1] && (j == last_j || s.charAt(j - 1) != par[1]))--newline--                    remove(s.substring(0, j) + s.substring(j + 1, s.length()), ans, i, j, par);--newline--            return;--newline--        }--newline--        String reversed = new StringBuilder(s).reverse().toString();--newline--        if (par[0] == '(') // finished left to right--newline--            remove(reversed, ans, 0, 0, new char[]{')', '('});--newline--        else // finished right to left--newline--            ans.add(reversed);--newline--    }--newline--}", "modified_code": null, "total_cases": 125, "l_type": "java"}