{"solution_code": "public class Solution {--newline--    public NestedInteger deserialize(String s) {--newline--        if (s.isEmpty())--newline--            return null;--newline--        if (s.charAt(0) != '[') // ERROR: special case--newline--            return new NestedInteger(Integer.valueOf(s));--newline--            --newline--        Stack<NestedInteger> stack = new Stack<>();--newline--        NestedInteger curr = null;--newline--        int l = 0; // l shall point to the start of a number substring; --newline--                   // r shall point to the end+1 of a number substring--newline--        for (int r = 0; r < s.length(); r++) {--newline--            char ch = s.charAt(r);--newline--            if (ch == '[') {--newline--                if (curr != null) {--newline--                    stack.push(curr);--newline--                }--newline--                curr = new NestedInteger();--newline--                l = r+1;--newline--            } else if (ch == ']') {--newline--                String num = s.substring(l, r);--newline--                if (!num.isEmpty())--newline--                    curr.add(new NestedInteger(Integer.valueOf(num)));--newline--                if (!stack.isEmpty()) {--newline--                    NestedInteger pop = stack.pop();--newline--                    pop.add(curr);--newline--                    curr = pop;--newline--                }--newline--                l = r+1;--newline--            } else if (ch == ',') {--newline--                if (s.charAt(r-1) != ']') {--newline--                    String num = s.substring(l, r);--newline--                    curr.add(new NestedInteger(Integer.valueOf(num)));--newline--                }--newline--                l = r+1;--newline--            }--newline--        }--newline--        --newline--        return curr;--newline--    }--newline--}", "modified_code": null, "total_cases": 57, "l_type": "java"}