{"solution_code": "public class Solution {--newline--    public char[][] updateBoard(char[][] board, int[] click) {--newline--        int m = board.length, n = board[0].length;--newline--        Queue<int[]> queue = new LinkedList<>();--newline--        queue.add(click);--newline--        --newline--        while (!queue.isEmpty()) {--newline--            int[] cell = queue.poll();--newline--            int row = cell[0], col = cell[1];--newline--            --newline--            if (board[row][col] == 'M') { // Mine--newline--                board[row][col] = 'X';--newline--            }--newline--            else { // Empty--newline--                // Get number of mines first.--newline--                int count = 0;--newline--                for (int i = -1; i < 2; i++) {--newline--                    for (int j = -1; j < 2; j++) {--newline--                        if (i == 0 && j == 0) continue;--newline--                        int r = row + i, c = col + j;--newline--                        if (r < 0 || r >= m || c < 0 || c < 0 || c >= n) continue;--newline--                        if (board[r][c] == 'M' || board[r][c] == 'X') count++;--newline--                    }--newline--                }--newline--                --newline--                if (count > 0) { // If it is not a 'B', stop further DFS.--newline--                    board[row][col] = (char)(count + '0');--newline--                }--newline--                else { // Continue BFS to adjacent cells.--newline--                    board[row][col] = 'B';--newline--                    for (int i = -1; i < 2; i++) {--newline--                        for (int j = -1; j < 2; j++) {--newline--                            if (i == 0 && j == 0) continue;--newline--                            int r = row + i, c = col + j;--newline--                            if (r < 0 || r >= m || c < 0 || c < 0 || c >= n) continue;--newline--                            if (board[r][c] == 'E') {--newline--                                queue.add(new int[] {r, c});--newline--                                board[r][c] = 'B'; // Avoid to be added again.--newline--                            }--newline--                        }--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        --newline--        return board;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 54, "l_type": "java"}