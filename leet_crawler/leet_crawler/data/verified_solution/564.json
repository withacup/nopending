{"solution_code": "public class Solution {--newline--    public String nearestPalindromic(String n) {--newline--        Long number = Long.parseLong(n);--newline--        Long big = findHigherPalindrome(number + 1);--newline--        Long small = findLowerPalindrome(number - 1);--newline--        return Math.abs(number - small) > Math.abs(big - number) ? String.valueOf(big) : String.valueOf(small);--newline--    }--newline--    public Long findHigherPalindrome(Long limit) {--newline--        String n = Long.toString(limit);--newline--        char[] s = n.toCharArray(); // limit--newline--        int m = s.length;--newline--        char[] t = Arrays.copyOf(s, m); // target--newline--        for (int i = 0; i < m / 2; i++) {--newline--            t[m - 1 - i] = t[i];--newline--        }--newline--        for (int i = 0; i < m; i++) {--newline--            if (s[i] < t[i]) {--newline--                return Long.parseLong(String.valueOf(t)); --newline--            } else if (s[i] > t[i]) { --newline--                for (int j = (m - 1) / 2; j >= 0; j--) {--newline--                    if (++t[j] > '9') {--newline--                        t[j] = '0';--newline--                    } else {--newline--                        break;--newline--                    }--newline--                }--newline--                // make it palindrome again--newline--                for (int k = 0; k < m / 2; k++) {--newline--                    t[m - 1 - k] = t[k];--newline--                }--newline--                return Long.parseLong(String.valueOf(t)); --newline--            }--newline--        }--newline--        return Long.parseLong(String.valueOf(t));    --newline--    }--newline--    public Long findLowerPalindrome(Long limit) {--newline--        String n = Long.toString(limit);--newline--        char[] s = n.toCharArray();--newline--        int m = s.length;--newline--        char[] t = Arrays.copyOf(s, m);--newline--        for (int i = 0; i < m / 2; i++) {--newline--            t[m - 1 - i] = t[i];--newline--        }--newline--        for (int i = 0; i < m; i++) {--newline--            if (s[i] > t[i]) {--newline--                return Long.parseLong(String.valueOf(t)); --newline--            } else if (s[i] < t[i]) {--newline--                for (int j = (m - 1) / 2; j >= 0; j--) {--newline--                    if (--t[j] < '0') {--newline--                        t[j] = '9';--newline--                    } else {--newline--                        break;--newline--                    }--newline--                }--newline--                if (t[0] == '0') {--newline--                    char[] a = new char[m - 1];--newline--                    Arrays.fill(a, '9');--newline--                    return Long.parseLong(String.valueOf(a)); --newline--                }--newline--                // make it palindrome again--newline--                for (int k = 0; k < m / 2; k++) {--newline--                    t[m - 1 - k] = t[k];--newline--                }--newline--                return Long.parseLong(String.valueOf(t)); --newline--            }--newline--        }--newline--         return Long.parseLong(String.valueOf(t));  --newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 212, "l_type": "java"}