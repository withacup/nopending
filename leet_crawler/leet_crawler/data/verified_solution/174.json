{"solution_code": "public class Solution {--newline--    public int calculateMinimumHP(int[][] dungeon) {--newline--        if (dungeon == null || dungeon.length == 0 || dungeon[0].length == 0) return 0;--newline--        --newline--        int m = dungeon.length;--newline--        int n = dungeon[0].length;--newline--        --newline--        int[][] health = new int[m][n];--newline--    --newline--        health[m - 1][n - 1] = Math.max(1 - dungeon[m - 1][n - 1], 1);--newline--    --newline--        for (int i = m - 2; i >= 0; i--) {            --newline--            health[i][n - 1] = Math.max(health[i + 1][n - 1] - dungeon[i][n - 1], 1);--newline--        }--newline--    --newline--        for (int j = n - 2; j >= 0; j--) {--newline--            health[m - 1][j] = Math.max(health[m - 1][j + 1] - dungeon[m - 1][j], 1);--newline--        }--newline--    --newline--        for (int i = m - 2; i >= 0; i--) {--newline--            for (int j = n - 2; j >= 0; j--) {--newline--                int down = Math.max(health[i + 1][j] - dungeon[i][j], 1);--newline--                int right = Math.max(health[i][j + 1] - dungeon[i][j], 1);--newline--                health[i][j] = Math.min(right, down);--newline--            }--newline--        }--newline--    --newline--        return health[0][0];--newline--    }--newline--}", "modified_code": null, "total_cases": 44, "l_type": "java"}