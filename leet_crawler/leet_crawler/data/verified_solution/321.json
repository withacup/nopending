{"solution_code": "public class Solution {--newline--    public int[] maxNumber(int[] nums1, int[] nums2, int k) {--newline--        int n = nums1.length;--newline--        int m = nums2.length;--newline--        int[] ans = new int[k];--newline--        for (int i = Math.max(0, k - m); i <= k && i <= n; ++i) {--newline--            int[] candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);--newline--            if (greater(candidate, 0, ans, 0)) ans = candidate;--newline--        }--newline--        return ans;--newline--    }--newline--    private int[] merge(int[] nums1, int[] nums2, int k) {--newline--        int[] ans = new int[k];--newline--        for (int i = 0, j = 0, r = 0; r < k; ++r)--newline--            ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];--newline--        return ans;--newline--    }--newline--    public boolean greater(int[] nums1, int i, int[] nums2, int j) {--newline--        while (i < nums1.length && j < nums2.length && nums1[i] == nums2[j]) {--newline--            i++;--newline--            j++;--newline--        }--newline--        return j == nums2.length || (i < nums1.length && nums1[i] > nums2[j]);--newline--    }--newline--    public int[] maxArray(int[] nums, int k) {--newline--        int n = nums.length;--newline--        int[] ans = new int[k];--newline--        for (int i = 0, j = 0; i < n; ++i) {--newline--            while (n - i + j > k && j > 0 && ans[j - 1] < nums[i]) j--;--newline--            if (j < k) ans[j++] = nums[i];--newline--        }--newline--        return ans;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 102, "l_type": "java"}