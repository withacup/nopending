{"solution_code": "public class Codec {--newline--    private static final String spliter = \",\";--newline--    private static final String NN = \"X\";--newline----newline--    // Encodes a tree to a single string.--newline--    public String serialize(TreeNode root) {--newline--        StringBuilder sb = new StringBuilder();--newline--        buildString(root, sb);--newline--        return sb.toString();--newline--    }--newline----newline--    private void buildString(TreeNode node, StringBuilder sb) {--newline--        if (node == null) {--newline--            sb.append(NN).append(spliter);--newline--        } else {--newline--            sb.append(node.val).append(spliter);--newline--            buildString(node.left, sb);--newline--            buildString(node.right,sb);--newline--        }--newline--    }--newline--    // Decodes your encoded data to tree.--newline--    public TreeNode deserialize(String data) {--newline--        Deque<String> nodes = new LinkedList<>();--newline--        nodes.addAll(Arrays.asList(data.split(spliter)));--newline--        return buildTree(nodes);--newline--    }--newline--    --newline--    private TreeNode buildTree(Deque<String> nodes) {--newline--        String val = nodes.remove();--newline--        if (val.equals(NN)) return null;--newline--        else {--newline--            TreeNode node = new TreeNode(Integer.valueOf(val));--newline--            node.left = buildTree(nodes);--newline--            node.right = buildTree(nodes);--newline--            return node;--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 47, "l_type": "java"}