{"solution_code": "public class Solution {--newline--    public int[][] generateMatrix(int n) {--newline--        // Declaration--newline--        int[][] matrix = new int[n][n];--newline--        --newline--        // Edge Case--newline--        if (n == 0) {--newline--            return matrix;--newline--        }--newline--        --newline--        // Normal Case--newline--        int rowStart = 0;--newline--        int rowEnd = n-1;--newline--        int colStart = 0;--newline--        int colEnd = n-1;--newline--        int num = 1; //change--newline--        --newline--        while (rowStart <= rowEnd && colStart <= colEnd) {--newline--            for (int i = colStart; i <= colEnd; i ++) {--newline--                matrix[rowStart][i] = num ++; //change--newline--            }--newline--            rowStart ++;--newline--            --newline--            for (int i = rowStart; i <= rowEnd; i ++) {--newline--                matrix[i][colEnd] = num ++; //change--newline--            }--newline--            colEnd --;--newline--            --newline--            for (int i = colEnd; i >= colStart; i --) {--newline--                if (rowStart <= rowEnd)--newline--                    matrix[rowEnd][i] = num ++; //change--newline--            }--newline--            rowEnd --;--newline--            --newline--            for (int i = rowEnd; i >= rowStart; i --) {--newline--                if (colStart <= colEnd)--newline--                    matrix[i][colStart] = num ++; //change--newline--            }--newline--            colStart ++;--newline--        }--newline--        --newline--        return matrix;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 21, "l_type": "java"}