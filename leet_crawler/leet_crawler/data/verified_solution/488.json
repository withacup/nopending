{
    "solution_code": "public class Solution {--newline--    int MAXCOUNT = 6;   // the max balls you need will not exceed 6 since \"The number of balls in your hand won't exceed 5\"--newline--    --newline--    public int findMinStep(String board, String hand) {--newline--        int[] handCount = new int[32];--newline--        for (int i = 0; i < hand.length(); ++i) ++handCount[hand.charAt(i) - 'A'];--newline--        int rs = helper(board + \"#\", handCount);  // append a \"#\" to avoid special process while j==board.length, make the code shorter.--newline--        return rs == MAXCOUNT ? -1 : rs;--newline--    }--newline--    private int helper(String s, int[] h) {--newline--        s = removeConsecutive(s);     --newline--        if (s.equals(\"#\")) return 0;--newline--        int  rs = MAXCOUNT, need = 0;--newline--        for (int i = 0, j = 0 ; j < s.length(); ++j) {--newline--            if (s.charAt(j) == s.charAt(i)) continue;--newline--            need = 3 - (j - i);     //balls need to remove current consecutive balls.--newline--            if (h[s.charAt(i) - 'A'] >= need) {--newline--                h[s.charAt(i) - 'A'] -= need;--newline--                rs = Math.min(rs, need + helper(s.substring(0, i) + s.substring(j), h));--newline--                h[s.charAt(i) - 'A'] += need;--newline--            }--newline--            i = j;--newline--        }--newline--        return rs;--newline--    }--newline--    //remove consecutive balls longer than 3--newline--    private String removeConsecutive(String board) {--newline--        for (int i = 0, j = 0; j < board.length(); ++j) {--newline--            if (board.charAt(j) == board.charAt(i)) continue;--newline--            if (j - i >= 3) return removeConsecutive(board.substring(0, i) + board.substring(j));--newline--            else i = j;--newline--        }--newline--        return board;--newline--    }--newline--    --newline--}",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 106
}