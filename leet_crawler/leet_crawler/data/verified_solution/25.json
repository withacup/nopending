{"solution_code": "public class Solution {--newline--    public ListNode reverseKGroup(ListNode head, int k) {--newline--        ListNode curr = head;--newline--        int count = 0;--newline--        while (curr != null && count != k) { // find the k+1 node--newline--            curr = curr.next;--newline--            count++;--newline--        }--newline--        if (count == k) { // if k+1 node is found--newline--            curr = reverseKGroup(curr, k); // reverse list with k+1 node as head--newline--            // head - head-pointer to direct part, --newline--            // curr - head-pointer to reversed part;--newline--            while (count-- > 0) { // reverse current k-group: --newline--                ListNode tmp = head.next; // tmp - next head in direct part--newline--                head.next = curr; // preappending \"direct\" head to the reversed list --newline--                curr = head; // move head of reversed part to a new node--newline--                head = tmp; // move \"direct\" head to the next node in direct part--newline--            }--newline--            head = curr;--newline--        }--newline--        return head;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 81, "l_type": "java"}