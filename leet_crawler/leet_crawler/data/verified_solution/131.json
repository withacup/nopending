{"solution_code": "public class Solution {--newline--        List<List<String>> resultLst;--newline--        ArrayList<String> currLst;--newline--        public List<List<String>> partition(String s) {--newline--            resultLst = new ArrayList<List<String>>();--newline--            currLst = new ArrayList<String>();--newline--            backTrack(s,0);--newline--            return resultLst;--newline--        }--newline--        public void backTrack(String s, int l){--newline--            if(currLst.size()>0 //the initial str could be palindrome--newline--                && l>=s.length()){--newline--                    List<String> r = (ArrayList<String>) currLst.clone();--newline--                    resultLst.add(r);--newline--            }--newline--            for(int i=l;i<s.length();i++){--newline--                if(isPalindrome(s,l,i)){--newline--                    if(l==i)--newline--                        currLst.add(Character.toString(s.charAt(i)));--newline--                    else--newline--                        currLst.add(s.substring(l,i+1));--newline--                    backTrack(s,i+1);--newline--                    currLst.remove(currLst.size()-1);--newline--                }--newline--            }--newline--        }--newline--        public boolean isPalindrome(String str, int l, int r){--newline--            if(l==r) return true;--newline--            while(l<r){--newline--                if(str.charAt(l)!=str.charAt(r)) return false;--newline--                l++;r--;--newline--            }--newline--            return true;--newline--        }--newline--}--newline--", "modified_code": null, "total_cases": 22, "l_type": "java"}