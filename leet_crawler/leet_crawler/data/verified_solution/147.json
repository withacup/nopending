{"solution_code": "public class Solution {--newline--    public ListNode insertionSortList(ListNode head) {--newline--            if( head == null ){--newline--                return head;--newline--            }--newline--            --newline--            ListNode helper = new ListNode(0); //new starter of the sorted list--newline--            ListNode cur = head; //the node will be inserted--newline--            ListNode pre = helper; //insert node between pre and pre.next--newline--            ListNode next = null; //the next node will be inserted--newline--            //not the end of input list--newline--            while( cur != null ){--newline--                next = cur.next;--newline--                //find the right place to insert--newline--                while( pre.next != null && pre.next.val < cur.val ){--newline--                    pre = pre.next;--newline--                }--newline--                //insert between pre and pre.next--newline--                cur.next = pre.next;--newline--                pre.next = cur;--newline--                pre = helper;--newline--                cur = next;--newline--            }--newline--            --newline--            return helper.next;--newline--        }--newline--}", "modified_code": null, "total_cases": 21, "l_type": "java"}