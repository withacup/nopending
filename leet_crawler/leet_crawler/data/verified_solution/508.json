{"solution_code": "public class Solution {--newline--    Map<Integer, Integer> sumToCount;--newline--    int maxCount;--newline--    --newline--    public int[] findFrequentTreeSum(TreeNode root) {--newline--        maxCount = 0;--newline--        sumToCount = new HashMap<Integer, Integer>();--newline--        --newline--        postOrder(root);--newline--        --newline--        List<Integer> res = new ArrayList<>();--newline--        for (int key : sumToCount.keySet()) {--newline--            if (sumToCount.get(key) == maxCount) {--newline--                res.add(key);--newline--            }--newline--        }--newline--        --newline--        int[] result = new int[res.size()];--newline--        for (int i = 0; i < res.size(); i++) {--newline--            result[i] = res.get(i);--newline--        }--newline--        return result;--newline--    }--newline--    --newline--    private int postOrder(TreeNode root) {--newline--        if (root == null) return 0;--newline--        --newline--        int left = postOrder(root.left);--newline--        int right = postOrder(root.right);--newline--        --newline--        int sum = left + right + root.val;--newline--        int count = sumToCount.getOrDefault(sum, 0) + 1;--newline--        sumToCount.put(sum, count);--newline--        --newline--        maxCount = Math.max(maxCount, count);--newline--        --newline--        return sum;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 61, "l_type": "java"}