{"solution_code": "public class Solution {--newline--    public void solveSudoku(char[][] board) {--newline--        if(board == null || board.length == 0)--newline--            return;--newline--        solve(board);--newline--    }--newline--    --newline--    public boolean solve(char[][] board){--newline--        for(int i = 0; i < board.length; i++){--newline--            for(int j = 0; j < board[0].length; j++){--newline--                if(board[i][j] == '.'){--newline--                    for(char c = '1'; c <= '9'; c++){//trial. Try 1 through 9--newline--                        if(isValid(board, i, j, c)){--newline--                            board[i][j] = c; //Put c for this cell--newline--                            --newline--                            if(solve(board))--newline--                                return true; //If it's the solution return true--newline--                            else--newline--                                board[i][j] = '.'; //Otherwise go back--newline--                        }--newline--                    }--newline--                    --newline--                    return false;--newline--                }--newline--            }--newline--        }--newline--        return true;--newline--    }--newline--    --newline--    private boolean isValid(char[][] board, int row, int col, char c){--newline--        for(int i = 0; i < 9; i++) {--newline--            if(board[i][col] != '.' && board[i][col] == c) return false; //check row--newline--            if(board[row][i] != '.' && board[row][i] == c) return false; //check column--newline--            if(board[3 * (row / 3) + i / 3][ 3 * (col / 3) + i % 3] != '.' && --newline--board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; //check 3*3 block--newline--        }--newline--        return true;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 6, "l_type": "java"}