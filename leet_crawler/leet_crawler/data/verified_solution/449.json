{"solution_code": "public class Codec {--newline--    private static final String SEP = \",\";--newline--    private static final String NULL = \"null\";--newline--    // Encodes a tree to a single string.--newline--    public String serialize(TreeNode root) {--newline--        StringBuilder sb = new StringBuilder();--newline--        if (root == null) return NULL;--newline--        //traverse it recursively if you want to, I am doing it iteratively here--newline--        Stack<TreeNode> st = new Stack<>();--newline--        st.push(root);--newline--        while (!st.empty()) {--newline--            root = st.pop();--newline--            sb.append(root.val).append(SEP);--newline--            if (root.right != null) st.push(root.right);--newline--            if (root.left != null) st.push(root.left);--newline--        }--newline--        return sb.toString();--newline--    }--newline----newline--    // Decodes your encoded data to tree.--newline--    // pre-order traversal--newline--    public TreeNode deserialize(String data) {--newline--        if (data.equals(NULL)) return null;--newline--        String[] strs = data.split(SEP);--newline--        Queue<Integer> q = new LinkedList<>();--newline--        for (String e : strs) {--newline--            q.offer(Integer.parseInt(e));--newline--        }--newline--        return getNode(q);--newline--    }--newline--    --newline--    // some notes:--newline--    //   5--newline--    //  3 6--newline--    // 2   7--newline--    private TreeNode getNode(Queue<Integer> q) { //q: 5,3,2,6,7--newline--        if (q.isEmpty()) return null;--newline--        TreeNode root = new TreeNode(q.poll());//root (5)--newline--        Queue<Integer> samllerQueue = new LinkedList<>();--newline--        while (!q.isEmpty() && q.peek() < root.val) {--newline--            samllerQueue.offer(q.poll());--newline--        }--newline--        //smallerQueue : 3,2   storing elements smaller than 5 (root)--newline--        root.left = getNode(samllerQueue);--newline--        //q: 6,7   storing elements bigger than 5 (root)--newline--        root.right = getNode(q);--newline--        return root;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 62, "l_type": "java"}