{"solution_code": "public class Solution {--newline--    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {--newline--        List<Interval> result = new LinkedList<>();--newline--        int i = 0;--newline--        // add all the intervals ending before newInterval starts--newline--        while (i < intervals.size() && intervals.get(i).end < newInterval.start)--newline--            result.add(intervals.get(i++));--newline--        // merge all overlapping intervals to one considering newInterval--newline--        while (i < intervals.size() && intervals.get(i).start <= newInterval.end) {--newline--            newInterval = new Interval( // we could mutate newInterval here also--newline--                    Math.min(newInterval.start, intervals.get(i).start),--newline--                    Math.max(newInterval.end, intervals.get(i).end));--newline--            i++;--newline--        }--newline--        result.add(newInterval); // add the union of intervals we got--newline--        // add all the rest--newline--        while (i < intervals.size()) result.add(intervals.get(i++)); --newline--        return result;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 154, "l_type": "java"}