{"solution_code": "public class Solution {--newline--    public static List<TreeNode> generateTrees(int n) {--newline--        List<TreeNode>[] result = new List[n + 1];--newline--        result[0] = new ArrayList<TreeNode>();--newline--        if (n == 0) {--newline--            return result[0];--newline--        }--newline--    --newline--        result[0].add(null);--newline--        for (int len = 1; len <= n; len++) {--newline--            result[len] = new ArrayList<TreeNode>();--newline--            for (int j = 0; j < len; j++) {--newline--                for (TreeNode nodeL : result[j]) {--newline--                    for (TreeNode nodeR : result[len - j - 1]) {--newline--                        TreeNode node = new TreeNode(j + 1);--newline--                        node.left = nodeL;--newline--                        node.right = clone(nodeR, j + 1);--newline--                        result[len].add(node);--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        return result[n];--newline--    }--newline--    --newline--    private static TreeNode clone(TreeNode n, int offset) {--newline--        if (n == null) {--newline--            return null;--newline--        }--newline--        TreeNode node = new TreeNode(n.val + offset);--newline--        node.left = clone(n.left, offset);--newline--        node.right = clone(n.right, offset);--newline--        return node;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 9, "l_type": "java"}