{"solution_code": "public class Solution {--newline--    public int findMaximizedCapital(int k, int W, int[] Profits, int[] Capital) {--newline--        PriorityQueue<int[]> pqCap = new PriorityQueue<>((a, b) -> (a[0] - b[0]));--newline--        PriorityQueue<int[]> pqPro  = new PriorityQueue<>((a, b) -> (b[1] - a[1]));--newline--        --newline--        for (int i = 0; i < Profits.length; i++) {--newline--            pqCap.add(new int[] {Capital[i], Profits[i]});--newline--        }--newline--        --newline--        for (int i = 0; i < k; i++) {--newline--            while (!pqCap.isEmpty() && pqCap.peek()[0] <= W) {--newline--                pqPro.add(pqCap.poll());--newline--            }--newline--            --newline--            if (pqPro.isEmpty()) break;--newline--            --newline--            W += pqPro.poll()[1];--newline--        }--newline--        --newline--        return W;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 31, "l_type": "java"}