{"solution_code": "public class Solution {--newline--    public String shortestPalindrome(String s) {--newline--        String temp = s + \"#\" + new StringBuilder(s).reverse().toString();--newline--        int[] table = getTable(temp);--newline--        --newline--        //get the maximum palin part in s starts from 0--newline--        return new StringBuilder(s.substring(table[table.length - 1])).reverse().toString() + s;--newline--    }--newline--    --newline--    public int[] getTable(String s){--newline--        //get lookup table--newline--        int[] table = new int[s.length()];--newline--        --newline--        //pointer that points to matched char in prefix part--newline--        --newline--        int index = 0;--newline--        //skip index 0, we will not match a string with itself--newline--        for(int i = 1; i < s.length(); i++){--newline--            if(s.charAt(index) == s.charAt(i)){--newline--                //we can extend match in prefix and postfix--newline--                table[i] = table[i-1] + 1;--newline--                index ++;--newline--            }else{--newline--                //match failed, we try to match a shorter substring--newline--                --newline--                //by assigning index to table[i-1], we will shorten the match string length, and jump to the --newline--                //prefix part that we used to match postfix ended at i - 1--newline--                index = table[i-1];--newline--                --newline--                while(index > 0 && s.charAt(index) != s.charAt(i)){--newline--                    //we will try to shorten the match string length until we revert to the beginning of match (index 1)--newline--                    index = table[index-1];--newline--                }--newline--                --newline--                //when we are here may either found a match char or we reach the boundary and still no luck--newline--                //so we need check char match--newline--                if(s.charAt(index) == s.charAt(i)){--newline--                    //if match, then extend one char --newline--                    index ++ ;--newline--                }--newline--                --newline--                table[i] = index;--newline--            }--newline--            --newline--        }--newline--        --newline--        return table;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 120, "l_type": "java"}