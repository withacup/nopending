{"solution_code": "public class Solution {--newline--        public List<int[]> getSkyline(int[][] buildings) {--newline--        List<int[]> result = new ArrayList<>();--newline--        List<int[]> height = new ArrayList<>();--newline--        for(int[] b:buildings) {--newline--            height.add(new int[]{b[0], -b[2]});--newline--            height.add(new int[]{b[1], b[2]});--newline--        }--newline--        Collections.sort(height, (a, b) -> {--newline--                if(a[0] != b[0]) --newline--                    return a[0] - b[0];--newline--                return a[1] - b[1];--newline--        });--newline--        Queue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a));--newline--        pq.offer(0);--newline--        int prev = 0;--newline--        for(int[] h:height) {--newline--            if(h[1] < 0) {--newline--                pq.offer(-h[1]);--newline--            } else {--newline--                pq.remove(h[1]);--newline--            }--newline--            int cur = pq.peek();--newline--            if(prev != cur) {--newline--                result.add(new int[]{h[0], cur});--newline--                prev = cur;--newline--            }--newline--        }--newline--        return result;--newline--    }--newline--}", "modified_code": null, "total_cases": 36, "l_type": "java"}