{"solution_code": "public class Solution {--newline--    public List<Integer> findAnagrams(String s, String p) {--newline--        List<Integer> list = new ArrayList<>();--newline--        if (s == null || s.length() == 0 || p == null || p.length() == 0) return list;--newline--        int[] hash = new int[256]; //character hash--newline--        //record each character in p to hash--newline--        for (char c : p.toCharArray()) {--newline--            hash[c]++;--newline--        }--newline--        //two points, initialize count to p's length--newline--        int left = 0, right = 0, count = p.length();--newline--        while (right < s.length()) {--newline--            //move right everytime, if the character exists in p's hash, decrease the count--newline--            //current hash value >= 1 means the character is existing in p--newline--            if (hash[s.charAt(right++)]-- >= 1) count--; --newline--            --newline--            //when the count is down to 0, means we found the right anagram--newline--            //then add window's left to result list--newline--            if (count == 0) list.add(left);--newline--        --newline--            //if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window--newline--            //++ to reset the hash because we kicked out the left--newline--            //only increase the count if the character is in p--newline--            //the count >= 0 indicate it was original in the hash, cuz it won't go below 0--newline--            if (right - left == p.length() && hash[s.charAt(left++)]++ >= 0) count++;--newline--        }--newline--        return list;--newline--    }--newline--}", "modified_code": null, "total_cases": 36, "l_type": "java"}