{
    "solution_code": "class TrieNode {--newline--    public char val;--newline--    public boolean isWord; --newline--    public TrieNode[] children = new TrieNode[26];--newline--    public TrieNode() {}--newline--    TrieNode(char c){--newline--        TrieNode node = new TrieNode();--newline--        node.val = c;--newline--    }--newline--}--newline----newline--public class Trie {--newline--    private TrieNode root;--newline--    public Trie() {--newline--        root = new TrieNode();--newline--        root.val = ' ';--newline--    }--newline----newline--    public void insert(String word) {--newline--        TrieNode ws = root;--newline--        for(int i = 0; i < word.length(); i++){--newline--            char c = word.charAt(i);--newline--            if(ws.children[c - 'a'] == null){--newline--                ws.children[c - 'a'] = new TrieNode(c);--newline--            }--newline--            ws = ws.children[c - 'a'];--newline--        }--newline--        ws.isWord = true;--newline--    }--newline----newline--    public boolean search(String word) {--newline--        TrieNode ws = root; --newline--        for(int i = 0; i < word.length(); i++){--newline--            char c = word.charAt(i);--newline--            if(ws.children[c - 'a'] == null) return false;--newline--            ws = ws.children[c - 'a'];--newline--        }--newline--        return ws.isWord;--newline--    }--newline----newline--    public boolean startsWith(String prefix) {--newline--        TrieNode ws = root; --newline--        for(int i = 0; i < prefix.length(); i++){--newline--            char c = prefix.charAt(i);--newline--            if(ws.children[c - 'a'] == null) return false;--newline--            ws = ws.children[c - 'a'];--newline--        }--newline--        return true;--newline--    }--newline--}--newline--",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 14
}