{"solution_code": "    public class Solution {--newline--    public int wiggleMaxLength(int[] nums) {--newline--        if (nums.length == 0 || nums.length == 1) {--newline--            return nums.length;--newline--        }--newline--        int k = 0;--newline--        while (k < nums.length - 1 && nums[k] == nums[k + 1]) {  //Skips all the same numbers from series beginning eg 5, 5, 5, 1--newline--            k++;--newline--        }--newline--        if (k == nums.length - 1) {--newline--            return 1;--newline--        }--newline--        int result = 2;     // This will track the result of result array--newline--        boolean smallReq = nums[k] < nums[k + 1];       //To check series starting pattern--newline--        for (int i = k + 1; i < nums.length - 1; i++) {--newline--            if (smallReq && nums[i + 1] < nums[i]) {--newline--                nums[result] = nums[i + 1];--newline--                result++;--newline--                smallReq = !smallReq;    //Toggle the requirement from small to big number--newline--            } else {--newline--                if (!smallReq && nums[i + 1] > nums[i]) {--newline--                    nums[result] = nums[i + 1];--newline--                    result++;--newline--                    smallReq = !smallReq;    //Toggle the requirement from big to small number--newline--                }--newline--            }--newline--        }--newline--        return result;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 24, "l_type": "java"}