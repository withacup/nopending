{"solution_code": "public class Solution {--newline--    Map<Integer, Boolean> map;--newline--    boolean[] used;--newline--    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {--newline--        int sum = (1+maxChoosableInteger)*maxChoosableInteger/2;--newline--        if(sum < desiredTotal) return false;--newline--        if(desiredTotal <= 0) return true;--newline--        --newline--        map = new HashMap();--newline--        used = new boolean[maxChoosableInteger+1];--newline--        return helper(desiredTotal);--newline--    }--newline--    --newline--    public boolean helper(int desiredTotal){--newline--        if(desiredTotal <= 0) return false;--newline--        int key = format(used);--newline--        if(!map.containsKey(key)){--newline--    // try every unchosen number as next step--newline--            for(int i=1; i<used.length; i++){--newline--                if(!used[i]){--newline--                    used[i] = true;--newline--     // check whether this lead to a win (i.e. the other player lose)--newline--                    if(!helper(desiredTotal-i)){--newline--                        map.put(key, true);--newline--                        used[i] = false;--newline--                        return true;--newline--                    }--newline--                    used[i] = false;--newline--                }--newline--            }--newline--            map.put(key, false);--newline--        }--newline--        return map.get(key);--newline--    }--newline--   --newline--// transfer boolean[] to an Integer --newline--    public int format(boolean[] used){--newline--        int num = 0;--newline--        for(boolean b: used){--newline--            num <<= 1;--newline--            if(b) num |= 1;--newline--        }--newline--        return num;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 54, "l_type": "java"}