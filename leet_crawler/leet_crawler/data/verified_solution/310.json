{"solution_code": "public class Solution {--newline--    public List<Integer> findMinHeightTrees(int n, int[][] edges) {--newline--        if (n == 1) return Collections.singletonList(0);--newline--    --newline--        List<Set<Integer>> adj = new ArrayList<>(n);--newline--        for (int i = 0; i < n; ++i) adj.add(new HashSet<>());--newline--        for (int[] edge : edges) {--newline--            adj.get(edge[0]).add(edge[1]);--newline--            adj.get(edge[1]).add(edge[0]);--newline--        }--newline--    --newline--        List<Integer> leaves = new ArrayList<>();--newline--        for (int i = 0; i < n; ++i)--newline--            if (adj.get(i).size() == 1) leaves.add(i);--newline--    --newline--        while (n > 2) {--newline--            n -= leaves.size();--newline--            List<Integer> newLeaves = new ArrayList<>();--newline--            for (int i : leaves) {--newline--                int j = adj.get(i).iterator().next();--newline--                adj.get(j).remove(i);--newline--                if (adj.get(j).size() == 1) newLeaves.add(j);--newline--            }--newline--            leaves = newLeaves;--newline--        }--newline--        return leaves;--newline--    }--newline--    --newline--    // Runtime: 53 ms--newline--    --newline--}", "modified_code": null, "total_cases": 66, "l_type": "java"}