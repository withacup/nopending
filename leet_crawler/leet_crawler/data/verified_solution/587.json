{"solution_code": "public class Solution {--newline--    public List<Point> outerTrees(Point[] points) {--newline--        Set<Point> result = new HashSet<>();--newline--        --newline--        // Find the leftmost point--newline--        Point first = points[0];--newline--        int firstIndex = 0;--newline--        for (int i = 1; i < points.length; i++) {--newline--            if (points[i].x < first.x) {--newline--                first = points[i];--newline--                firstIndex = i;--newline--            }--newline--        }--newline--        result.add(first);--newline--        --newline--        Point cur = first;--newline--        int curIndex = firstIndex;--newline--        do {--newline--            Point next = points[0];--newline--            int nextIndex = 0;--newline--            for (int i = 1; i < points.length; i++) {--newline--                if (i == curIndex) continue;--newline--                int cross = crossProductLength(cur, points[i], next);--newline--                if (nextIndex == curIndex || cross > 0 ||--newline--                        // Handle collinear points--newline--                        (cross == 0 && distance(points[i], cur) > distance(next, cur))) {--newline--                    next = points[i];--newline--                    nextIndex = i;--newline--                }--newline--            }--newline--            // Handle collinear points--newline--            for (int i = 0; i < points.length; i++) {--newline--                if (i == curIndex) continue;--newline--                int cross = crossProductLength(cur, points[i], next);--newline--                if (cross == 0) {--newline--                    result.add(points[i]);--newline--                }--newline--            }--newline----newline--            cur = next;--newline--            curIndex = nextIndex;--newline--            --newline--        } while (curIndex != firstIndex);--newline--        --newline--        return new ArrayList<Point>(result);--newline--    }--newline--    --newline--    private int crossProductLength(Point A, Point B, Point C) {--newline--        // Get the vectors' coordinates.--newline--        int BAx = A.x - B.x;--newline--        int BAy = A.y - B.y;--newline--        int BCx = C.x - B.x;--newline--        int BCy = C.y - B.y;--newline--    --newline--        // Calculate the Z coordinate of the cross product.--newline--        return (BAx * BCy - BAy * BCx);--newline--    }--newline----newline--    private int distance(Point p1, Point p2) {--newline--        return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 82, "l_type": "java"}