{"solution_code": "public class Solution {--newline--    public List<List<Integer>> levelOrder(TreeNode root) {--newline--        Queue<TreeNode> queue = new LinkedList<TreeNode>();--newline--        List<List<Integer>> wrapList = new LinkedList<List<Integer>>();--newline--        --newline--        if(root == null) return wrapList;--newline--        --newline--        queue.offer(root);--newline--        while(!queue.isEmpty()){--newline--            int levelNum = queue.size();--newline--            List<Integer> subList = new LinkedList<Integer>();--newline--            for(int i=0; i<levelNum; i++) {--newline--                if(queue.peek().left != null) queue.offer(queue.peek().left);--newline--                if(queue.peek().right != null) queue.offer(queue.peek().right);--newline--                subList.add(queue.poll().val);--newline--            }--newline--            wrapList.add(subList);--newline--        }--newline--        return wrapList;--newline--    }--newline--}", "modified_code": null, "total_cases": 34, "l_type": "java"}