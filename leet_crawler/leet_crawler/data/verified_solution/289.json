{"solution_code": "public class Solution {--newline--    public void gameOfLife(int[][] board) {--newline--        if (board == null || board.length == 0) return;--newline--        int m = board.length, n = board[0].length;--newline--    --newline--        for (int i = 0; i < m; i++) {--newline--            for (int j = 0; j < n; j++) {--newline--                int lives = liveNeighbors(board, m, n, i, j);--newline--    --newline--                // In the beginning, every 2nd bit is 0;--newline--                // So we only need to care about when will the 2nd bit become 1.--newline--                if (board[i][j] == 1 && lives >= 2 && lives <= 3) {  --newline--                    board[i][j] = 3; // Make the 2nd bit 1: 01 ---> 11--newline--                }--newline--                if (board[i][j] == 0 && lives == 3) {--newline--                    board[i][j] = 2; // Make the 2nd bit 1: 00 ---> 10--newline--                }--newline--            }--newline--        }--newline--    --newline--        for (int i = 0; i < m; i++) {--newline--            for (int j = 0; j < n; j++) {--newline--                board[i][j] >>= 1;  // Get the 2nd state.--newline--            }--newline--        }--newline--    }--newline--    --newline--    public int liveNeighbors(int[][] board, int m, int n, int i, int j) {--newline--        int lives = 0;--newline--        for (int x = Math.max(i - 1, 0); x <= Math.min(i + 1, m - 1); x++) {--newline--            for (int y = Math.max(j - 1, 0); y <= Math.min(j + 1, n - 1); y++) {--newline--                lives += board[x][y] & 1;--newline--            }--newline--        }--newline--        lives -= board[i][j] & 1;--newline--        return lives;--newline--    }--newline--}", "modified_code": null, "total_cases": 22, "l_type": "java"}