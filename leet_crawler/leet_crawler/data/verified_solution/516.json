{"solution_code": "public class Solution {--newline--    public int longestPalindromeSubseq(String s) {--newline--        return helper(s, 0, s.length() - 1, new Integer[s.length()][s.length()]);--newline--    }--newline--    --newline--    private int helper(String s, int i, int j, Integer[][] memo) {--newline--        if (memo[i][j] != null) {--newline--            return memo[i][j];--newline--        }--newline--        if (i > j)      return 0;--newline--        if (i == j)     return 1;--newline--        --newline--        if (s.charAt(i) == s.charAt(j)) {--newline--            memo[i][j] = helper(s, i + 1, j - 1, memo) + 2;--newline--        } else {--newline--            memo[i][j] = Math.max(helper(s, i + 1, j, memo), helper(s, i, j - 1, memo));--newline--        }--newline--        return memo[i][j];--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 83, "l_type": "java"}