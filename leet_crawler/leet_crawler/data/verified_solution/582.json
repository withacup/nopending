{"solution_code": "public class Solution {--newline--    public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {--newline--        --newline--        // Store process tree as an adjacency list--newline--        Map<Integer, List<Integer>> adjacencyLists = new HashMap<>();--newline--        for (int i=0;i<ppid.size();i++) {--newline--            adjacencyLists.putIfAbsent(ppid.get(i), new LinkedList<>());--newline--            adjacencyLists.get(ppid.get(i)).add(pid.get(i));--newline--        }--newline--        --newline--        // Kill all processes in the subtree rooted at process \"kill\"--newline--        List<Integer> res = new LinkedList<>();--newline--        Stack<Integer> stack = new Stack<>();--newline--        stack.add(kill);--newline--        while (!stack.isEmpty()) {--newline--            int cur = stack.pop();--newline--            res.add(cur);--newline--            List<Integer> adjacencyList = adjacencyLists.get(cur);--newline--            if (adjacencyList == null) continue;--newline--            stack.addAll(adjacencyList);--newline--        }--newline--        return res;   --newline--    --newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 166, "l_type": "java"}