{"solution_code": "public class Solution {--newline--    public List<List<String>> solveNQueens(int n) {--newline--        char[][] board = new char[n][n];--newline--        for(int i = 0; i < n; i++)--newline--            for(int j = 0; j < n; j++)--newline--                board[i][j] = '.';--newline--        List<List<String>> res = new ArrayList<List<String>>();--newline--        dfs(board, 0, res);--newline--        return res;--newline--    }--newline--    --newline--    private void dfs(char[][] board, int colIndex, List<List<String>> res) {--newline--        if(colIndex == board.length) {--newline--            res.add(construct(board));--newline--            return;--newline--        }--newline--        --newline--        for(int i = 0; i < board.length; i++) {--newline--            if(validate(board, i, colIndex)) {--newline--                board[i][colIndex] = 'Q';--newline--                dfs(board, colIndex + 1, res);--newline--                board[i][colIndex] = '.';--newline--            }--newline--        }--newline--    }--newline--    --newline--    private boolean validate(char[][] board, int x, int y) {--newline--        for(int i = 0; i < board.length; i++) {--newline--            for(int j = 0; j < y; j++) {--newline--                if(board[i][j] == 'Q' && (x + j == y + i || x + y == i + j || x == i))--newline--                    return false;--newline--            }--newline--        }--newline--        --newline--        return true;--newline--    }--newline--    --newline--    private List<String> construct(char[][] board) {--newline--        List<String> res = new LinkedList<String>();--newline--        for(int i = 0; i < board.length; i++) {--newline--            String s = new String(board[i]);--newline--            res.add(s);--newline--        }--newline--        return res;--newline--    }--newline--}", "modified_code": null, "total_cases": 9, "l_type": "java"}