{"solution_code": "public class Solution {--newline--    public static List<String> findAllConcatenatedWordsInADict(String[] words) {--newline--        List<String> result = new ArrayList<>();--newline--        Set<String> preWords = new HashSet<>();--newline--        Arrays.sort(words, new Comparator<String>() {--newline--            public int compare (String s1, String s2) {--newline--                return s1.length() - s2.length();--newline--            }--newline--        });--newline--        --newline--        for (int i = 0; i < words.length; i++) {--newline--            if (canForm(words[i], preWords)) {--newline--                result.add(words[i]);--newline--            }--newline--            preWords.add(words[i]);--newline--        }--newline--        --newline--        return result;--newline--    }--newline--    --newline--    private static boolean canForm(String word, Set<String> dict) {--newline--        if (dict.isEmpty()) return false;--newline--    boolean[] dp = new boolean[word.length() + 1];--newline--    dp[0] = true;--newline--    for (int i = 1; i <= word.length(); i++) {--newline--        for (int j = 0; j < i; j++) {--newline--        if (!dp[j]) continue;--newline--        if (dict.contains(word.substring(j, i))) {--newline--            dp[i] = true;--newline--            break;--newline--        }--newline--        }--newline--    }--newline--    return dp[word.length()];--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 44, "l_type": "java"}