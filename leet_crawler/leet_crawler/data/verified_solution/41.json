{"solution_code": "public class Solution {--newline--     public int firstMissingPositive(int[] A) {--newline--        int n=A.length;--newline--        if(n==0)--newline--            return 1;--newline--        int k=partition(A)+1;--newline--        int temp=0;--newline--        int first_missing_Index=k;--newline--        for(int i=0;i<k;i++){--newline--            temp=Math.abs(A[i]);--newline--            if(temp<=k)--newline--                A[temp-1]=(A[temp-1]<0)?A[temp-1]:-A[temp-1];--newline--        }--newline--        for(int i=0;i<k;i++){--newline--            if(A[i]>0){--newline--                first_missing_Index=i;--newline--                break;--newline--            }--newline--        }--newline--        return first_missing_Index+1;--newline--    }--newline--    --newline--    public int partition(int[] A){--newline--        int n=A.length;--newline--        int q=-1;--newline--        for(int i=0;i<n;i++){--newline--            if(A[i]>0){--newline--                q++;--newline--                swap(A,q,i);--newline--            }--newline--        }--newline--        return q;--newline--    }--newline--    --newline--    public void swap(int[] A, int i, int j){--newline--        if(i!=j){--newline--            A[i]^=A[j];--newline--            A[j]^=A[i];--newline--            A[i]^=A[j];--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 156, "l_type": "java"}