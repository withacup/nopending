{
    "solution_code": "class Solution {--newline--private:--newline--class Trie--newline--{--newline--public:    --newline--    Trie * children[26];--newline--    bool isLeaf;--newline--    int  wordIdx;--newline--    int prefixCount;--newline--    --newline--    Trie()--newline--    {--newline--        isLeaf = false;--newline--        wordIdx = 0;--newline--        prefixCount = 0;--newline--        fill_n(children, 26, nullptr);--newline--    }--newline--    --newline--    ~Trie()--newline--    {--newline--        for(auto i=0; i<26; ++i) delete children[i];--newline--    }--newline--};--newline--    void insertWord(Trie *root,  const vector<string>& words, int idx)--newline--    {--newline--        int i, childID, len = words[idx].size();--newline--        for(i=0, root->prefixCount++ ; i<len; ++i)--newline--        {--newline--            childID = words[idx][i]-'a';--newline--            if(!root->children[childID]) root->children[childID] = new Trie();--newline--            root = root->children[childID];--newline--            ++root->prefixCount;--newline--        }--newline--        root->isLeaf = true; --newline--        root->wordIdx = idx;--newline--    }--newline--    --newline--    Trie *buildTrie(const vector<string> &words)--newline--    {--newline--        Trie *root = new Trie();--newline--        for(int i=0; i < words.size(); ++i) insertWord(root, words, i);--newline--        return root;--newline--    }--newline--    --newline--    int dfs_Trie(vector<string> &res, Trie *root, vector<vector<char>>& board, vector<string>& words, int row, int col)--newline--    {--newline--        int detected = 0;--newline----newline--        if(root->isLeaf)--newline--        {--newline--            ++detected;--newline--            root->isLeaf = false;--newline--            res.push_back(words[root->wordIdx]);--newline--        }--newline--        --newline--        if( row<0 || row>=board.size() || col<0 || col>=board[0].size() || board[row][col]=='*' || !root->children[ board[row][col]-'a'] || root->children[ board[row][col]-'a']->prefixCount <= 0 ) return detected;--newline--        int curC = board[row][col] - 'a';--newline--        board[row][col] = '*';--newline--        detected += dfs_Trie(res, root->children[curC], board, words, row-1, col) + --newline--               dfs_Trie(res, root->children[curC], board, words, row+1, col) +    --newline--               dfs_Trie(res, root->children[curC], board, words, row, col - 1) +    --newline--               dfs_Trie(res, root->children[curC], board, words, row, col + 1) ;--newline--        root->prefixCount -=detected;--newline--        board[row][col] = curC+'a';--newline--        return detected;--newline--    }--newline--    --newline--public:--newline--    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {--newline--        int M, N, wordNum = words.size();--newline--        vector<string> res;--newline--        if( !(M = board.size()) || !(N = board[0].size()) || !wordNum) return res;--newline--        Trie *root = buildTrie(words);--newline--        for(auto i=0; i<M && root->prefixCount; ++i)--newline--            for(auto j=0; j<N; ++j)--newline--                dfs_Trie(res, root, board, words, i, j);--newline--        delete root;--newline--        return res;--newline--    }--newline--};",
    "l_type": "cpp",
    "modified_code": null,
    "total_cases": 37
}