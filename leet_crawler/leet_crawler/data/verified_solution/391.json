{"solution_code": "public class Solution {--newline--    public boolean isRectangleCover(int[][] rectangles) {--newline--    --newline--            if (rectangles.length == 0 || rectangles[0].length == 0) return false;--newline--    --newline--            int x1 = Integer.MAX_VALUE;--newline--            int x2 = Integer.MIN_VALUE;--newline--            int y1 = Integer.MAX_VALUE;--newline--            int y2 = Integer.MIN_VALUE;--newline--            --newline--            HashSet<String> set = new HashSet<String>();--newline--            int area = 0;--newline--            --newline--            for (int[] rect : rectangles) {--newline--                x1 = Math.min(rect[0], x1);--newline--                y1 = Math.min(rect[1], y1);--newline--                x2 = Math.max(rect[2], x2);--newline--                y2 = Math.max(rect[3], y2);--newline--                --newline--                area += (rect[2] - rect[0]) * (rect[3] - rect[1]);--newline--                --newline--                String s1 = rect[0] + \" \" + rect[1];--newline--                String s2 = rect[0] + \" \" + rect[3];--newline--                String s3 = rect[2] + \" \" + rect[3];--newline--                String s4 = rect[2] + \" \" + rect[1];--newline--                --newline--                if (!set.add(s1)) set.remove(s1);--newline--                if (!set.add(s2)) set.remove(s2);--newline--                if (!set.add(s3)) set.remove(s3);--newline--                if (!set.add(s4)) set.remove(s4);--newline--            }--newline--            --newline--            if (!set.contains(x1 + \" \" + y1) || !set.contains(x1 + \" \" + y2) || !set.contains(x2 + \" \" + y1) || !set.contains(x2 + \" \" + y2) || set.size() != 4) return false;--newline--            --newline--            return area == (x2-x1) * (y2-y1);--newline--        }--newline--    --newline--}", "modified_code": null, "total_cases": 46, "l_type": "java"}