{"solution_code": "public class Solution {--newline--    public static final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};--newline--    --newline--    public int longestIncreasingPath(int[][] matrix) {--newline--        if(matrix.length == 0) return 0;--newline--        int m = matrix.length, n = matrix[0].length;--newline--        int[][] cache = new int[m][n];--newline--        int max = 1;--newline--        for(int i = 0; i < m; i++) {--newline--            for(int j = 0; j < n; j++) {--newline--                int len = dfs(matrix, i, j, m, n, cache);--newline--                max = Math.max(max, len);--newline--            }--newline--        }   --newline--        return max;--newline--    }--newline--    --newline--    public int dfs(int[][] matrix, int i, int j, int m, int n, int[][] cache) {--newline--        if(cache[i][j] != 0) return cache[i][j];--newline--        int max = 1;--newline--        for(int[] dir: dirs) {--newline--            int x = i + dir[0], y = j + dir[1];--newline--            if(x < 0 || x >= m || y < 0 || y >= n || matrix[x][y] <= matrix[i][j]) continue;--newline--            int len = 1 + dfs(matrix, x, y, m, n, cache);--newline--            max = Math.max(max, len);--newline--        }--newline--        cache[i][j] = max;--newline--        return max;--newline--    }--newline--}", "modified_code": null, "total_cases": 137, "l_type": "java"}