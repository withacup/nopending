{"solution_code": "public class Solution {--newline--    public List<String> addOperators(String num, int target) {--newline--        List<String> rst = new ArrayList<String>();--newline--        if(num == null || num.length() == 0) return rst;--newline--        helper(rst, \"\", num, target, 0, 0, 0);--newline--        return rst;--newline--    }--newline--    public void helper(List<String> rst, String path, String num, int target, int pos, long eval, long multed){--newline--        if(pos == num.length()){--newline--            if(target == eval)--newline--                rst.add(path);--newline--            return;--newline--        }--newline--        for(int i = pos; i < num.length(); i++){--newline--            if(i != pos && num.charAt(pos) == '0') break;--newline--            long cur = Long.parseLong(num.substring(pos, i + 1));--newline--            if(pos == 0){--newline--                helper(rst, path + cur, num, target, i + 1, cur, cur);--newline--            }--newline--            else{--newline--                helper(rst, path + \"+\" + cur, num, target, i + 1, eval + cur , cur);--newline--                --newline--                helper(rst, path + \"-\" + cur, num, target, i + 1, eval -cur, -cur);--newline--                --newline--                helper(rst, path + \"*\" + cur, num, target, i + 1, eval - multed + multed * cur, multed * cur );--newline--            }--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 20, "l_type": "java"}