{
    "solution_code": "public class BSTIterator {--newline--    private Stack<TreeNode> stack = new Stack<TreeNode>();--newline--    --newline--    public BSTIterator(TreeNode root) {--newline--        pushAll(root);--newline--    }--newline----newline--    /** @return whether we have a next smallest number */--newline--    public boolean hasNext() {--newline--        return !stack.isEmpty();--newline--    }--newline----newline--    /** @return the next smallest number */--newline--    public int next() {--newline--        TreeNode tmpNode = stack.pop();--newline--        pushAll(tmpNode.right);--newline--        return tmpNode.val;--newline--    }--newline--    --newline--    private void pushAll(TreeNode node) {--newline--        for (; node != null; stack.push(node), node = node.left);--newline--    }--newline--}--newline--",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 61
}