{
    "solution_code": "public class AllOne {--newline--    // maintain a doubly linked list of Buckets--newline--    private Bucket head;--newline--    private Bucket tail;--newline--    // for accessing a specific Bucket among the Bucket list in O(1) time--newline--    private Map<Integer, Bucket> countBucketMap;--newline--    // keep track of count of keys--newline--    private Map<String, Integer> keyCountMap;--newline----newline--    // each Bucket contains all the keys with the same count--newline--    private class Bucket {--newline--        int count;--newline--        Set<String> keySet;--newline--        Bucket next;--newline--        Bucket pre;--newline--        public Bucket(int cnt) {--newline--            count = cnt;--newline--            keySet = new HashSet<>();--newline--        }--newline--    }--newline----newline--    /** Initialize your data structure here. */--newline--    public AllOne() {--newline--        head = new Bucket(Integer.MIN_VALUE);--newline--        tail = new Bucket(Integer.MAX_VALUE);--newline--        head.next = tail;--newline--        tail.pre = head;--newline--        countBucketMap = new HashMap<>();--newline--        keyCountMap = new HashMap<>();--newline--    }--newline--    --newline--    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */--newline--    public void inc(String key) {--newline--        if (keyCountMap.containsKey(key)) {--newline--            changeKey(key, 1);--newline--        } else {--newline--            keyCountMap.put(key, 1);--newline--            if (head.next.count != 1) --newline--                addBucketAfter(new Bucket(1), head);--newline--            head.next.keySet.add(key);--newline--            countBucketMap.put(1, head.next);--newline--        }--newline--    }--newline--    --newline--    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */--newline--    public void dec(String key) {--newline--        if (keyCountMap.containsKey(key)) {--newline--            int count = keyCountMap.get(key);--newline--            if (count == 1) {--newline--                keyCountMap.remove(key);--newline--                removeKeyFromBucket(countBucketMap.get(count), key);--newline--            } else {--newline--                changeKey(key, -1);--newline--            }--newline--        }--newline--    }--newline--    --newline--    /** Returns one of the keys with maximal value. */--newline--    public String getMaxKey() {--newline--        return tail.pre == head ? \"\" : (String) tail.pre.keySet.iterator().next();--newline--    }--newline--    --newline--    /** Returns one of the keys with Minimal value. */--newline--    public String getMinKey() {--newline--        return head.next == tail ? \"\" : (String) head.next.keySet.iterator().next();        --newline--    }--newline--    --newline--    // helper function to make change on given key according to offset--newline--    private void changeKey(String key, int offset) {--newline--        int count = keyCountMap.get(key);--newline--        keyCountMap.put(key, count + offset);--newline--        Bucket curBucket = countBucketMap.get(count);--newline--        Bucket newBucket;--newline--        if (countBucketMap.containsKey(count + offset)) {--newline--            // target Bucket already exists--newline--            newBucket = countBucketMap.get(count + offset);--newline--        } else {--newline--            // add new Bucket--newline--            newBucket = new Bucket(count + offset);--newline--            countBucketMap.put(count + offset, newBucket);--newline--            addBucketAfter(newBucket, offset == 1 ? curBucket : curBucket.pre);--newline--        }--newline--        newBucket.keySet.add(key);--newline--        removeKeyFromBucket(curBucket, key);--newline--    }--newline--    --newline--    private void removeKeyFromBucket(Bucket bucket, String key) {--newline--        bucket.keySet.remove(key);--newline--        if (bucket.keySet.size() == 0) {--newline--            removeBucketFromList(bucket);--newline--            countBucketMap.remove(bucket.count);--newline--        }--newline--    }--newline--    --newline--    private void removeBucketFromList(Bucket bucket) {--newline--        bucket.pre.next = bucket.next;--newline--        bucket.next.pre = bucket.pre;--newline--        bucket.next = null;--newline--        bucket.pre = null;--newline--    }--newline--    --newline--    // add newBucket after preBucket--newline--    private void addBucketAfter(Bucket newBucket, Bucket preBucket) {--newline--        newBucket.pre = preBucket;--newline--        newBucket.next = preBucket.next;--newline--        preBucket.next.pre = newBucket;--newline--        preBucket.next = newBucket;--newline--    }--newline--}--newline--",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 15
}