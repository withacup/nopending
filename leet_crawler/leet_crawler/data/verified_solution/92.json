{"solution_code": "public class Solution {--newline--    public ListNode reverseBetween(ListNode head, int m, int n) {--newline--        if(head == null) return null;--newline--        ListNode dummy = new ListNode(0); // create a dummy node to mark the head of this list--newline--        dummy.next = head;--newline--        ListNode pre = dummy; // make a pointer pre as a marker for the node before reversing--newline--        for(int i = 0; i<m-1; i++) pre = pre.next;--newline--        --newline--        ListNode start = pre.next; // a pointer to the beginning of a sub-list that will be reversed--newline--        ListNode then = start.next; // a pointer to a node that will be reversed--newline--        --newline--        // 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---> pre = 1, start = 2, then = 3--newline--        // dummy-> 1 -> 2 -> 3 -> 4 -> 5--newline--        --newline--        for(int i=0; i<n-m; i++)--newline--        {--newline--            start.next = then.next;--newline--            then.next = pre.next;--newline--            pre.next = then;--newline--            then = start.next;--newline--        }--newline--        --newline--        // first reversing : dummy->1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4--newline--        // second reversing: dummy->1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)--newline--        --newline--        return dummy.next;--newline--        --newline--    }--newline--}", "modified_code": null, "total_cases": 44, "l_type": "java"}