{
    "total_cases": 146,
    "modified_code": null,
    "l_type": "java",
    "solution_code": "public class Solution {--newline--    public int smallestFactorization(int n) {--newline--        // Case 1: If number is smaller than 10--newline--        if (n < 10) return n;--newline--        --newline--        // Case 2: Start with 9 and try every possible digit--newline--        List<Integer> res = new ArrayList<>();--newline--        for (int i = 9; i > 1; i--) {--newline--            // If current digit divides n, then store all--newline--            // occurrences of current digit in res--newline--            while (n % i == 0) {--newline--                n = n / i;--newline--                res.add(i);--newline--            }--newline--        }--newline----newline--        // If n could not be broken in form of digits--newline--        if (n != 1) return 0;--newline----newline--        // Get the result from the array in reverse order--newline--        long result = 0;--newline--        for (int i = res.size() - 1; i >= 0; i--) {--newline--            result = result * 10 + res.get(i);--newline--            if (result > Integer.MAX_VALUE) return 0;--newline--        }--newline--        --newline--        return (int)result;--newline--    }--newline--}--newline--"
}