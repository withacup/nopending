{
    "solution_code": "public class WordDictionary {--newline--    public class TrieNode {--newline--        public TrieNode[] children = new TrieNode[26];--newline--        public String item = \"\";--newline--    }--newline--    --newline--    private TrieNode root = new TrieNode();--newline----newline--    public void addWord(String word) {--newline--        TrieNode node = root;--newline--        for (char c : word.toCharArray()) {--newline--            if (node.children[c - 'a'] == null) {--newline--                node.children[c - 'a'] = new TrieNode();--newline--            }--newline--            node = node.children[c - 'a'];--newline--        }--newline--        node.item = word;--newline--    }--newline----newline--    public boolean search(String word) {--newline--        return match(word.toCharArray(), 0, root);--newline--    }--newline--    --newline--    private boolean match(char[] chs, int k, TrieNode node) {--newline--        if (k == chs.length) return !node.item.equals(\"\");   --newline--        if (chs[k] != '.') {--newline--            return node.children[chs[k] - 'a'] != null && match(chs, k + 1, node.children[chs[k] - 'a']);--newline--        } else {--newline--            for (int i = 0; i < node.children.length; i++) {--newline--                if (node.children[i] != null) {--newline--                    if (match(chs, k + 1, node.children[i])) {--newline--                        return true;--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        return false;--newline--    }--newline--}",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 13
}