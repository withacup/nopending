{"solution_code": "public class Solution {--newline--    public int maximalRectangle(char[][] matrix) {--newline--        if (matrix==null||matrix.length==0||matrix[0].length==0)--newline--            return 0;--newline--        int cLen = matrix[0].length;    // column length--newline--        int rLen = matrix.length;       // row length--newline--        // height array --newline--        int[] h = new int[cLen+1];--newline--        h[cLen]=0;--newline--        int max = 0;--newline--        --newline--        --newline--        for (int row=0;row<rLen;row++) {--newline--            Stack<Integer> s = new Stack<Integer>();--newline--            for (int i=0;i<cLen+1;i++) {--newline--                if (i<cLen)--newline--                    if(matrix[row][i]=='1')--newline--                        h[i]+=1;--newline--                    else h[i]=0;--newline--                --newline--                if (s.isEmpty()||h[s.peek()]<=h[i])--newline--                    s.push(i);--newline--                else {--newline--                    while(!s.isEmpty()&&h[i]<h[s.peek()]){--newline--                        int top = s.pop();--newline--                        int area = h[top]*(s.isEmpty()?i:(i-s.peek()-1));--newline--                        if (area>max)--newline--                            max = area;--newline--                    }--newline--                    s.push(i);--newline--                }--newline--            }--newline--        }--newline--        return max;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 66, "l_type": "java"}