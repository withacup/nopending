{"solution_code": "public class Solution {--newline--    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {--newline--        long[] lengths = {length(p1, p2), length(p2, p3), length(p3, p4),--newline--                length(p4, p1), length(p1, p3),length(p2, p4)}; // all 6 sides--newline--    --newline--        long max = 0, nonMax = 0;--newline--        for(long len : lengths) {--newline--            max = Math.max(max, len);--newline--        }--newline--        int count = 0;--newline--        for(int i = 0; i < lengths.length; i++) {--newline--            if(lengths[i] == max) count++;--newline--            else nonMax = lengths[i]; // non diagonal side.--newline--        }--newline--        if(count != 2) return false; // diagonals lenghts have to be same.--newline--    --newline--        for(long len : lengths) {--newline--            if(len != max && len != nonMax) return false; // sides have to be same length--newline--        }--newline--        return true;--newline--    }--newline--    private long length(int[] p1, int[] p2) {--newline--        return (long)Math.pow(p1[0]-p2[0],2) + (long)Math.pow(p1[1]-p2[1], 2);--newline--    }--newline--}", "modified_code": null, "total_cases": 244, "l_type": "java"}