{"solution_code": "public class Solution {--newline--    public int longestConsecutive(int[] num) {--newline--        int res = 0;--newline--        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();--newline--        for (int n : num) {--newline--            if (!map.containsKey(n)) {--newline--                int left = (map.containsKey(n - 1)) ? map.get(n - 1) : 0;--newline--                int right = (map.containsKey(n + 1)) ? map.get(n + 1) : 0;--newline--                // sum: length of the sequence n is in--newline--                int sum = left + right + 1;--newline--                map.put(n, sum);--newline--                --newline--                // keep track of the max length --newline--                res = Math.max(res, sum);--newline--                --newline--                // extend the length to the boundary(s)--newline--                // of the sequence--newline--                // will do nothing if n has no neighbors--newline--                map.put(n - left, sum);--newline--                map.put(n + right, sum);--newline--            }--newline--            else {--newline--                // duplicates--newline--                continue;--newline--            }--newline--        }--newline--        return res;--newline--    }--newline--}", "modified_code": null, "total_cases": 68, "l_type": "java"}