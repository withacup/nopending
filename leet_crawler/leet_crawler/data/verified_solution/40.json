{"solution_code": "public class Solution {--newline--     public List<List<Integer>> combinationSum2(int[] cand, int target) {--newline--        Arrays.sort(cand);--newline--        List<List<Integer>> res = new ArrayList<List<Integer>>();--newline--        List<Integer> path = new ArrayList<Integer>();--newline--        dfs_com(cand, 0, target, path, res);--newline--        return res;--newline--    }--newline--    void dfs_com(int[] cand, int cur, int target, List<Integer> path, List<List<Integer>> res) {--newline--        if (target == 0) {--newline--            res.add(new ArrayList(path));--newline--            return ;--newline--        }--newline--        if (target < 0) return;--newline--        for (int i = cur; i < cand.length; i++){--newline--            if (i > cur && cand[i] == cand[i-1]) continue;--newline--            path.add(path.size(), cand[i]);--newline--            dfs_com(cand, i+1, target - cand[i], path, res);--newline--            path.remove(path.size()-1);--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 172, "l_type": "java"}