{
    "solution_code": "public class Solution {--newline--    public int nextGreaterElement(int n) {--newline--        char[] number = (n + \"\").toCharArray();--newline--        --newline--        int i, j;--newline--        // I) Start from the right most digit and --newline--        // find the first digit that is--newline--        // smaller than the digit next to it.--newline--        for (i = number.length-1; i > 0; i--)--newline--            if (number[i-1] < number[i])--newline--               break;--newline----newline--        // If no such digit is found, its the edge case 1.--newline--        if (i == 0)--newline--            return -1;--newline--            --newline--         // II) Find the smallest digit on right side of (i-1)'th --newline--         // digit that is greater than number[i-1]--newline--        int x = number[i-1], smallest = i;--newline--        for (j = i+1; j < number.length; j++)--newline--            if (number[j] > x && number[j] <= number[smallest])--newline--                smallest = j;--newline--        --newline--        // III) Swap the above found smallest digit with --newline--        // number[i-1]--newline--        char temp = number[i-1];--newline--        number[i-1] = number[smallest];--newline--        number[smallest] = temp;--newline--        --newline--        // IV) Sort the digits after (i-1) in ascending order--newline--        Arrays.sort(number, i, number.length);--newline--        --newline--        long val = Long.parseLong(new String(number));--newline--        return (val <= Integer.MAX_VALUE) ? (int) val : -1;--newline--    }--newline--}--newline--",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 34
}