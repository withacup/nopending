{"solution_code": "public class Solution {--newline--    public int findKthNumber(int n, int k) {--newline--        int curr = 1;--newline--        k = k - 1;--newline--        while (k > 0) {--newline--            int steps = calSteps(n, curr, curr + 1);--newline--            if (steps <= k) {--newline--                curr += 1;--newline--                k -= steps;--newline--            } else {--newline--                curr *= 10;--newline--                k -= 1;--newline--            }--newline--        }--newline--        return curr;--newline--    }--newline--    //use long in case of overflow--newline--    public int calSteps(int n, long n1, long n2) {--newline--        int steps = 0;--newline--        while (n1 <= n) {--newline--            steps += Math.min(n + 1, n2) - n1;--newline--            n1 *= 10;--newline--            n2 *= 10;--newline--        }--newline--        return steps;--newline--    }--newline--}", "modified_code": null, "total_cases": 69, "l_type": "java"}