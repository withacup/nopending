{"solution_code": "public class Solution {--newline--    public List<List<Integer>> subsetsWithDup(int[] nums) {--newline--        Arrays.sort(nums);--newline--        List<List<Integer>> res = new ArrayList<>();--newline--        List<Integer> each = new ArrayList<>();--newline--        helper(res, each, 0, nums);--newline--        return res;--newline--    }--newline--    public void helper(List<List<Integer>> res, List<Integer> each, int pos, int[] n) {--newline--        if (pos <= n.length) {--newline--            res.add(each);--newline--        }--newline--        int i = pos;--newline--        while (i < n.length) {--newline--            each.add(n[i]);--newline--            helper(res, new ArrayList<>(each), i + 1, n);--newline--            each.remove(each.size() - 1);--newline--            i++;--newline--            while (i < n.length && n[i] == n[i - 1]) {i++;}--newline--        }--newline--        return;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 19, "l_type": "java"}