{
    "solution_code": "public class LRUCache {--newline--    private class Node{--newline--        int key, value;--newline--        Node prev, next;--newline--        Node(int k, int v){--newline--            this.key = k;--newline--            this.value = v;--newline--        }--newline--        Node(){--newline--            this(0, 0);--newline--        }--newline--    }--newline--    private int capacity, count;--newline--    private Map<Integer, Node> map;--newline--    private Node head, tail;--newline--    --newline--    public LRUCache(int capacity) {--newline--        this.capacity = capacity;--newline--        this.count = 0;--newline--        map = new HashMap<>();--newline--        head = new Node();--newline--        tail = new Node();--newline--        head.next = tail;--newline--        tail.prev = head;--newline--    }--newline--    --newline--    public int get(int key) {--newline--        Node n = map.get(key);--newline--        if(null==n){--newline--            return -1;--newline--        }--newline--        update(n);--newline--        return n.value;--newline--    }--newline--    --newline--    public void put(int key, int value) {--newline--        Node n = map.get(key);--newline--        if(null==n){--newline--            n = new Node(key, value);--newline--            map.put(key, n);--newline--            add(n);--newline--            ++count;--newline--        }--newline--        else{--newline--            n.value = value;--newline--            update(n);--newline--        }--newline--        if(count>capacity){--newline--            Node toDel = tail.prev;--newline--            remove(toDel);--newline--            map.remove(toDel.key);--newline--            --count;--newline--        }--newline--    }--newline--    --newline--    private void update(Node node){--newline--        remove(node);--newline--        add(node);--newline--    }--newline--    private void add(Node node){--newline--        Node after = head.next;--newline--        head.next = node;--newline--        node.prev = head;--newline--        node.next = after;--newline--        after.prev = node;--newline--    }--newline--    --newline--    private void remove(Node node){--newline--        Node before = node.prev, after = node.next;--newline--        before.next = after;--newline--        after.prev = before;--newline--    }--newline--}",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 18
}