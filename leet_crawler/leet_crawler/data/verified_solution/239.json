{"solution_code": "public class Solution {--newline--    public int[] maxSlidingWindow(int[] a, int k) {        --newline--            if (a == null || k <= 0) {--newline--                return new int[0];--newline--            }--newline--            int n = a.length;--newline--            int[] r = new int[n-k+1];--newline--            int ri = 0;--newline--            // store index--newline--            Deque<Integer> q = new ArrayDeque<>();--newline--            for (int i = 0; i < a.length; i++) {--newline--                // remove numbers out of range k--newline--                while (!q.isEmpty() && q.peek() < i - k + 1) {--newline--                    q.poll();--newline--                }--newline--                // remove smaller numbers in k range as they are useless--newline--                while (!q.isEmpty() && a[q.peekLast()] < a[i]) {--newline--                    q.pollLast();--newline--                }--newline--                // q contains index... r contains content--newline--                q.offer(i);--newline--                if (i >= k - 1) {--newline--                    r[ri++] = a[q.peek()];--newline--                }--newline--            }--newline--            return r;--newline--        }--newline--}", "modified_code": null, "total_cases": 18, "l_type": "java"}