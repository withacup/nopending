{"solution_code": "public class Solution {--newline--        public int maxProfit(int k, int[] prices) {--newline--            int len = prices.length;--newline--            if (k >= len / 2) return quickSolve(prices);--newline--            --newline--            int[][] t = new int[k + 1][len];--newline--            for (int i = 1; i <= k; i++) {--newline--                int tmpMax =  -prices[0];--newline--                for (int j = 1; j < len; j++) {--newline--                    t[i][j] = Math.max(t[i][j - 1], prices[j] + tmpMax);--newline--                    tmpMax =  Math.max(tmpMax, t[i - 1][j - 1] - prices[j]);--newline--                }--newline--            }--newline--            return t[k][len - 1];--newline--        }--newline--        --newline--    --newline--        private int quickSolve(int[] prices) {--newline--            int len = prices.length, profit = 0;--newline--            for (int i = 1; i < len; i++)--newline--                // as long as there is a price gap, we gain a profit.--newline--                if (prices[i] > prices[i - 1]) profit += prices[i] - prices[i - 1];--newline--            return profit;--newline--        }--newline--}", "modified_code": null, "total_cases": 211, "l_type": "java"}