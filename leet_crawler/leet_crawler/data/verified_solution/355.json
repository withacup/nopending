{
    "solution_code": "public class Twitter {--newline--    private static int timeStamp=0;--newline--    --newline--    // easy to find if user exist--newline--    private Map<Integer, User> userMap;--newline--    --newline--    // Tweet link to next Tweet so that we can save a lot of time--newline--    // when we execute getNewsFeed(userId)--newline--    private class Tweet{--newline--        public int id;--newline--        public int time;--newline--        public Tweet next;--newline--        --newline--        public Tweet(int id){--newline--            this.id = id;--newline--            time = timeStamp++;--newline--            next=null;--newline--        }--newline--    }--newline--    --newline--    --newline--    // OO design so User can follow, unfollow and post itself--newline--    public class User{--newline--        public int id;--newline--        public Set<Integer> followed;--newline--        public Tweet tweet_head;--newline--        --newline--        public User(int id){--newline--            this.id=id;--newline--            followed = new HashSet<>();--newline--            follow(id); // first follow itself--newline--            tweet_head = null;--newline--        }--newline--        --newline--        public void follow(int id){--newline--            followed.add(id);--newline--        }--newline--        --newline--        public void unfollow(int id){--newline--            followed.remove(id);--newline--        }--newline--        --newline--        --newline--        // everytime user post a new tweet, add it to the head of tweet list.--newline--        public void post(int id){--newline--            Tweet t = new Tweet(id);--newline--            t.next=tweet_head;--newline--            tweet_head=t;--newline--        }--newline--    }--newline--    --newline--    --newline--    --newline----newline--    /** Initialize your data structure here. */--newline--    public Twitter() {--newline--        userMap = new HashMap<Integer, User>();--newline--    }--newline--    --newline--    /** Compose a new tweet. */--newline--    public void postTweet(int userId, int tweetId) {--newline--        if(!userMap.containsKey(userId)){--newline--            User u = new User(userId);--newline--            userMap.put(userId, u);--newline--        }--newline--        userMap.get(userId).post(tweetId);--newline--            --newline--    }--newline--    --newline----newline--    --newline--    // Best part of this.--newline--    // first get all tweets lists from one user including itself and all people it followed.--newline--    // Second add all heads into a max heap. Every time we poll a tweet with --newline--    // largest time stamp from the heap, then we add its next tweet into the heap.--newline--    // So after adding all heads we only need to add 9 tweets at most into this --newline--    // heap before we get the 10 most recent tweet.--newline--    public List<Integer> getNewsFeed(int userId) {--newline--        List<Integer> res = new LinkedList<>();--newline----newline--        if(!userMap.containsKey(userId))   return res;--newline--        --newline--        Set<Integer> users = userMap.get(userId).followed;--newline--        PriorityQueue<Tweet> q = new PriorityQueue<Tweet>(users.size(), (a,b)->(b.time-a.time));--newline--        for(int user: users){--newline--            Tweet t = userMap.get(user).tweet_head;--newline--            // very imporant! If we add null to the head we are screwed.--newline--            if(t!=null){--newline--                q.add(t);--newline--            }--newline--        }--newline--        int n=0;--newline--        while(!q.isEmpty() && n<10){--newline--          Tweet t = q.poll();--newline--          res.add(t.id);--newline--          n++;--newline--          if(t.next!=null)--newline--            q.add(t.next);--newline--        }--newline--        --newline--        return res;--newline--        --newline--    }--newline--    --newline--    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */--newline--    public void follow(int followerId, int followeeId) {--newline--        if(!userMap.containsKey(followerId)){--newline--            User u = new User(followerId);--newline--            userMap.put(followerId, u);--newline--        }--newline--        if(!userMap.containsKey(followeeId)){--newline--            User u = new User(followeeId);--newline--            userMap.put(followeeId, u);--newline--        }--newline--        userMap.get(followerId).follow(followeeId);--newline--    }--newline--    --newline--    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */--newline--    public void unfollow(int followerId, int followeeId) {--newline--        if(!userMap.containsKey(followerId) || followerId==followeeId)--newline--            return;--newline--        userMap.get(followerId).unfollow(followeeId);--newline--    }--newline--}--newline----newline--/**--newline-- * Your Twitter object will be instantiated and called as such:--newline-- * Twitter obj = new Twitter();--newline-- * obj.postTweet(userId,tweetId);--newline-- * List<Integer> param_2 = obj.getNewsFeed(userId);--newline-- * obj.follow(followerId,followeeId);--newline-- * obj.unfollow(followerId,followeeId);--newline-- */",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 23
}