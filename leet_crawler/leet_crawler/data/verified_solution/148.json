{"solution_code": "public class Solution {--newline--  --newline--  public ListNode sortList(ListNode head) {--newline--    if (head == null || head.next == null)--newline--      return head;--newline--        --newline--    // step 1. cut the list to two halves--newline--    ListNode prev = null, slow = head, fast = head;--newline--    --newline--    while (fast != null && fast.next != null) {--newline--      prev = slow;--newline--      slow = slow.next;--newline--      fast = fast.next.next;--newline--    }--newline--    --newline--    prev.next = null;--newline--    --newline--    // step 2. sort each half--newline--    ListNode l1 = sortList(head);--newline--    ListNode l2 = sortList(slow);--newline--    --newline--    // step 3. merge l1 and l2--newline--    return merge(l1, l2);--newline--  }--newline--  --newline--  ListNode merge(ListNode l1, ListNode l2) {--newline--    ListNode l = new ListNode(0), p = l;--newline--    --newline--    while (l1 != null && l2 != null) {--newline--      if (l1.val < l2.val) {--newline--        p.next = l1;--newline--        l1 = l1.next;--newline--      } else {--newline--        p.next = l2;--newline--        l2 = l2.next;--newline--      }--newline--      p = p.next;--newline--    }--newline--    --newline--    if (l1 != null)--newline--      p.next = l1;--newline--    --newline--    if (l2 != null)--newline--      p.next = l2;--newline--    --newline--    return l.next;--newline--  }--newline----newline--}", "modified_code": null, "total_cases": 15, "l_type": "java"}