{"solution_code": "public class Solution {--newline--     public List<List<Integer>> combinationSum3(int k, int n) {--newline--        List<List<Integer>> ans = new ArrayList<>();--newline--        combination(ans, new ArrayList<Integer>(), k, 1, n);--newline--        return ans;--newline--    }--newline--    --newline--    private void combination(List<List<Integer>> ans, List<Integer> comb, int k,  int start, int n) {--newline--        if (comb.size() == k && n == 0) {--newline--            List<Integer> li = new ArrayList<Integer>(comb);--newline--            ans.add(li);--newline--            return;--newline--        }--newline--        for (int i = start; i <= 9; i++) {--newline--            comb.add(i);--newline--            combination(ans, comb, k, i+1, n-i);--newline--            comb.remove(comb.size() - 1);--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 18, "l_type": "java"}