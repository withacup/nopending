{
    "solution_code": "class Solution {--newline--public:--newline--    void wiggleSort(vector<int>& nums) {--newline--        if (nums.empty()) {--newline--            return;--newline--        }    --newline--        int n = nums.size();--newline--        --newline--        // Step 1: Find the median            --newline--        vector<int>::iterator nth = next(nums.begin(), n / 2);--newline--        nth_element(nums.begin(), nth, nums.end());--newline--        int median = *nth;--newline----newline--        // Step 2: Tripartie partition within O(n)-time & O(1)-space.            --newline--        auto m = [n](int idx) { return (2 * idx + 1) % (n | 1); };            --newline--        int first = 0, mid = 0, last = n - 1;--newline--        while (mid <= last) {--newline--            if (nums[m(mid)] > median) {--newline--                swap(nums[m(first)], nums[m(mid)]);--newline--                ++first;--newline--                ++mid;--newline--            }--newline--            else if (nums[m(mid)] < median) {--newline--                swap(nums[m(mid)], nums[m(last)]);--newline--                --last;--newline--            }                --newline--            else {--newline--                ++mid;--newline--            }--newline--        }--newline--    }    --newline--};",
    "l_type": "cpp",
    "modified_code": null,
    "total_cases": 44
}