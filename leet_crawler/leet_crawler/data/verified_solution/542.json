{"solution_code": "public class Solution {--newline--    public int[][] updateMatrix(int[][] matrix) {--newline--        int m = matrix.length;--newline--        int n = matrix[0].length;--newline--        --newline--        Queue<int[]> queue = new LinkedList<>();--newline--        for (int i = 0; i < m; i++) {--newline--            for (int j = 0; j < n; j++) {--newline--                if (matrix[i][j] == 0) {--newline--                    queue.offer(new int[] {i, j});--newline--                }--newline--                else {--newline--                    matrix[i][j] = Integer.MAX_VALUE;--newline--                }--newline--            }--newline--        }--newline--        --newline--        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};--newline--        --newline--        while (!queue.isEmpty()) {--newline--            int[] cell = queue.poll();--newline--            for (int[] d : dirs) {--newline--                int r = cell[0] + d[0];--newline--                int c = cell[1] + d[1];--newline--                if (r < 0 || r >= m || c < 0 || c >= n || --newline--                    matrix[r][c] <= matrix[cell[0]][cell[1]] + 1) continue;--newline--                queue.add(new int[] {r, c});--newline--                matrix[r][c] = matrix[cell[0]][cell[1]] + 1;--newline--            }--newline--        }--newline--        --newline--        return matrix;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 48, "l_type": "java"}