{"solution_code": "public class Solution {--newline--    public List<Integer> findSubstring(String s, String[] words) {--newline--        int N = s.length();--newline--        List<Integer> indexes = new ArrayList<Integer>(s.length());--newline--        if (words.length == 0) {--newline--            return indexes;--newline--        }--newline--        int M = words[0].length();--newline--        if (N < M * words.length) {--newline--            return indexes;--newline--        }--newline--        int last = N - M + 1;--newline--        --newline--        //map each string in words array to some index and compute target counters--newline--        Map<String, Integer> mapping = new HashMap<String, Integer>(words.length);--newline--        int [][] table = new int[2][words.length];--newline--        int failures = 0, index = 0;--newline--        for (int i = 0; i < words.length; ++i) {--newline--            Integer mapped = mapping.get(words[i]);--newline--            if (mapped == null) {--newline--                ++failures;--newline--                mapping.put(words[i], index);--newline--                mapped = index++;--newline--            }--newline--            ++table[0][mapped];--newline--        }--newline--        --newline--        //find all occurrences at string S and map them to their current integer, -1 means no such string is in words array--newline--        int [] smapping = new int[last];--newline--        for (int i = 0; i < last; ++i) {--newline--            String section = s.substring(i, i + M);--newline--            Integer mapped = mapping.get(section);--newline--            if (mapped == null) {--newline--                smapping[i] = -1;--newline--            } else {--newline--                smapping[i] = mapped;--newline--            }--newline--        }--newline--        --newline--        //fix the number of linear scans--newline--        for (int i = 0; i < M; ++i) {--newline--            //reset scan variables--newline--            int currentFailures = failures; //number of current mismatches--newline--            int left = i, right = i;--newline--            Arrays.fill(table[1], 0);--newline--            //here, simple solve the minimum-window-substring problem--newline--            while (right < last) {--newline--                while (currentFailures > 0 && right < last) {--newline--                    int target = smapping[right];--newline--                    if (target != -1 && ++table[1][target] == table[0][target]) {--newline--                        --currentFailures;--newline--                    }--newline--                    right += M;--newline--                }--newline--                while (currentFailures == 0 && left < right) {--newline--                    int target = smapping[left];--newline--                    if (target != -1 && --table[1][target] == table[0][target] - 1) {--newline--                        int length = right - left;--newline--                        //instead of checking every window, we know exactly the length we want--newline--                        if ((length / M) ==  words.length) {--newline--                            indexes.add(left);--newline--                        }--newline--                        ++currentFailures;--newline--                    }--newline--                    left += M;--newline--                }--newline--            }--newline--            --newline--        }--newline--        return indexes;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 169, "l_type": "java"}