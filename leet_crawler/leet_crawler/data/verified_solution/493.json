{"solution_code": "public class Solution {--newline--    public int reversePairs(int[] nums) {--newline--        return reversePairsSub(nums, 0, nums.length - 1);--newline--    }--newline--        --newline--    private int reversePairsSub(int[] nums, int l, int r) {--newline--        if (l >= r) return 0;--newline--            --newline--        int m = l + ((r - l) >> 1);--newline--        int res = reversePairsSub(nums, l, m) + reversePairsSub(nums, m + 1, r);--newline--            --newline--        int i = l, j = m + 1, k = 0, p = m + 1;--newline--        int[] merge = new int[r - l + 1];--newline--            --newline--        while (i <= m) {--newline--            while (p <= r && nums[i] > 2L * nums[p]) p++;--newline--            res += p - (m + 1);--newline--                --newline--            while (j <= r && nums[i] >= nums[j]) merge[k++] = nums[j++];--newline--            merge[k++] = nums[i++];--newline--        }--newline--            --newline--        while (j <= r) merge[k++] = nums[j++];--newline--            --newline--        System.arraycopy(merge, 0, nums, l, merge.length);--newline--            --newline--        return res;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 137, "l_type": "java"}