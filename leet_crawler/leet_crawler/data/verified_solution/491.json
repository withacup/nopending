{"solution_code": "public class Solution {--newline----newline--     public List<List<Integer>> findSubsequences(int[] nums) {--newline--         Set<List<Integer>> res= new HashSet<List<Integer>>();--newline--         List<Integer> holder = new ArrayList<Integer>();--newline--         findSequence(res, holder, 0, nums);--newline--         List result = new ArrayList(res);--newline--         return result;--newline--     }--newline----newline--    public void findSequence(Set<List<Integer>> res, List<Integer> holder, int index, int[] nums) {--newline--        if (holder.size() >= 2) {--newline--            res.add(new ArrayList(holder));--newline--        }--newline--        for (int i = index; i < nums.length; i++) {--newline--            if(holder.size() == 0 || holder.get(holder.size() - 1) <= nums[i]) {--newline--                holder.add(nums[i]);--newline--                findSequence(res, holder, i + 1, nums);--newline--                holder.remove(holder.size() - 1);--newline--            }--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 57, "l_type": "java"}