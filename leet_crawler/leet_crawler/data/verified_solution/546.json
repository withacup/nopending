{"solution_code": "public class Solution {--newline--    public int removeBoxes(int[] boxes) {--newline--        int n = boxes.length;--newline--        int[][][] dp = new int[n][n][n];--newline--            --newline--        for (int j = 0; j < n; j++) {--newline--            for (int k = 0; k <= j; k++) {--newline--                dp[j][j][k] = (k + 1) * (k + 1);--newline--            }--newline--        }--newline--            --newline--        for (int l = 1; l < n; l++) {--newline--            for (int j = l; j < n; j++) {--newline--                int i = j - l;--newline--                    --newline--                for (int k = 0; k <= i; k++) {--newline--                    int res = (k + 1) * (k + 1) + dp[i + 1][j][0];--newline--                        --newline--                    for (int m = i + 1; m <= j; m++) {--newline--                        if (boxes[m] == boxes[i]) {--newline--                            res = Math.max(res, dp[i + 1][m - 1][0] + dp[m][j][k + 1]);--newline--                        }--newline--                    }--newline--                        --newline--                    dp[i][j][k] = res;--newline--                }--newline--            }--newline--        }--newline--        --newline--        return (n == 0 ? 0 : dp[0][n - 1][0]);--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 60, "l_type": "java"}