{"solution_code": "public class Solution {--newline--    public List<List<Integer>> fourSum(int[] nums, int target) {--newline--            ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();--newline--            int len = nums.length;--newline--            if (nums == null || len < 4)--newline--                return res;--newline--    --newline--            Arrays.sort(nums);--newline--    --newline--            int max = nums[len - 1];--newline--            if (4 * nums[0] > target || 4 * max < target)--newline--                return res;--newline--    --newline--            int i, z;--newline--            for (i = 0; i < len; i++) {--newline--                z = nums[i];--newline--                if (i > 0 && z == nums[i - 1])// avoid duplicate--newline--                    continue;--newline--                if (z + 3 * max < target) // z is too small--newline--                    continue;--newline--                if (4 * z > target) // z is too large--newline--                    break;--newline--                if (4 * z == target) { // z is the boundary--newline--                    if (i + 3 < len && nums[i + 3] == z)--newline--                        res.add(Arrays.asList(z, z, z, z));--newline--                    break;--newline--                }--newline--    --newline--                threeSumForFourSum(nums, target - z, i + 1, len - 1, res, z);--newline--            }--newline--    --newline--            return res;--newline--        }--newline--    --newline--        /*--newline--         * Find all possible distinguished three numbers adding up to the target--newline--         * in sorted array nums[] between indices low and high. If there are,--newline--         * add all of them into the ArrayList fourSumList, using--newline--         * fourSumList.add(Arrays.asList(z1, the three numbers))--newline--         */--newline--        public void threeSumForFourSum(int[] nums, int target, int low, int high, ArrayList<List<Integer>> fourSumList,--newline--                int z1) {--newline--            if (low + 1 >= high)--newline--                return;--newline--    --newline--            int max = nums[high];--newline--            if (3 * nums[low] > target || 3 * max < target)--newline--                return;--newline--    --newline--            int i, z;--newline--            for (i = low; i < high - 1; i++) {--newline--                z = nums[i];--newline--                if (i > low && z == nums[i - 1]) // avoid duplicate--newline--                    continue;--newline--                if (z + 2 * max < target) // z is too small--newline--                    continue;--newline--    --newline--                if (3 * z > target) // z is too large--newline--                    break;--newline--    --newline--                if (3 * z == target) { // z is the boundary--newline--                    if (i + 1 < high && nums[i + 2] == z)--newline--                        fourSumList.add(Arrays.asList(z1, z, z, z));--newline--                    break;--newline--                }--newline--    --newline--                twoSumForFourSum(nums, target - z, i + 1, high, fourSumList, z1, z);--newline--            }--newline--    --newline--        }--newline--    --newline--        /*--newline--         * Find all possible distinguished two numbers adding up to the target--newline--         * in sorted array nums[] between indices low and high. If there are,--newline--         * add all of them into the ArrayList fourSumList, using--newline--         * fourSumList.add(Arrays.asList(z1, z2, the two numbers))--newline--         */--newline--        public void twoSumForFourSum(int[] nums, int target, int low, int high, ArrayList<List<Integer>> fourSumList,--newline--                int z1, int z2) {--newline--    --newline--            if (low >= high)--newline--                return;--newline--    --newline--            if (2 * nums[low] > target || 2 * nums[high] < target)--newline--                return;--newline--    --newline--            int i = low, j = high, sum, x;--newline--            while (i < j) {--newline--                sum = nums[i] + nums[j];--newline--                if (sum == target) {--newline--                    fourSumList.add(Arrays.asList(z1, z2, nums[i], nums[j]));--newline--    --newline--                    x = nums[i];--newline--                    while (++i < j && x == nums[i]) // avoid duplicate--newline--                        ;--newline--                    x = nums[j];--newline--                    while (i < --j && x == nums[j]) // avoid duplicate--newline--                        ;--newline--                }--newline--                if (sum < target)--newline--                    i++;--newline--                if (sum > target)--newline--                    j--;--newline--            }--newline--            return;--newline--        }--newline--}", "modified_code": null, "total_cases": 282, "l_type": "java"}