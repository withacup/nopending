{
    "solution_code": "// (c[25] - 1) * (n + 1) + 25 - i  is frame size--newline--// when inserting chars, the frame might be \"burst\", then tasks.length takes precedence--newline--// when 25 - i > n, the frame is already full at construction, the following is still valid.--newline--public class Solution {--newline--    public int leastInterval(char[] tasks, int n) {--newline----newline--        int[] c = new int[26];--newline--        for(char t : tasks){--newline--            c[t - 'A']++;--newline--        }--newline--        Arrays.sort(c);--newline--        int i = 25;--newline--        while(i >= 0 && c[i] == c[25]) i--;--newline----newline--        return Math.max(tasks.length, (c[25] - 1) * (n + 1) + 25 - i);--newline--    }--newline--}--newline--",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 64
}