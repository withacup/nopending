{"solution_code": "public class Solution {--newline--    public int calculate(String s) {--newline--        Stack<Integer> stack = new Stack<Integer>();--newline--        int result = 0;--newline--        int number = 0;--newline--        int sign = 1;--newline--        for(int i = 0; i < s.length(); i++){--newline--            char c = s.charAt(i);--newline--            if(Character.isDigit(c)){--newline--                number = 10 * number + (int)(c - '0');--newline--            }else if(c == '+'){--newline--                result += sign * number;--newline--                number = 0;--newline--                sign = 1;--newline--            }else if(c == '-'){--newline--                result += sign * number;--newline--                number = 0;--newline--                sign = -1;--newline--            }else if(c == '('){--newline--                //we push the result first, then sign;--newline--                stack.push(result);--newline--                stack.push(sign);--newline--                //reset the sign and result for the value in the parenthesis--newline--                sign = 1;   --newline--                result = 0;--newline--            }else if(c == ')'){--newline--                result += sign * number;  --newline--                number = 0;--newline--                result *= stack.pop();    //stack.pop() is the sign before the parenthesis--newline--                result += stack.pop();   //stack.pop() now is the result calculated before the parenthesis--newline--                --newline--            }--newline--        }--newline--        if(number != 0) result += sign * number;--newline--        return result;--newline--    }--newline--}", "modified_code": null, "total_cases": 37, "l_type": "java"}