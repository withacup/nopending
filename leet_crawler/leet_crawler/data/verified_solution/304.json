{
    "solution_code": "public class NumMatrix {--newline--    private int[][] dp;--newline--    --newline--    public NumMatrix(int[][] matrix) {--newline--        if(   matrix           == null--newline--           || matrix.length    == 0--newline--           || matrix[0].length == 0   ){--newline--            return;   --newline--        }--newline--        --newline--        int m = matrix.length;--newline--        int n = matrix[0].length;--newline--        --newline--        dp = new int[m + 1][n + 1];--newline--        for(int i = 1; i <= m; i++){--newline--            for(int j = 1; j <= n; j++){--newline--                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] -dp[i - 1][j - 1] + matrix[i - 1][j - 1] ;--newline--            }--newline--        }--newline--    }--newline--    --newline--    public int sumRegion(int row1, int col1, int row2, int col2) {--newline--        int iMin = Math.min(row1, row2);--newline--        int iMax = Math.max(row1, row2);--newline--        --newline--        int jMin = Math.min(col1, col2);--newline--        int jMax = Math.max(col1, col2);--newline--        --newline--        return dp[iMax + 1][jMax + 1] - dp[iMax + 1][jMin] - dp[iMin][jMax + 1] + dp[iMin][jMin];    --newline--    }--newline--}",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 12
}