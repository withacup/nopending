{"solution_code": "public class Solution {--newline--    public int largestRectangleArea(int[] height) {--newline--        int len = height.length;--newline--        Stack<Integer> s = new Stack<Integer>();--newline--        int maxArea = 0;--newline--        for(int i = 0; i <= len; i++){--newline--            int h = (i == len ? 0 : height[i]);--newline--            if(s.isEmpty() || h >= height[s.peek()]){--newline--                s.push(i);--newline--            }else{--newline--                int tp = s.pop();--newline--                maxArea = Math.max(maxArea, height[tp] * (s.isEmpty() ? i : i - 1 - s.peek()));--newline--                i--;--newline--            }--newline--        }--newline--        return maxArea;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 96, "l_type": "java"}