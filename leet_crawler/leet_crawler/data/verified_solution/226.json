{"solution_code": "public class Solution {--newline--    public TreeNode invertTree(TreeNode root) {--newline--        --newline--        if (root == null) {--newline--            return null;--newline--        }--newline----newline--        final Queue<TreeNode> queue = new LinkedList<>();--newline--        queue.offer(root);--newline----newline--        while(!queue.isEmpty()) {--newline--            final TreeNode node = queue.poll();--newline--            final TreeNode left = node.left;--newline--            node.left = node.right;--newline--            node.right = left;--newline----newline--            if(node.left != null) {--newline--                queue.offer(node.left);--newline--            }--newline--            if(node.right != null) {--newline--                queue.offer(node.right);--newline--            }--newline--        }--newline--        return root;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 68, "l_type": "java"}