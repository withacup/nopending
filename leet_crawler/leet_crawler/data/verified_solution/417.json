{"solution_code": "public class Solution {--newline--    public List<int[]> pacificAtlantic(int[][] matrix) {--newline--        List<int[]> res = new LinkedList<>();--newline--        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){--newline--            return res;--newline--        }--newline--        int n = matrix.length, m = matrix[0].length;--newline--        boolean[][]pacific = new boolean[n][m];--newline--        boolean[][]atlantic = new boolean[n][m];--newline--        for(int i=0; i<n; i++){--newline--            dfs(matrix, pacific, Integer.MIN_VALUE, i, 0);--newline--            dfs(matrix, atlantic, Integer.MIN_VALUE, i, m-1);--newline--        }--newline--        for(int i=0; i<m; i++){--newline--            dfs(matrix, pacific, Integer.MIN_VALUE, 0, i);--newline--            dfs(matrix, atlantic, Integer.MIN_VALUE, n-1, i);--newline--        }--newline--        for (int i = 0; i < n; i++) --newline--            for (int j = 0; j < m; j++) --newline--                if (pacific[i][j] && atlantic[i][j]) --newline--                    res.add(new int[] {i, j});--newline--        return res;--newline--    }--newline--    --newline--    int[][]dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};--newline--    --newline--    public void dfs(int[][]matrix, boolean[][]visited, int height, int x, int y){--newline--        int n = matrix.length, m = matrix[0].length;--newline--        if(x<0 || x>=n || y<0 || y>=m || visited[x][y] || matrix[x][y] < height)--newline--            return;--newline--        visited[x][y] = true;--newline--        for(int[]d:dir){--newline--            dfs(matrix, visited, matrix[x][y], x+d[0], y+d[1]);--newline--        }--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 113, "l_type": "java"}