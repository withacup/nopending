{"solution_code": "public class Solution {--newline--    public List<List<Integer>> permuteUnique(int[] nums) {--newline--        List<List<Integer>> res = new ArrayList<List<Integer>>();--newline--        if(nums==null || nums.length==0) return res;--newline--        boolean[] used = new boolean[nums.length];--newline--        List<Integer> list = new ArrayList<Integer>();--newline--        Arrays.sort(nums);--newline--        dfs(nums, used, list, res);--newline--        return res;--newline--    }--newline----newline--    public void dfs(int[] nums, boolean[] used, List<Integer> list, List<List<Integer>> res){--newline--        if(list.size()==nums.length){--newline--            res.add(new ArrayList<Integer>(list));--newline--            return;--newline--        }--newline--        for(int i=0;i<nums.length;i++){--newline--            if(used[i]) continue;--newline--            if(i>0 &&nums[i-1]==nums[i] && !used[i-1]) continue;--newline--            used[i]=true;--newline--            list.add(nums[i]);--newline--            dfs(nums,used,list,res);--newline--            used[i]=false;--newline--            list.remove(list.size()-1);--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 30, "l_type": "java"}