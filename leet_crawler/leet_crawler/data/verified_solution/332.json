{"solution_code": "public class Solution {--newline--    public List<String> findItinerary(String[][] tickets) {--newline--        Map<String, PriorityQueue<String>> targets = new HashMap<>();--newline--        for (String[] ticket : tickets)--newline--            targets.computeIfAbsent(ticket[0], k -> new PriorityQueue()).add(ticket[1]);--newline--        List<String> route = new LinkedList();--newline--        Stack<String> stack = new Stack<>();--newline--        stack.push(\"JFK\");--newline--        while (!stack.empty()) {--newline--            while (targets.containsKey(stack.peek()) && !targets.get(stack.peek()).isEmpty())--newline--                stack.push(targets.get(stack.peek()).poll());--newline--            route.add(0, stack.pop());--newline--        }--newline--        return route;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 80, "l_type": "java"}