{"solution_code": "public class Solution {--newline--    public boolean makesquare(int[] nums) {--newline--        if (nums == null || nums.length < 4) return false;--newline--        int sum = 0;--newline--        for (int num : nums) sum += num;--newline--        if (sum % 4 != 0) return false;--newline--        --newline--        Arrays.sort(nums);--newline--        reverse(nums);--newline--        --newline--        return dfs(nums, new int[4], 0, sum / 4);--newline--    }--newline--    --newline--    private boolean dfs(int[] nums, int[] sums, int index, int target) {--newline--        if (index == nums.length) {--newline--            if (sums[0] == target && sums[1] == target && sums[2] == target) {--newline--            return true;--newline--            }--newline--            return false;--newline--        }--newline--        --newline--        for (int i = 0; i < 4; i++) {--newline--            if (sums[i] + nums[index] > target) continue;--newline--            sums[i] += nums[index];--newline--            if (dfs(nums, sums, index + 1, target)) return true;--newline--            sums[i] -= nums[index];--newline--        }--newline--        --newline--        return false;--newline--    }--newline--    --newline--    private void reverse(int[] nums) {--newline--        int i = 0, j = nums.length - 1;--newline--        while (i < j) {--newline--            int temp = nums[i];--newline--            nums[i] = nums[j];--newline--            nums[j] = temp;--newline--            i++; j--;--newline--        }--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 174, "l_type": "java"}