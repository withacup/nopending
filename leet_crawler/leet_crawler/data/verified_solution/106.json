{"solution_code": "public class Solution {--newline--    public TreeNode buildTree(int[] inorder, int[] postorder) {--newline--        if (inorder.length == 0 || postorder.length == 0) return null;--newline--        int ip = inorder.length - 1;--newline--        int pp = postorder.length - 1;--newline--        --newline--        Stack<TreeNode> stack = new Stack<TreeNode>();--newline--        TreeNode prev = null;--newline--        TreeNode root = new TreeNode(postorder[pp]);--newline--        stack.push(root);--newline--        pp--;--newline--        --newline--        while (pp >= 0) {--newline--            while (!stack.isEmpty() && stack.peek().val == inorder[ip]) {--newline--                prev = stack.pop();--newline--                ip--;--newline--            }--newline--            TreeNode newNode = new TreeNode(postorder[pp]);--newline--            if (prev != null) {--newline--                prev.left = newNode;--newline--            } else if (!stack.isEmpty()) {--newline--                TreeNode currTop = stack.peek();--newline--                currTop.right = newNode;--newline--            }--newline--            stack.push(newNode);--newline--            prev = null;--newline--            pp--;--newline--        }--newline--        --newline--        return root;--newline--    }--newline--    --newline--}", "modified_code": null, "total_cases": 202, "l_type": "java"}