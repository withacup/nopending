{"solution_code": "public class Solution {--newline--    /* first  consider the situation matrix is 1D--newline--        we can save every sum of 0~i(0<=i<len) and binary search previous sum to find --newline--        possible result for every index, time complexity is O(NlogN).--newline--        so in 2D matrix, we can sum up all values from row i to row j and create a 1D array --newline--        to use 1D array solution.--newline--        If col number is less than row number, we can sum up all values from col i to col j --newline--        then use 1D array solution.--newline--    */--newline--    public int maxSumSubmatrix(int[][] matrix, int target) {--newline--        int row = matrix.length;--newline--        if(row==0)return 0;--newline--        int col = matrix[0].length;--newline--        int m = Math.min(row,col);--newline--        int n = Math.max(row,col);--newline--        //indicating sum up in every row or every column--newline--        boolean colIsBig = col>row;--newline--        int res = Integer.MIN_VALUE;--newline--        for(int i = 0;i<m;i++){--newline--            int[] array = new int[n];--newline--            // sum from row j to row i--newline--            for(int j = i;j>=0;j--){--newline--                int val = 0;--newline--                TreeSet<Integer> set = new TreeSet<Integer>();--newline--                set.add(0);--newline--                //traverse every column/row and sum up--newline--                for(int k = 0;k<n;k++){--newline--                    array[k]=array[k]+(colIsBig?matrix[j][k]:matrix[k][j]);--newline--                    val = val + array[k];--newline--                    //use  TreeMap to binary search previous sum to get possible result --newline--                    Integer subres = set.ceiling(val-target);--newline--                    if(null!=subres){--newline--                        res=Math.max(res,val-subres);--newline--                    }--newline--                    set.add(val);--newline--                }--newline--            }--newline--        }--newline--        return res;--newline--    }--newline--}", "modified_code": null, "total_cases": 27, "l_type": "java"}