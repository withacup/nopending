{"solution_code": "public class Solution {--newline--    public String removeKdigits(String num, int k) {--newline--        int digits = num.length() - k;--newline--        char[] stk = new char[num.length()];--newline--        int top = 0;--newline--        // k keeps track of how many characters we can remove--newline--        // if the previous character in stk is larger than the current one--newline--        // then removing it will get a smaller number--newline--        // but we can only do so when k is larger than 0--newline--        for (int i = 0; i < num.length(); ++i) {--newline--            char c = num.charAt(i);--newline--            while (top > 0 && stk[top-1] > c && k > 0) {--newline--                top -= 1;--newline--                k -= 1;--newline--            }--newline--            stk[top++] = c;--newline--        }--newline--        // find the index of first non-zero digit--newline--        int idx = 0;--newline--        while (idx < digits && stk[idx] == '0') idx++;--newline--        return idx == digits? \"0\": new String(stk, idx, digits - idx);--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 33, "l_type": "java"}