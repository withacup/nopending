{"solution_code": "public class Solution {--newline--    public int findSubstringInWraproundString(String p) {--newline--        // count[i] is the maximum unique substring end with ith letter.--newline--        // 0 - 'a', 1 - 'b', ..., 25 - 'z'.--newline--        int[] count = new int[26];--newline--        --newline--        // store longest contiguous substring ends at current position.--newline--        int maxLengthCur = 0; --newline----newline--        for (int i = 0; i < p.length(); i++) {--newline--            if (i > 0 && (p.charAt(i) - p.charAt(i - 1) == 1 || (p.charAt(i - 1) - p.charAt(i) == 25))) {--newline--                maxLengthCur++;--newline--            }--newline--            else {--newline--                maxLengthCur = 1;--newline--            }--newline--            --newline--            int index = p.charAt(i) - 'a';--newline--            count[index] = Math.max(count[index], maxLengthCur);--newline--        }--newline--        --newline--        // Sum to get result--newline--        int sum = 0;--newline--        for (int i = 0; i < 26; i++) {--newline--            sum += count[i];--newline--        }--newline--        return sum;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 81, "l_type": "java"}