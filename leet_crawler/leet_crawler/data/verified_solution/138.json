{"solution_code": "public class Solution {--newline--    public RandomListNode copyRandomList(RandomListNode head) {--newline--        RandomListNode iter = head, next;--newline--    --newline--        // First round: make copy of each node,--newline--        // and link them together side-by-side in a single list.--newline--        while (iter != null) {--newline--            next = iter.next;--newline--    --newline--            RandomListNode copy = new RandomListNode(iter.label);--newline--            iter.next = copy;--newline--            copy.next = next;--newline--    --newline--            iter = next;--newline--        }--newline--    --newline--        // Second round: assign random pointers for the copy nodes.--newline--        iter = head;--newline--        while (iter != null) {--newline--            if (iter.random != null) {--newline--                iter.next.random = iter.random.next;--newline--            }--newline--            iter = iter.next.next;--newline--        }--newline--    --newline--        // Third round: restore the original list, and extract the copy list.--newline--        iter = head;--newline--        RandomListNode pseudoHead = new RandomListNode(0);--newline--        RandomListNode copy, copyIter = pseudoHead;--newline--    --newline--        while (iter != null) {--newline--            next = iter.next.next;--newline--    --newline--            // extract the copy--newline--            copy = iter.next;--newline--            copyIter.next = copy;--newline--            copyIter = copy;--newline--    --newline--            // restore the original list--newline--            iter.next = next;--newline--    --newline--            iter = next;--newline--        }--newline--    --newline--        return pseudoHead.next;--newline--    }--newline--}", "modified_code": null, "total_cases": 12, "l_type": "java"}