{"solution_code": "public class Solution {--newline--    public int longestSubstring(String s, int k) {--newline--        char[] str = s.toCharArray();--newline--        return helper(str,0,s.length(),k);--newline--    }--newline--    private int helper(char[] str, int start, int end,  int k){--newline--        if(end-start<k) return 0;//substring length shorter than k.--newline--        int[] count = new int[26];--newline--        for(int i = start;i<end;i++){--newline--            int idx = str[i]-'a';--newline--            count[idx]++;--newline--        }--newline--        for(int i = 0;i<26;i++){--newline--            if(count[i]<k&&count[i]>0){ //count[i]=0 => i+'a' does not exist in the string, skip it.--newline--                for(int j = start;j<end;j++){--newline--                    if(str[j]==i+'a'){--newline--                        int left = helper(str,start,j,k);--newline--                        int right = helper(str,j+1,end,k);--newline--                        return Math.max(left,right);--newline--                    }--newline--                }--newline--            }--newline--        }--newline--        return end-start;--newline--    }--newline--}", "modified_code": null, "total_cases": 28, "l_type": "java"}