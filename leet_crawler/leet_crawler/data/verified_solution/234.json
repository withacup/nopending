{"solution_code": "public class Solution {--newline--    public boolean isPalindrome(ListNode head) {--newline--        ListNode fast = head, slow = head;--newline--        while (fast != null && fast.next != null) {--newline--            fast = fast.next.next;--newline--            slow = slow.next;--newline--        }--newline--        if (fast != null) { // odd nodes: let right half smaller--newline--            slow = slow.next;--newline--        }--newline--        slow = reverse(slow);--newline--        fast = head;--newline--        --newline--        while (slow != null) {--newline--            if (fast.val != slow.val) {--newline--                return false;--newline--            }--newline--            fast = fast.next;--newline--            slow = slow.next;--newline--        }--newline--        return true;--newline--    }--newline--    --newline--    public ListNode reverse(ListNode head) {--newline--        ListNode prev = null;--newline--        while (head != null) {--newline--            ListNode next = head.next;--newline--            head.next = prev;--newline--            prev = head;--newline--            head = next;--newline--        }--newline--        return prev;--newline--    }--newline--}", "modified_code": null, "total_cases": 26, "l_type": "java"}