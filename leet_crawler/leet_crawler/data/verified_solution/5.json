{"solution_code": "public class Solution {--newline--private int lo, maxLen;--newline----newline--public String longestPalindrome(String s) {--newline--    int len = s.length();--newline--    if (len < 2)--newline--        return s;--newline--    --newline--    for (int i = 0; i < len-1; i++) {--newline--         extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible--newline--         extendPalindrome(s, i, i+1); //assume even length.--newline--    }--newline--    return s.substring(lo, lo + maxLen);--newline--}--newline----newline--private void extendPalindrome(String s, int j, int k) {--newline--    while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {--newline--        j--;--newline--        k++;--newline--    }--newline--    if (maxLen < k - j - 1) {--newline--        lo = j + 1;--newline--        maxLen = k - j - 1;--newline--    }--newline--}}", "modified_code": null, "total_cases": 94, "l_type": "java"}