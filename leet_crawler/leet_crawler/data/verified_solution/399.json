{"solution_code": "public class Solution {--newline--        public double[] calcEquation(String[][] equations, double[] values, String[][] queries) {--newline--            HashMap<String, ArrayList<String>> pairs = new HashMap<String, ArrayList<String>>();--newline--            HashMap<String, ArrayList<Double>> valuesPair = new HashMap<String, ArrayList<Double>>();--newline--            for (int i = 0; i < equations.length; i++) {--newline--                String[] equation = equations[i];--newline--                if (!pairs.containsKey(equation[0])) {--newline--                    pairs.put(equation[0], new ArrayList<String>());--newline--                    valuesPair.put(equation[0], new ArrayList<Double>());--newline--                }--newline--                if (!pairs.containsKey(equation[1])) {--newline--                    pairs.put(equation[1], new ArrayList<String>());--newline--                    valuesPair.put(equation[1], new ArrayList<Double>());--newline--                }--newline--                pairs.get(equation[0]).add(equation[1]);--newline--                pairs.get(equation[1]).add(equation[0]);--newline--                valuesPair.get(equation[0]).add(values[i]);--newline--                valuesPair.get(equation[1]).add(1/values[i]);--newline--            }--newline--            --newline--            double[] result = new double[queries.length];--newline--            for (int i = 0; i < queries.length; i++) {--newline--                String[] query = queries[i];--newline--                result[i] = dfs(query[0], query[1], pairs, valuesPair, new HashSet<String>(), 1.0);--newline--                if (result[i] == 0.0) result[i] = -1.0;--newline--            }--newline--            return result;--newline--        }--newline--        --newline--        private double dfs(String start, String end, HashMap<String, ArrayList<String>> pairs, HashMap<String, ArrayList<Double>> values, HashSet<String> set, double value) {--newline--            if (set.contains(start)) return 0.0;--newline--            if (!pairs.containsKey(start)) return 0.0;--newline--            if (start.equals(end)) return value;--newline--            set.add(start);--newline--            --newline--            ArrayList<String> strList = pairs.get(start);--newline--            ArrayList<Double> valueList = values.get(start);--newline--            double tmp = 0.0;--newline--            for (int i = 0; i < strList.size(); i++) {--newline--                tmp = dfs(strList.get(i), end, pairs, values, set, value*valueList.get(i));--newline--                if (tmp != 0.0) {--newline--                    break;--newline--                }--newline--            }--newline--            set.remove(start);--newline--            return tmp;--newline--        }--newline--}", "modified_code": null, "total_cases": 11, "l_type": "java"}