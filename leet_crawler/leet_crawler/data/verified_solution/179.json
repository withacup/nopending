{"solution_code": "public class Solution {--newline--     public String largestNumber(int[] num) {--newline--        if(num == null || num.length == 0)--newline--            return \"\";--newline--        --newline--        // Convert int array to String array, so we can sort later on--newline--        String[] s_num = new String[num.length];--newline--        for(int i = 0; i < num.length; i++)--newline--            s_num[i] = String.valueOf(num[i]);--newline--            --newline--        // Comparator to decide which string should come first in concatenation--newline--        Comparator<String> comp = new Comparator<String>(){--newline--            @Override--newline--            public int compare(String str1, String str2){--newline--                String s1 = str1 + str2;--newline--            String s2 = str2 + str1;--newline--            return s2.compareTo(s1); // reverse order here, so we can do append() later--newline--            }--newline--            };--newline--        --newline--        Arrays.sort(s_num, comp);--newline--                // An extreme edge case by lc, say you have only a bunch of 0 in your int array--newline--                if(s_num[0].charAt(0) == '0')--newline--                    return \"0\";--newline--            --newline--        StringBuilder sb = new StringBuilder();--newline--        for(String s: s_num)--newline--                sb.append(s);--newline--        --newline--        return sb.toString();--newline--        --newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 221, "l_type": "java"}