{"solution_code": "public class Solution {--newline--     public List<String> generateParenthesis(int n) {--newline--            List<String> list = new ArrayList<String>();--newline--            backtrack(list, \"\", 0, 0, n);--newline--            return list;--newline--        }--newline--        --newline--        public void backtrack(List<String> list, String str, int open, int close, int max){--newline--            --newline--            if(str.length() == max*2){--newline--                list.add(str);--newline--                return;--newline--            }--newline--            --newline--            if(open < max)--newline--                backtrack(list, str+\"(\", open+1, close, max);--newline--            if(close < open)--newline--                backtrack(list, str+\")\", open, close+1, max);--newline--        }--newline--    --newline--}", "modified_code": null, "total_cases": 8, "l_type": "java"}