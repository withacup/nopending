{"solution_code": "public class Solution {--newline--    public double findMedianSortedArrays(int[] A, int[] B) {--newline--            int m = A.length, n = B.length;--newline--            int l = (m + n + 1) / 2;--newline--            int r = (m + n + 2) / 2;--newline--            return (getkth(A, 0, B, 0, l) + getkth(A, 0, B, 0, r)) / 2.0;--newline--        }--newline--    --newline--    public double getkth(int[] A, int aStart, int[] B, int bStart, int k) {--newline--        if (aStart > A.length - 1) return B[bStart + k - 1];            --newline--        if (bStart > B.length - 1) return A[aStart + k - 1];                --newline--        if (k == 1) return Math.min(A[aStart], B[bStart]);--newline--        --newline--        int aMid = Integer.MAX_VALUE, bMid = Integer.MAX_VALUE;--newline--        if (aStart + k/2 - 1 < A.length) aMid = A[aStart + k/2 - 1]; --newline--        if (bStart + k/2 - 1 < B.length) bMid = B[bStart + k/2 - 1];        --newline--        --newline--        if (aMid < bMid) --newline--            return getkth(A, aStart + k/2, B, bStart,       k - k/2);// Check: aRight + bLeft --newline--        else --newline--            return getkth(A, aStart,       B, bStart + k/2, k - k/2);// Check: bRight + aLeft--newline--    }--newline--}", "modified_code": null, "total_cases": 2080, "l_type": "java"}