{
    "solution_code": "public class LFUCache {--newline--    private Node head = null;--newline--    private int cap = 0;--newline--    private HashMap<Integer, Integer> valueHash = null;--newline--    private HashMap<Integer, Node> nodeHash = null;--newline--    --newline--    public LFUCache(int capacity) {--newline--        this.cap = capacity;--newline--        valueHash = new HashMap<Integer, Integer>();--newline--        nodeHash = new HashMap<Integer, Node>();--newline--    }--newline--    --newline--    public int get(int key) {--newline--        if (valueHash.containsKey(key)) {--newline--            increaseCount(key);--newline--            return valueHash.get(key);--newline--        }--newline--        return -1;--newline--    }--newline--    --newline--    public void put(int key, int value) {--newline--        if ( cap == 0 ) return;--newline--        if (valueHash.containsKey(key)) {--newline--            valueHash.put(key, value);--newline--        } else {--newline--            if (valueHash.size() < cap) {--newline--                valueHash.put(key, value);--newline--            } else {--newline--                removeOld();--newline--                valueHash.put(key, value);--newline--            }--newline--            addToHead(key);--newline--        }--newline--        increaseCount(key);--newline--    }--newline--    --newline--    private void addToHead(int key) {--newline--        if (head == null) {--newline--            head = new Node(0);--newline--            head.keys.add(key);--newline--        } else if (head.count > 0) {--newline--            Node node = new Node(0);--newline--            node.keys.add(key);--newline--            node.next = head;--newline--            head.prev = node;--newline--            head = node;--newline--        } else {--newline--            head.keys.add(key);--newline--        }--newline--        nodeHash.put(key, head);      --newline--    }--newline--    --newline--    private void increaseCount(int key) {--newline--        Node node = nodeHash.get(key);--newline--        node.keys.remove(key);--newline--        --newline--        if (node.next == null) {--newline--            node.next = new Node(node.count+1);--newline--            node.next.prev = node;--newline--            node.next.keys.add(key);--newline--        } else if (node.next.count == node.count+1) {--newline--            node.next.keys.add(key);--newline--        } else {--newline--            Node tmp = new Node(node.count+1);--newline--            tmp.keys.add(key);--newline--            tmp.prev = node;--newline--            tmp.next = node.next;--newline--            node.next.prev = tmp;--newline--            node.next = tmp;--newline--        }--newline----newline--        nodeHash.put(key, node.next);--newline--        if (node.keys.size() == 0) remove(node);--newline--    }--newline--    --newline--    private void removeOld() {--newline--        if (head == null) return;--newline--        int old = 0;--newline--        for (int n: head.keys) {--newline--            old = n;--newline--            break;--newline--        }--newline--        head.keys.remove(old);--newline--        if (head.keys.size() == 0) remove(head);--newline--        nodeHash.remove(old);--newline--        valueHash.remove(old);--newline--    }--newline--    --newline--    private void remove(Node node) {--newline--        if (node.prev == null) {--newline--            head = node.next;--newline--        } else {--newline--            node.prev.next = node.next;--newline--        } --newline--        if (node.next != null) {--newline--            node.next.prev = node.prev;--newline--        }--newline--    }--newline--    --newline--    class Node {--newline--        public int count = 0;--newline--        public LinkedHashSet<Integer> keys = null;--newline--        public Node prev = null, next = null;--newline--        --newline--        public Node(int count) {--newline--            this.count = count;--newline--            keys = new LinkedHashSet<Integer>();--newline--            prev = next = null;--newline--        }--newline--    }--newline--}",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 23
}