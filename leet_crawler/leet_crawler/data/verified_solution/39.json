{"solution_code": "public class Solution {--newline--    public List<List<Integer>> combinationSum(int[] candidates, int target) {--newline--        Arrays.sort(candidates);--newline--        List<List<Integer>> result = new ArrayList<List<Integer>>();--newline--        getResult(result, new ArrayList<Integer>(), candidates, target, 0);--newline--        --newline--        return result;--newline--    }--newline--    --newline--    private void getResult(List<List<Integer>> result, List<Integer> cur, int candidates[], int target, int start){--newline--        if(target > 0){--newline--            for(int i = start; i < candidates.length && target >= candidates[i]; i++){--newline--                cur.add(candidates[i]);--newline--                getResult(result, cur, candidates, target - candidates[i], i);--newline--                cur.remove(cur.size() - 1);--newline--            }//for--newline--        }//if--newline--        else if(target == 0 ){--newline--            result.add(new ArrayList<Integer>(cur));--newline--        }//else if--newline--    }--newline--}", "modified_code": null, "total_cases": 168, "l_type": "java"}