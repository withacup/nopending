{
    "solution_code": "public class RandomizedSet {--newline--    ArrayList<Integer> nums;--newline--    HashMap<Integer, Integer> locs;--newline--    java.util.Random rand = new java.util.Random();--newline--    /** Initialize your data structure here. */--newline--    public RandomizedSet() {--newline--        nums = new ArrayList<Integer>();--newline--        locs = new HashMap<Integer, Integer>();--newline--    }--newline--    --newline--    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */--newline--    public boolean insert(int val) {--newline--        boolean contain = locs.containsKey(val);--newline--        if ( contain ) return false;--newline--        locs.put( val, nums.size());--newline--        nums.add(val);--newline--        return true;--newline--    }--newline--    --newline--    /** Removes a value from the set. Returns true if the set contained the specified element. */--newline--    public boolean remove(int val) {--newline--        boolean contain = locs.containsKey(val);--newline--        if ( ! contain ) return false;--newline--        int loc = locs.get(val);--newline--        if (loc < nums.size() - 1 ) { // not the last one than swap the last one with this val--newline--            int lastone = nums.get(nums.size() - 1 );--newline--            nums.set( loc , lastone );--newline--            locs.put(lastone, loc);--newline--        }--newline--        locs.remove(val);--newline--        nums.remove(nums.size() - 1);--newline--        return true;--newline--    }--newline--    --newline--    /** Get a random element from the set. */--newline--    public int getRandom() {--newline--        return nums.get( rand.nextInt(nums.size()) );--newline--    }--newline--}--newline--",
    "l_type": "java",
    "modified_code": null,
    "total_cases": 18
}