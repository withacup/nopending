{"solution_code": "public class Solution {--newline--    public int divide(int dividend, int divisor) {--newline--        //Reduce the problem to positive long integer to make it easier.--newline--        //Use long to avoid integer overflow cases.--newline--        int sign = 1;--newline--        if ((dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0))--newline--            sign = -1;--newline--        long ldividend = Math.abs((long) dividend);--newline--        long ldivisor = Math.abs((long) divisor);--newline--        --newline--        //Take care the edge cases.--newline--        if (ldivisor == 0) return Integer.MAX_VALUE;--newline--        if ((ldividend == 0) || (ldividend < ldivisor))    return 0;--newline--        --newline--        long lans = ldivide(ldividend, ldivisor);--newline--        --newline--        int ans;--newline--        if (lans > Integer.MAX_VALUE){ //Handle overflow.--newline--            ans = (sign == 1)? Integer.MAX_VALUE : Integer.MIN_VALUE;--newline--        } else {--newline--            ans = (int) (sign * lans);--newline--        }--newline--        return ans;--newline--    }--newline--    --newline--    private long ldivide(long ldividend, long ldivisor) {--newline--        // Recursion exit condition--newline--        if (ldividend < ldivisor) return 0;--newline--        --newline--        //  Find the largest multiple so that (divisor * multiple <= dividend), --newline--        //  whereas we are moving with stride 1, 2, 4, 8, 16...2^n for performance reason.--newline--        //  Think this as a binary search.--newline--        long sum = ldivisor;--newline--        long multiple = 1;--newline--        while ((sum+sum) <= ldividend) {--newline--            sum += sum;--newline--            multiple += multiple;--newline--        }--newline--        //Look for additional value for the multiple from the reminder (dividend - sum) recursively.--newline--        return multiple + ldivide(ldividend - sum, ldivisor);--newline--    }--newline--}", "modified_code": null, "total_cases": 988, "l_type": "java"}