{"solution_code": "public class Solution {--newline--    class Node {--newline--        Node left, right;--newline--        int val, sum, dup = 1;--newline--        public Node(int v, int s) {--newline--            val = v;--newline--            sum = s;--newline--        }--newline--    }--newline--    public List<Integer> countSmaller(int[] nums) {--newline--        Integer[] ans = new Integer[nums.length];--newline--        Node root = null;--newline--        for (int i = nums.length - 1; i >= 0; i--) {--newline--            root = insert(nums[i], root, ans, i, 0);--newline--        }--newline--        return Arrays.asList(ans);--newline--    }--newline--    private Node insert(int num, Node node, Integer[] ans, int i, int preSum) {--newline--        if (node == null) {--newline--            node = new Node(num, 0);--newline--            ans[i] = preSum;--newline--        } else if (node.val == num) {--newline--            node.dup++;--newline--            ans[i] = preSum + node.sum;--newline--        } else if (node.val > num) {--newline--            node.sum++;--newline--            node.left = insert(num, node.left, ans, i, preSum);--newline--        } else {--newline--            node.right = insert(num, node.right, ans, i, preSum + node.dup + node.sum);--newline--        }--newline--        return node;--newline--    }--newline--}", "modified_code": null, "total_cases": 16, "l_type": "java"}