{"solution_code": "public class Solution {--newline--    public int countRangeSum(int[] nums, int lower, int upper) {--newline--        int n = nums.length;--newline--        long[] sums = new long[n + 1];--newline--        for (int i = 0; i < n; ++i)--newline--            sums[i + 1] = sums[i] + nums[i];--newline--        return countWhileMergeSort(sums, 0, n + 1, lower, upper);--newline--    }--newline--    --newline--    private int countWhileMergeSort(long[] sums, int start, int end, int lower, int upper) {--newline--        if (end - start <= 1) return 0;--newline--        int mid = (start + end) / 2;--newline--        int count = countWhileMergeSort(sums, start, mid, lower, upper) --newline--                  + countWhileMergeSort(sums, mid, end, lower, upper);--newline--        int j = mid, k = mid, t = mid;--newline--        long[] cache = new long[end - start];--newline--        for (int i = start, r = 0; i < mid; ++i, ++r) {--newline--            while (k < end && sums[k] - sums[i] < lower) k++;--newline--            while (j < end && sums[j] - sums[i] <= upper) j++;--newline--            while (t < end && sums[t] < sums[i]) cache[r++] = sums[t++];--newline--            cache[r] = sums[i];--newline--            count += j - k;--newline--        }--newline--        System.arraycopy(cache, 0, sums, start, t - start);--newline--        return count;--newline--    }--newline--}", "modified_code": null, "total_cases": 61, "l_type": "java"}