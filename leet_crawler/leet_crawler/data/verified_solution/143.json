{"solution_code": "public class Solution {--newline--    public void reorderList(ListNode head) {--newline--                if(head==null||head.next==null) return;--newline--                --newline--                //Find the middle of the list--newline--                ListNode p1=head;--newline--                ListNode p2=head;--newline--                while(p2.next!=null&&p2.next.next!=null){ --newline--                    p1=p1.next;--newline--                    p2=p2.next.next;--newline--                }--newline--                --newline--                //Reverse the half after middle  1->2->3->4->5->6 to 1->2->3->6->5->4--newline--                ListNode preMiddle=p1;--newline--                ListNode preCurrent=p1.next;--newline--                while(preCurrent.next!=null){--newline--                    ListNode current=preCurrent.next;--newline--                    preCurrent.next=current.next;--newline--                    current.next=preMiddle.next;--newline--                    preMiddle.next=current;--newline--                }--newline--                --newline--                //Start reorder one by one  1->2->3->6->5->4 to 1->6->2->5->3->4--newline--                p1=head;--newline--                p2=preMiddle.next;--newline--                while(p1!=preMiddle){--newline--                    preMiddle.next=p2.next;--newline--                    p2.next=p1.next;--newline--                    p1.next=p2;--newline--                    p1=p2.next;--newline--                    p2=preMiddle.next;--newline--                }--newline--            }--newline--}", "modified_code": null, "total_cases": 13, "l_type": "java"}