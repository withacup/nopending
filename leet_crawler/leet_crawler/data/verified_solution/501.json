{"solution_code": "public class Solution {--newline--    --newline--    public int[] findMode(TreeNode root) {--newline--        inorder(root);--newline--        modes = new int[modeCount];--newline--        modeCount = 0;--newline--        currCount = 0;--newline--        inorder(root);--newline--        return modes;--newline--    }--newline----newline--    private int currVal;--newline--    private int currCount = 0;--newline--    private int maxCount = 0;--newline--    private int modeCount = 0;--newline--    --newline--    private int[] modes;--newline----newline--    private void handleValue(int val) {--newline--        if (val != currVal) {--newline--            currVal = val;--newline--            currCount = 0;--newline--        }--newline--        currCount++;--newline--        if (currCount > maxCount) {--newline--            maxCount = currCount;--newline--            modeCount = 1;--newline--        } else if (currCount == maxCount) {--newline--            if (modes != null)--newline--                modes[modeCount] = currVal;--newline--            modeCount++;--newline--        }--newline--    }--newline--    --newline--    private void inorder(TreeNode root) {--newline--        if (root == null) return;--newline--        inorder(root.left);--newline--        handleValue(root.val);--newline--        inorder(root.right);--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 25, "l_type": "java"}