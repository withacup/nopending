{"solution_code": "public class Solution {--newline--    public static ListNode mergeKLists(ListNode[] lists){--newline--        return partion(lists,0,lists.length-1);--newline--    }--newline--    --newline--    public static ListNode partion(ListNode[] lists,int s,int e){--newline--        if(s==e)  return lists[s];--newline--        if(s<e){--newline--            int q=(s+e)/2;--newline--            ListNode l1=partion(lists,s,q);--newline--            ListNode l2=partion(lists,q+1,e);--newline--            return merge(l1,l2);--newline--        }else--newline--            return null;--newline--    }--newline--    --newline--    //This function is from Merge Two Sorted Lists.--newline--    public static ListNode merge(ListNode l1,ListNode l2){--newline--        if(l1==null) return l2;--newline--        if(l2==null) return l1;--newline--        if(l1.val<l2.val){--newline--            l1.next=merge(l1.next,l2);--newline--            return l1;--newline--        }else{--newline--            l2.next=merge(l1,l2.next);--newline--            return l2;--newline--        }--newline--    }--newline--}", "modified_code": null, "total_cases": 130, "l_type": "java"}