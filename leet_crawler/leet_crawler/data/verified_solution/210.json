{"solution_code": "public class Solution {--newline--    public int[] findOrder(int numCourses, int[][] prerequisites) {--newline--        List<List<Integer>> adj = new ArrayList<>(numCourses);--newline--        for (int i = 0; i < numCourses; i++) adj.add(i, new ArrayList<>());--newline--        for (int i = 0; i < prerequisites.length; i++) adj.get(prerequisites[i][1]).add(prerequisites[i][0]);--newline--        boolean[] visited = new boolean[numCourses];--newline--        Stack<Integer> stack = new Stack<>();--newline--        for (int i = 0; i < numCourses; i++) {--newline--            if (!topologicalSort(adj, i, stack, visited, new boolean[numCourses])) return new int[0];--newline--        }--newline--        int i = 0;--newline--        int[] result = new int[numCourses];--newline--        while (!stack.isEmpty()) {--newline--            result[i++] = stack.pop();--newline--        }--newline--        return result;--newline--    }--newline--    --newline--    private boolean topologicalSort(List<List<Integer>> adj, int v, Stack<Integer> stack, boolean[] visited, boolean[] isLoop) {--newline--        if (visited[v]) return true;--newline--        if (isLoop[v]) return false;--newline--        isLoop[v] = true;--newline--        for (Integer u : adj.get(v)) {--newline--            if (!topologicalSort(adj, u, stack, visited, isLoop)) return false;--newline--        }--newline--        visited[v] = true;--newline--        stack.push(v);--newline--        return true;--newline--    }--newline--}", "modified_code": null, "total_cases": 37, "l_type": "java"}