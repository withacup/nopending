{"solution_code": "public class Solution {--newline--    public boolean canFinish(int numCourses, int[][] prerequisites) {--newline--        int[][] matrix = new int[numCourses][numCourses]; // i -> j--newline--        int[] indegree = new int[numCourses];--newline--        --newline--        for (int i=0; i<prerequisites.length; i++) {--newline--            int ready = prerequisites[i][0];--newline--            int pre = prerequisites[i][1];--newline--            if (matrix[pre][ready] == 0)--newline--                indegree[ready]++; //duplicate case--newline--            matrix[pre][ready] = 1;--newline--        }--newline--        --newline--        int count = 0;--newline--        Queue<Integer> queue = new LinkedList();--newline--        for (int i=0; i<indegree.length; i++) {--newline--            if (indegree[i] == 0) queue.offer(i);--newline--        }--newline--        while (!queue.isEmpty()) {--newline--            int course = queue.poll();--newline--            count++;--newline--            for (int i=0; i<numCourses; i++) {--newline--                if (matrix[course][i] != 0) {--newline--                    if (--indegree[i] == 0)--newline--                        queue.offer(i);--newline--                }--newline--            }--newline--        }--newline--        return count == numCourses;--newline--    }--newline--}", "modified_code": null, "total_cases": 37, "l_type": "java"}