{"solution_code": "public class Solution {--newline--        public boolean canCross(int[] stones) {--newline--            if (stones.length == 0) {--newline--                return true;--newline--            }--newline--            --newline--            HashMap<Integer, HashSet<Integer>> map = new HashMap<Integer, HashSet<Integer>>(stones.length);--newline--            map.put(0, new HashSet<Integer>());--newline--            map.get(0).add(1);--newline--            for (int i = 1; i < stones.length; i++) {--newline--                map.put(stones[i], new HashSet<Integer>() );--newline--            }--newline--            --newline--            for (int i = 0; i < stones.length - 1; i++) {--newline--                int stone = stones[i];--newline--                for (int step : map.get(stone)) {--newline--                    int reach = step + stone;--newline--                    if (reach == stones[stones.length - 1]) {--newline--                        return true;--newline--                    }--newline--                    HashSet<Integer> set = map.get(reach);--newline--                    if (set != null) {--newline--                        set.add(step);--newline--                        if (step - 1 > 0) set.add(step - 1);--newline--                        set.add(step + 1);--newline--                    }--newline--                }--newline--            }--newline--            --newline--            return false;--newline--        } --newline--    --newline--}", "modified_code": null, "total_cases": 39, "l_type": "java"}