{"solution_code": "public class Solution {--newline--    public List<Integer> largestDivisibleSubset(int[] nums) {--newline--        int n = nums.length;--newline--        int[] count = new int[n];--newline--        int[] pre = new int[n];--newline--        Arrays.sort(nums);--newline--        int max = 0, index = -1;--newline--        for (int i = 0; i < n; i++) {--newline--            count[i] = 1;--newline--            pre[i] = -1;--newline--            for (int j = i - 1; j >= 0; j--) {--newline--                if (nums[i] % nums[j] == 0) {--newline--                    if (1 + count[j] > count[i]) {--newline--                        count[i] = count[j] + 1;--newline--                        pre[i] = j;--newline--                    }--newline--                }--newline--            }--newline--            if (count[i] > max) {--newline--                max = count[i];--newline--                index = i;--newline--            }--newline--        }--newline--        List<Integer> res = new ArrayList<>();--newline--        while (index != -1) {--newline--            res.add(nums[index]);--newline--            index = pre[index];--newline--        }--newline--        return res;--newline--    }--newline--}", "modified_code": null, "total_cases": 40, "l_type": "java"}