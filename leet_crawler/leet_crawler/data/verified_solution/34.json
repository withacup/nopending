{"solution_code": "public class Solution {--newline--    public int[] searchRange(int[] A, int target) {--newline--        int start = Solution.firstGreaterEqual(A, target);--newline--        if (start == A.length || A[start] != target) {--newline--            return new int[]{-1, -1};--newline--        }--newline--        return new int[]{start, Solution.firstGreaterEqual(A, target + 1) - 1};--newline--    }--newline----newline--    //find the first number that is greater than or equal to target.--newline--    //could return A.length if target is greater than A[A.length-1].--newline--    //actually this is the same as lower_bound in C++ STL.--newline--    private static int firstGreaterEqual(int[] A, int target) {--newline--        int low = 0, high = A.length;--newline--        while (low < high) {--newline--            int mid = low + ((high - low) >> 1);--newline--            //low <= mid < high--newline--            if (A[mid] < target) {--newline--                low = mid + 1;--newline--            } else {--newline--                //should not be mid-1 when A[mid]==target.--newline--                //could be mid even if A[mid]>target because mid<high.--newline--                high = mid;--newline--            }--newline--        }--newline--        return low;--newline--    }--newline--}", "modified_code": null, "total_cases": 87, "l_type": "java"}