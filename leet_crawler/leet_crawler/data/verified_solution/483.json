{"solution_code": "import java.math.*;--newline----newline--public class Solution {--newline----newline--    public String smallestGoodBase(String n) {--newline--        BigInteger N = new BigInteger(n);--newline--        long base = Long.MAX_VALUE;--newline----newline--        for (int k = 2; k < 66; k++) {--newline----newline--            long l = 2, r = Long.MAX_VALUE - 5;--newline--            while (l <= r) {--newline--                long mid = l + (r - l) / 2;--newline----newline--                BigInteger cb = BigInteger.valueOf(mid).pow(k).subtract(BigInteger.ONE);--newline--                BigInteger wb = N.multiply(BigInteger.valueOf(mid).subtract(BigInteger.ONE));--newline----newline--                int cmp = cb.compareTo(wb);--newline--                if (cmp == 0) {--newline--                    base = Math.min(base, mid);--newline--                    break;--newline--                } else if (cmp < 0) {--newline--                    l = mid + 1;--newline--                } else {--newline--                    r = mid - 1;--newline--                }--newline--            }--newline--        }--newline----newline--        return \"\" + base;--newline--    }--newline--}--newline--", "modified_code": null, "total_cases": 106, "l_type": "java"}